v0.0.4
type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type Option[A] {
  Some(A),
  None,
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

def @main(%input-0: Tensor[(5), custom[string]64]) -> (Tensor[(5), int64], Tensor[(1), int32]) {
  %0 = contrib.hash_table(key_dtype="custom[string]64", value_dtype="int64", dtype="custom[hashtable]64") /* ty=Tensor[(1), custom[hashtable]64] */;
  %1 = contrib.lookup_table_find(%0, %input-0, meta[relay.Constant][0] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, key_dtype="custom[string]64", value_dtype="int64", dtype="int64") /* ty=Tensor[(5), int64] */;
  %2 = contrib.initialize_table_from_text_file(%0, meta[relay.Constant][1] /* ty=Tensor[(1), custom[string]64] */ /* ty=Tensor[(1), custom[string]64] */, delim="b'\t'") /* ty=Tensor[(1), int32] */;
  (%1, %2)
}

def @tensor_array_stack_int64(%tensor_array: List[tensor_int64_t[]]) -> tensor_int64_t[] {
  %3 = @map(@tensor_expand_dims_int64, %tensor_array) /* ty=List[tensor_int64_t[]] */;
  %4 = @hd(%3) /* ty=tensor_int64_t[] */;
  %5 = @tl(%3) /* ty=List[tensor_int64_t[]] */;
  @foldl(@tensor_concatenate_int64, %4, %5) /* ty=tensor_int64_t[] */
}

def @tensor_array_concat_int64(%tensor_array1: List[tensor_int64_t[]]) -> tensor_int64_t[] {
  match? (%tensor_array1) {
    Nil => tensor_nil_int64 /* ty=tensor_int64_t[] */,
    Cons(%hd: tensor_int64_t[], %tl: List[tensor_int64_t[]]) => match? (%tl) {
      Nil => %hd,
      _ => %6 = @tensor_array_concat_int64(%tl) /* ty=tensor_int64_t[] */;
      @tensor_concatenate_int64(%hd, %6) /* ty=tensor_int64_t[] */,
    },
  }
}

def @tensor_array_scatter_int64(%tensor_array2: List[tensor_int64_t[]], %indices: Tensor[(?), int32], %values: List[tensor_int64_t[]]) -> List[tensor_int64_t[]] {
  %7 = shape_of(%indices, dtype="int32") /* ty=Tensor[(1), int32] */;
  %8 = take(%7, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int64(%tensor_array2, 0 /* ty=int32 */, %8, %indices, %values) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor6_int64(%tensor: Tensor[(?, ?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %9 = shape_of(%tensor, dtype="int32") /* ty=Tensor[(6), int32] */;
  %10 = take(%9, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int64(0 /* ty=int32 */, %10, %tensor) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor6_helper_int64(%i: int32, %up: int32, %t: Tensor[(?, ?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %11 = equal(%i, %up) /* ty=bool */;
  if (%11) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %12 = take(%t, %i, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    %13 = tensor5_int64(%12) /* ty=tensor_int64_t[] */;
    %14 = add(%i, 1 /* ty=int32 */) /* ty=int32 */;
    %15 = @tensor_array_unstack_tensor6_helper_int64(%14, %up, %t) /* ty=List[tensor_int64_t[]] */;
    Cons(%13, %15) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int64(%tensor1: Tensor[(?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %16 = shape_of(%tensor1, dtype="int32") /* ty=Tensor[(5), int32] */;
  %17 = take(%16, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int64(0 /* ty=int32 */, %17, %tensor1) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int64(%i1: int32, %up1: int32, %t1: Tensor[(?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %18 = equal(%i1, %up1) /* ty=bool */;
  if (%18) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %19 = take(%t1, %i1, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    %20 = tensor3_int64(%19) /* ty=tensor_int64_t[] */;
    %21 = add(%i1, 1 /* ty=int32 */) /* ty=int32 */;
    %22 = @tensor_array_unstack_tensor4_helper_int64(%21, %up1, %t1) /* ty=List[tensor_int64_t[]] */;
    Cons(%20, %22) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int64(%tensor2: Tensor[(?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %23 = shape_of(%tensor2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = take(%23, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int64(0 /* ty=int32 */, %24, %tensor2) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor2_int64(%tensor3: Tensor[(?, ?), int64]) -> List[tensor_int64_t[]] {
  %25 = shape_of(%tensor3, dtype="int32") /* ty=Tensor[(2), int32] */;
  %26 = take(%25, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int64(0 /* ty=int32 */, %26, %tensor3) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor2_helper_int64(%i2: int32, %up2: int32, %t2: Tensor[(?, ?), int64]) -> List[tensor_int64_t[]] {
  %27 = equal(%i2, %up2) /* ty=bool */;
  if (%27) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %28 = take(%t2, %i2, axis=0) /* ty=Tensor[(?), int64] */;
    %29 = tensor1_int64(%28) /* ty=tensor_int64_t[] */;
    %30 = add(%i2, 1 /* ty=int32 */) /* ty=int32 */;
    %31 = @tensor_array_unstack_tensor2_helper_int64(%30, %up2, %t2) /* ty=List[tensor_int64_t[]] */;
    Cons(%29, %31) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_int64(%i3: int32, %up3: int32, %t3: Tensor[(?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %32 = equal(%i3, %up3) /* ty=bool */;
  if (%32) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %33 = take(%t3, %i3, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    %34 = tensor4_int64(%33) /* ty=tensor_int64_t[] */;
    %35 = add(%i3, 1 /* ty=int32 */) /* ty=int32 */;
    %36 = @tensor_array_unstack_tensor5_helper_int64(%35, %up3, %t3) /* ty=List[tensor_int64_t[]] */;
    Cons(%34, %36) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor1_int64(%tensor4: Tensor[(?), int64]) -> List[tensor_int64_t[]] {
  %37 = shape_of(%tensor4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %38 = take(%37, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int64(0 /* ty=int32 */, %38, %tensor4) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_write_int64(%tensor_array3: List[tensor_int64_t[]], %x: int32, %v: tensor_int64_t[]) -> List[tensor_int64_t[]] {
  @update(%tensor_array3, %x, %v) /* ty=List[tensor_int64_t[]] */
}

def @tensor_concatenate_int64(%x1: tensor_int64_t[], %y: tensor_int64_t[]) -> tensor_int64_t[] {
  match? (%x1) {
    tensor1_int64(%t11: Tensor[(?), int64]) => match? (%y) {
      tensor1_int64(%t12: Tensor[(?), int64]) => %39 = (%t11, %t12);
      %40 = concatenate(%39) /* ty=Tensor[(?), int64] */;
      tensor1_int64(%40) /* ty=tensor_int64_t[] */,
    },
    tensor2_int64(%t21: Tensor[(?, ?), int64]) => match? (%y) {
      tensor2_int64(%t22: Tensor[(?, ?), int64]) => %41 = (%t21, %t22);
      %42 = concatenate(%41) /* ty=Tensor[(?, ?), int64] */;
      tensor2_int64(%42) /* ty=tensor_int64_t[] */,
    },
    tensor3_int64(%t31: Tensor[(?, ?, ?), int64]) => match? (%y) {
      tensor3_int64(%t32: Tensor[(?, ?, ?), int64]) => %43 = (%t31, %t32);
      %44 = concatenate(%43) /* ty=Tensor[(?, ?, ?), int64] */;
      tensor3_int64(%44) /* ty=tensor_int64_t[] */,
    },
    tensor4_int64(%t41: Tensor[(?, ?, ?, ?), int64]) => match? (%y) {
      tensor4_int64(%t42: Tensor[(?, ?, ?, ?), int64]) => %45 = (%t41, %t42);
      %46 = concatenate(%45) /* ty=Tensor[(?, ?, ?, ?), int64] */;
      tensor4_int64(%46) /* ty=tensor_int64_t[] */,
    },
  }
}

def @tensor_expand_dims_int64(%x2: tensor_int64_t[]) -> tensor_int64_t[] {
  match? (%x2) {
    tensor0_int64(%t0: int64) => %47 = expand_dims(%t0, axis=0) /* ty=Tensor[(?), int64] */;
    tensor1_int64(%47) /* ty=tensor_int64_t[] */,
    tensor1_int64(%t13: Tensor[(?), int64]) => %48 = expand_dims(%t13, axis=0) /* ty=Tensor[(?, ?), int64] */;
    tensor2_int64(%48) /* ty=tensor_int64_t[] */,
    tensor2_int64(%t23: Tensor[(?, ?), int64]) => %49 = expand_dims(%t23, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    tensor3_int64(%49) /* ty=tensor_int64_t[] */,
    tensor3_int64(%t33: Tensor[(?, ?, ?), int64]) => %50 = expand_dims(%t33, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    tensor4_int64(%50) /* ty=tensor_int64_t[] */,
    tensor4_int64(%t4: Tensor[(?, ?, ?, ?), int64]) => %51 = expand_dims(%t4, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    tensor5_int64(%51) /* ty=tensor_int64_t[] */,
    tensor5_int64(%t5: Tensor[(?, ?, ?, ?, ?), int64]) => %52 = expand_dims(%t5, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int64] */;
    tensor6_int64(%52) /* ty=tensor_int64_t[] */,
  }
}

def @tensor_array_stack_uint16(%tensor_array4: List[tensor_uint16_t[]]) -> tensor_uint16_t[] {
  %53 = @map(@tensor_expand_dims_uint16, %tensor_array4) /* ty=List[tensor_uint16_t[]] */;
  %54 = @hd(%53) /* ty=tensor_uint16_t[] */;
  %55 = @tl(%53) /* ty=List[tensor_uint16_t[]] */;
  @foldl(@tensor_concatenate_uint16, %54, %55) /* ty=tensor_uint16_t[] */
}

def @tensor_array_concat_uint16(%tensor_array5: List[tensor_uint16_t[]]) -> tensor_uint16_t[] {
  match? (%tensor_array5) {
    Nil => tensor_nil_uint16 /* ty=tensor_uint16_t[] */,
    Cons(%hd1: tensor_uint16_t[], %tl1: List[tensor_uint16_t[]]) => match? (%tl1) {
      Nil => %hd1,
      _ => %56 = @tensor_array_concat_uint16(%tl1) /* ty=tensor_uint16_t[] */;
      @tensor_concatenate_uint16(%hd1, %56) /* ty=tensor_uint16_t[] */,
    },
  }
}

def @ta_split_helper_uint16(%tensor_array6: List[tensor_uint16_t[]], %value1: tensor_uint16_t[], %offset1: int32, %current1: int32, %limit1: int32, %lengths: Tensor[(?), int32]) -> List[tensor_uint16_t[]] {
  %57 = equal(%current1, %limit1) /* ty=bool */;
  if (%57) {
    %tensor_array6
  } else {
    %58 = take(%lengths, %current1) /* ty=int32 */;
    %59 = add(%offset1, %58) /* ty=int32 */;
    %60 = add(%current1, 1 /* ty=int32 */) /* ty=int32 */;
    %61 = @ta_split_helper_uint16(%tensor_array6, %value1, %59, %60, %limit1, %lengths) /* ty=List[tensor_uint16_t[]] */;
    %62 = take(%lengths, %current1) /* ty=int32 */;
    %63 = add(%62, %offset1) /* ty=int32 */;
    %64 = @tensor_take_uint16(%value1, %offset1, %63) /* ty=tensor_uint16_t[] */;
    @tensor_array_write_uint16(%61, %current1, %64) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_scatter_helper_uint16(%ta: List[tensor_uint16_t[]], %current: int32, %limit: int32, %indices_: Tensor[(?), int32], %values_: List[tensor_uint16_t[]]) -> List[tensor_uint16_t[]] {
  %65 = equal(%current, %limit) /* ty=bool */;
  if (%65) {
    %ta
  } else {
    %66 = take(%indices_, %current) /* ty=int32 */;
    %67 = @tensor_array_read_uint16(%values_, %current) /* ty=tensor_uint16_t[] */;
    %68 = @tensor_array_write_uint16(%ta, %66, %67) /* ty=List[tensor_uint16_t[]] */;
    %69 = add(%current, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_uint16(%68, %69, %limit, %indices_, %values_) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_uint16(%i4: int32, %up4: int32, %t6: Tensor[(?, ?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %70 = equal(%i4, %up4) /* ty=bool */;
  if (%70) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %71 = take(%t6, %i4, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    %72 = tensor5_uint16(%71) /* ty=tensor_uint16_t[] */;
    %73 = add(%i4, 1 /* ty=int32 */) /* ty=int32 */;
    %74 = @tensor_array_unstack_tensor6_helper_uint16(%73, %up4, %t6) /* ty=List[tensor_uint16_t[]] */;
    Cons(%72, %74) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor5_uint16(%tensor5: Tensor[(?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %75 = shape_of(%tensor5, dtype="int32") /* ty=Tensor[(5), int32] */;
  %76 = take(%75, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_uint16(0 /* ty=int32 */, %76, %tensor5) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor5_helper_uint16(%i5: int32, %up5: int32, %t7: Tensor[(?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %77 = equal(%i5, %up5) /* ty=bool */;
  if (%77) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %78 = take(%t7, %i5, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    %79 = tensor4_uint16(%78) /* ty=tensor_uint16_t[] */;
    %80 = add(%i5, 1 /* ty=int32 */) /* ty=int32 */;
    %81 = @tensor_array_unstack_tensor5_helper_uint16(%80, %up5, %t7) /* ty=List[tensor_uint16_t[]] */;
    Cons(%79, %81) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_uint16(%i6: int32, %up6: int32, %t8: Tensor[(?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %82 = equal(%i6, %up6) /* ty=bool */;
  if (%82) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %83 = take(%t8, %i6, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    %84 = tensor3_uint16(%83) /* ty=tensor_uint16_t[] */;
    %85 = add(%i6, 1 /* ty=int32 */) /* ty=int32 */;
    %86 = @tensor_array_unstack_tensor4_helper_uint16(%85, %up6, %t8) /* ty=List[tensor_uint16_t[]] */;
    Cons(%84, %86) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_uint16(%i7: int32, %up7: int32, %t9: Tensor[(?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %87 = equal(%i7, %up7) /* ty=bool */;
  if (%87) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %88 = take(%t9, %i7, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    %89 = tensor2_uint16(%88) /* ty=tensor_uint16_t[] */;
    %90 = add(%i7, 1 /* ty=int32 */) /* ty=int32 */;
    %91 = @tensor_array_unstack_tensor3_helper_uint16(%90, %up7, %t9) /* ty=List[tensor_uint16_t[]] */;
    Cons(%89, %91) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_uint16(%tensor6: Tensor[(?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %92 = shape_of(%tensor6, dtype="int32") /* ty=Tensor[(2), int32] */;
  %93 = take(%92, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_uint16(0 /* ty=int32 */, %93, %tensor6) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor2_helper_uint16(%i8: int32, %up8: int32, %t10: Tensor[(?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %94 = equal(%i8, %up8) /* ty=bool */;
  if (%94) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %95 = take(%t10, %i8, axis=0) /* ty=Tensor[(?), uint16] */;
    %96 = tensor1_uint16(%95) /* ty=tensor_uint16_t[] */;
    %97 = add(%i8, 1 /* ty=int32 */) /* ty=int32 */;
    %98 = @tensor_array_unstack_tensor2_helper_uint16(%97, %up8, %t10) /* ty=List[tensor_uint16_t[]] */;
    Cons(%96, %98) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_split_float64(%tensor_array7: List[tensor_float64_t[]], %value: tensor_float64_t[], %lengths1: Tensor[(?), int32]) -> List[tensor_float64_t[]] {
  %99 = shape_of(%lengths1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %100 = take(%99, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float64(%tensor_array7, %value, 0 /* ty=int32 */, 0 /* ty=int32 */, %100, %lengths1) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor1_helper_int32(%i9: int32, %up9: int32, %t14: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %101 = equal(%i9, %up9) /* ty=bool */;
  if (%101) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %102 = take(%t14, %i9) /* ty=int32 */;
    %103 = tensor0_int32(%102) /* ty=tensor_int32_t[] */;
    %104 = add(%i9, 1 /* ty=int32 */) /* ty=int32 */;
    %105 = @tensor_array_unstack_tensor1_helper_int32(%104, %up9, %t14) /* ty=List[tensor_int32_t[]] */;
    Cons(%103, %105) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int32(%tensor7: Tensor[(?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %106 = shape_of(%tensor7, dtype="int32") /* ty=Tensor[(5), int32] */;
  %107 = take(%106, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int32(0 /* ty=int32 */, %107, %tensor7) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor5_float64(%tensor8: Tensor[(?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %108 = shape_of(%tensor8, dtype="int32") /* ty=Tensor[(5), int32] */;
  %109 = take(%108, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float64(0 /* ty=int32 */, %109, %tensor8) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor1_float16(%tensor9: Tensor[(?), float16]) -> List[tensor_float16_t[]] {
  %110 = shape_of(%tensor9, dtype="int32") /* ty=Tensor[(1), int32] */;
  %111 = take(%110, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float16(0 /* ty=int32 */, %111, %tensor9) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor2_helper_int8(%i10: int32, %up10: int32, %t15: Tensor[(?, ?), int8]) -> List[tensor_int8_t[]] {
  %112 = equal(%i10, %up10) /* ty=bool */;
  if (%112) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %113 = take(%t15, %i10, axis=0) /* ty=Tensor[(?), int8] */;
    %114 = tensor1_int8(%113) /* ty=tensor_int8_t[] */;
    %115 = add(%i10, 1 /* ty=int32 */) /* ty=int32 */;
    %116 = @tensor_array_unstack_tensor2_helper_int8(%115, %up10, %t15) /* ty=List[tensor_int8_t[]] */;
    Cons(%114, %116) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_int16(%i11: int32, %up11: int32, %t16: Tensor[(?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %117 = equal(%i11, %up11) /* ty=bool */;
  if (%117) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %118 = take(%t16, %i11, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    %119 = tensor4_int16(%118) /* ty=tensor_int16_t[] */;
    %120 = add(%i11, 1 /* ty=int32 */) /* ty=int32 */;
    %121 = @tensor_array_unstack_tensor5_helper_int16(%120, %up11, %t16) /* ty=List[tensor_int16_t[]] */;
    Cons(%119, %121) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_float64(%tensor10: Tensor[(?, ?), float64]) -> List[tensor_float64_t[]] {
  %122 = shape_of(%tensor10, dtype="int32") /* ty=Tensor[(2), int32] */;
  %123 = take(%122, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float64(0 /* ty=int32 */, %123, %tensor10) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int16(%i12: int32, %up12: int32, %t17: Tensor[(?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %124 = equal(%i12, %up12) /* ty=bool */;
  if (%124) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %125 = take(%t17, %i12, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    %126 = tensor3_int16(%125) /* ty=tensor_int16_t[] */;
    %127 = add(%i12, 1 /* ty=int32 */) /* ty=int32 */;
    %128 = @tensor_array_unstack_tensor4_helper_int16(%127, %up12, %t17) /* ty=List[tensor_int16_t[]] */;
    Cons(%126, %128) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_float64(%x3: int32) -> List[tensor_float64_t[]] {
  %129 = equal(%x3, 0 /* ty=int32 */) /* ty=bool */;
  if (%129) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %130 = tensor_nil_float64 /* ty=tensor_float64_t[] */;
    %131 = subtract(%x3, 1 /* ty=int32 */) /* ty=int32 */;
    %132 = @tensor_array_float64(%131) /* ty=List[tensor_float64_t[]] */;
    Cons(%130, %132) /* ty=List[tensor_float64_t[]] */
  }
}

def @foldr1[A](%f: fn (A, A) -> A, %xs: List[A]) -> A {
  match? (%xs) {
    Cons(%x4: A, Nil) => %x4,
    Cons(%x5: A, %rest: List[A]) => %133 = @foldr1(%f, %rest) /* ty=A */;
    %f(%x5, %133) /* ty=A */,
  }
}

def @tensor_array_unstack_tensor3_float32(%tensor11: Tensor[(?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %134 = shape_of(%tensor11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = take(%134, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float32(0 /* ty=int32 */, %135, %tensor11) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor6_float64(%tensor12: Tensor[(?, ?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %136 = shape_of(%tensor12, dtype="int32") /* ty=Tensor[(6), int32] */;
  %137 = take(%136, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float64(0 /* ty=int32 */, %137, %tensor12) /* ty=List[tensor_float64_t[]] */
}

def @tensor_expand_dims_float64(%x6: tensor_float64_t[]) -> tensor_float64_t[] {
  match? (%x6) {
    tensor0_float64(%t01: float64) => %138 = expand_dims(%t01, axis=0) /* ty=Tensor[(?), float64] */;
    tensor1_float64(%138) /* ty=tensor_float64_t[] */,
    tensor1_float64(%t18: Tensor[(?), float64]) => %139 = expand_dims(%t18, axis=0) /* ty=Tensor[(?, ?), float64] */;
    tensor2_float64(%139) /* ty=tensor_float64_t[] */,
    tensor2_float64(%t24: Tensor[(?, ?), float64]) => %140 = expand_dims(%t24, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    tensor3_float64(%140) /* ty=tensor_float64_t[] */,
    tensor3_float64(%t34: Tensor[(?, ?, ?), float64]) => %141 = expand_dims(%t34, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    tensor4_float64(%141) /* ty=tensor_float64_t[] */,
    tensor4_float64(%t43: Tensor[(?, ?, ?, ?), float64]) => %142 = expand_dims(%t43, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    tensor5_float64(%142) /* ty=tensor_float64_t[] */,
    tensor5_float64(%t51: Tensor[(?, ?, ?, ?, ?), float64]) => %143 = expand_dims(%t51, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float64] */;
    tensor6_float64(%143) /* ty=tensor_float64_t[] */,
  }
}

def @tensor_concatenate_int8(%x7: tensor_int8_t[], %y1: tensor_int8_t[]) -> tensor_int8_t[] {
  match? (%x7) {
    tensor1_int8(%t111: Tensor[(?), int8]) => match? (%y1) {
      tensor1_int8(%t121: Tensor[(?), int8]) => %144 = (%t111, %t121);
      %145 = concatenate(%144) /* ty=Tensor[(?), int8] */;
      tensor1_int8(%145) /* ty=tensor_int8_t[] */,
    },
    tensor2_int8(%t211: Tensor[(?, ?), int8]) => match? (%y1) {
      tensor2_int8(%t221: Tensor[(?, ?), int8]) => %146 = (%t211, %t221);
      %147 = concatenate(%146) /* ty=Tensor[(?, ?), int8] */;
      tensor2_int8(%147) /* ty=tensor_int8_t[] */,
    },
    tensor3_int8(%t311: Tensor[(?, ?, ?), int8]) => match? (%y1) {
      tensor3_int8(%t321: Tensor[(?, ?, ?), int8]) => %148 = (%t311, %t321);
      %149 = concatenate(%148) /* ty=Tensor[(?, ?, ?), int8] */;
      tensor3_int8(%149) /* ty=tensor_int8_t[] */,
    },
    tensor4_int8(%t411: Tensor[(?, ?, ?, ?), int8]) => match? (%y1) {
      tensor4_int8(%t421: Tensor[(?, ?, ?, ?), int8]) => %150 = (%t411, %t421);
      %151 = concatenate(%150) /* ty=Tensor[(?, ?, ?, ?), int8] */;
      tensor4_int8(%151) /* ty=tensor_int8_t[] */,
    },
  }
}

def @tensor_take_float64(%tensor13: tensor_float64_t[], %lower: int32, %upper: int32) -> tensor_float64_t[] {
  match? (%tensor13) {
    tensor1_float64(%t19: Tensor[(?), float64]) => %152 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][2], dtype="int32") /* ty=Tensor[(?), int32] */;
    %153 = take(%t19, %152) /* ty=Tensor[(?), float64] */;
    tensor1_float64(%153) /* ty=tensor_float64_t[] */,
    tensor2_float64(%t25: Tensor[(?, ?), float64]) => %154 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][3], dtype="int32") /* ty=Tensor[(?), int32] */;
    %155 = take(%t25, %154, axis=0) /* ty=Tensor[(?, ?), float64] */;
    tensor2_float64(%155) /* ty=tensor_float64_t[] */,
    tensor3_float64(%t35: Tensor[(?, ?, ?), float64]) => %156 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][4], dtype="int32") /* ty=Tensor[(?), int32] */;
    %157 = take(%t35, %156, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    tensor3_float64(%157) /* ty=tensor_float64_t[] */,
    tensor4_float64(%t44: Tensor[(?, ?, ?, ?), float64]) => %158 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][5], dtype="int32") /* ty=Tensor[(?), int32] */;
    %159 = take(%t44, %158, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    tensor4_float64(%159) /* ty=tensor_float64_t[] */,
    tensor5_float64(%t52: Tensor[(?, ?, ?, ?, ?), float64]) => %160 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][6], dtype="int32") /* ty=Tensor[(?), int32] */;
    %161 = take(%t52, %160, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    tensor5_float64(%161) /* ty=tensor_float64_t[] */,
    tensor6_float64(%t61: Tensor[(?, ?, ?, ?, ?, ?), float64]) => %162 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][7], dtype="int32") /* ty=Tensor[(?), int32] */;
    %163 = take(%t61, %162, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float64] */;
    tensor6_float64(%163) /* ty=tensor_float64_t[] */,
  }
}

def @tensor_array_read_float64(%tensor_array8: List[tensor_float64_t[]], %x8: int32) -> tensor_float64_t[] {
  @nth(%tensor_array8, %x8) /* ty=tensor_float64_t[] */
}

def @foldl[A, B](%f1: fn (A, B) -> A, %acc: A, %xs1: List[B]) -> A {
  match (%xs1) {
    Cons(%x9: B, %rest1: List[B]) => %164 = %f1(%acc, %x9) /* ty=A */;
    @foldl(%f1, %164, %rest1) /* ty=A */,
    Nil => %acc,
  }
}

def @tensor_array_unstack_tensor6_float16(%tensor14: Tensor[(?, ?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %165 = shape_of(%tensor14, dtype="int32") /* ty=Tensor[(6), int32] */;
  %166 = take(%165, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float16(0 /* ty=int32 */, %166, %tensor14) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor2_int16(%tensor15: Tensor[(?, ?), int16]) -> List[tensor_int16_t[]] {
  %167 = shape_of(%tensor15, dtype="int32") /* ty=Tensor[(2), int32] */;
  %168 = take(%167, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int16(0 /* ty=int32 */, %168, %tensor15) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_scatter_helper_float64(%ta1: List[tensor_float64_t[]], %current2: int32, %limit2: int32, %indices_1: Tensor[(?), int32], %values_1: List[tensor_float64_t[]]) -> List[tensor_float64_t[]] {
  %169 = equal(%current2, %limit2) /* ty=bool */;
  if (%169) {
    %ta1
  } else {
    %170 = take(%indices_1, %current2) /* ty=int32 */;
    %171 = @tensor_array_read_float64(%values_1, %current2) /* ty=tensor_float64_t[] */;
    %172 = @tensor_array_write_float64(%ta1, %170, %171) /* ty=List[tensor_float64_t[]] */;
    %173 = add(%current2, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float64(%172, %173, %limit2, %indices_1, %values_1) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_int64(%x10: int32) -> List[tensor_int64_t[]] {
  %174 = equal(%x10, 0 /* ty=int32 */) /* ty=bool */;
  if (%174) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %175 = tensor_nil_int64 /* ty=tensor_int64_t[] */;
    %176 = subtract(%x10, 1 /* ty=int32 */) /* ty=int32 */;
    %177 = @tensor_array_int64(%176) /* ty=List[tensor_int64_t[]] */;
    Cons(%175, %177) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_float16(%i13: int32, %up13: int32, %t20: Tensor[(?, ?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %178 = equal(%i13, %up13) /* ty=bool */;
  if (%178) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %179 = take(%t20, %i13, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    %180 = tensor5_float16(%179) /* ty=tensor_float16_t[] */;
    %181 = add(%i13, 1 /* ty=int32 */) /* ty=int32 */;
    %182 = @tensor_array_unstack_tensor6_helper_float16(%181, %up13, %t20) /* ty=List[tensor_float16_t[]] */;
    Cons(%180, %182) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_float16(%i14: int32, %up14: int32, %t26: Tensor[(?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %183 = equal(%i14, %up14) /* ty=bool */;
  if (%183) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %184 = take(%t26, %i14, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    %185 = tensor4_float16(%184) /* ty=tensor_float16_t[] */;
    %186 = add(%i14, 1 /* ty=int32 */) /* ty=int32 */;
    %187 = @tensor_array_unstack_tensor5_helper_float16(%186, %up14, %t26) /* ty=List[tensor_float16_t[]] */;
    Cons(%185, %187) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_stack_uint8(%tensor_array9: List[tensor_uint8_t[]]) -> tensor_uint8_t[] {
  %188 = @map(@tensor_expand_dims_uint8, %tensor_array9) /* ty=List[tensor_uint8_t[]] */;
  %189 = @hd(%188) /* ty=tensor_uint8_t[] */;
  %190 = @tl(%188) /* ty=List[tensor_uint8_t[]] */;
  @foldl(@tensor_concatenate_uint8, %189, %190) /* ty=tensor_uint8_t[] */
}

def @tensor_array_unstack_tensor4_float16(%tensor16: Tensor[(?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %191 = shape_of(%tensor16, dtype="int32") /* ty=Tensor[(4), int32] */;
  %192 = take(%191, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float16(0 /* ty=int32 */, %192, %tensor16) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_split_float32(%tensor_array10: List[tensor_float32_t[]], %value2: tensor_float32_t[], %lengths2: Tensor[(?), int32]) -> List[tensor_float32_t[]] {
  %193 = shape_of(%lengths2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %194 = take(%193, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float32(%tensor_array10, %value2, 0 /* ty=int32 */, 0 /* ty=int32 */, %194, %lengths2) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor6_int8(%tensor17: Tensor[(?, ?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %195 = shape_of(%tensor17, dtype="int32") /* ty=Tensor[(6), int32] */;
  %196 = take(%195, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int8(0 /* ty=int32 */, %196, %tensor17) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor4_helper_float16(%i15: int32, %up15: int32, %t27: Tensor[(?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %197 = equal(%i15, %up15) /* ty=bool */;
  if (%197) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %198 = take(%t27, %i15, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    %199 = tensor3_float16(%198) /* ty=tensor_float16_t[] */;
    %200 = add(%i15, 1 /* ty=int32 */) /* ty=int32 */;
    %201 = @tensor_array_unstack_tensor4_helper_float16(%200, %up15, %t27) /* ty=List[tensor_float16_t[]] */;
    Cons(%199, %201) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_float16(%tensor18: Tensor[(?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %202 = shape_of(%tensor18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = take(%202, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float16(0 /* ty=int32 */, %203, %tensor18) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor3_helper_float16(%i16: int32, %up16: int32, %t28: Tensor[(?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %204 = equal(%i16, %up16) /* ty=bool */;
  if (%204) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %205 = take(%t28, %i16, axis=0) /* ty=Tensor[(?, ?), float16] */;
    %206 = tensor2_float16(%205) /* ty=tensor_float16_t[] */;
    %207 = add(%i16, 1 /* ty=int32 */) /* ty=int32 */;
    %208 = @tensor_array_unstack_tensor3_helper_float16(%207, %up16, %t28) /* ty=List[tensor_float16_t[]] */;
    Cons(%206, %208) /* ty=List[tensor_float16_t[]] */
  }
}

def @compose[A, B, C](%f2: fn (B) -> C, %g: fn (A) -> B) -> fn (A) -> C {
  fn (%x11: A) -> C {
    %209 = %g(%x11) /* ty=B */;
    %f2(%209) /* ty=C */
  }
}

def @tensor_array_unstack_tensor5_helper_float64(%i17: int32, %up17: int32, %t29: Tensor[(?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %210 = equal(%i17, %up17) /* ty=bool */;
  if (%210) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %211 = take(%t29, %i17, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    %212 = tensor4_float64(%211) /* ty=tensor_float64_t[] */;
    %213 = add(%i17, 1 /* ty=int32 */) /* ty=int32 */;
    %214 = @tensor_array_unstack_tensor5_helper_float64(%213, %up17, %t29) /* ty=List[tensor_float64_t[]] */;
    Cons(%212, %214) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_take_int16(%tensor19: tensor_int16_t[], %lower1: int32, %upper1: int32) -> tensor_int16_t[] {
  match? (%tensor19) {
    tensor1_int16(%t110: Tensor[(?), int16]) => %215 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][8], dtype="int32") /* ty=Tensor[(?), int32] */;
    %216 = take(%t110, %215) /* ty=Tensor[(?), int16] */;
    tensor1_int16(%216) /* ty=tensor_int16_t[] */,
    tensor2_int16(%t210: Tensor[(?, ?), int16]) => %217 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][9], dtype="int32") /* ty=Tensor[(?), int32] */;
    %218 = take(%t210, %217, axis=0) /* ty=Tensor[(?, ?), int16] */;
    tensor2_int16(%218) /* ty=tensor_int16_t[] */,
    tensor3_int16(%t36: Tensor[(?, ?, ?), int16]) => %219 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][10], dtype="int32") /* ty=Tensor[(?), int32] */;
    %220 = take(%t36, %219, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    tensor3_int16(%220) /* ty=tensor_int16_t[] */,
    tensor4_int16(%t45: Tensor[(?, ?, ?, ?), int16]) => %221 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][11], dtype="int32") /* ty=Tensor[(?), int32] */;
    %222 = take(%t45, %221, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    tensor4_int16(%222) /* ty=tensor_int16_t[] */,
    tensor5_int16(%t53: Tensor[(?, ?, ?, ?, ?), int16]) => %223 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][12], dtype="int32") /* ty=Tensor[(?), int32] */;
    %224 = take(%t53, %223, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    tensor5_int16(%224) /* ty=tensor_int16_t[] */,
    tensor6_int16(%t62: Tensor[(?, ?, ?, ?, ?, ?), int16]) => %225 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][13], dtype="int32") /* ty=Tensor[(?), int32] */;
    %226 = take(%t62, %225, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int16] */;
    tensor6_int16(%226) /* ty=tensor_int16_t[] */,
  }
}

def @tensor_array_unstack_tensor6_helper_int16(%i18: int32, %up18: int32, %t30: Tensor[(?, ?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %227 = equal(%i18, %up18) /* ty=bool */;
  if (%227) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %228 = take(%t30, %i18, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    %229 = tensor5_int16(%228) /* ty=tensor_int16_t[] */;
    %230 = add(%i18, 1 /* ty=int32 */) /* ty=int32 */;
    %231 = @tensor_array_unstack_tensor6_helper_int16(%230, %up18, %t30) /* ty=List[tensor_int16_t[]] */;
    Cons(%229, %231) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_float16(%i19: int32, %up19: int32, %t37: Tensor[(?, ?), float16]) -> List[tensor_float16_t[]] {
  %232 = equal(%i19, %up19) /* ty=bool */;
  if (%232) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %233 = take(%t37, %i19, axis=0) /* ty=Tensor[(?), float16] */;
    %234 = tensor1_float16(%233) /* ty=tensor_float16_t[] */;
    %235 = add(%i19, 1 /* ty=int32 */) /* ty=int32 */;
    %236 = @tensor_array_unstack_tensor2_helper_float16(%235, %up19, %t37) /* ty=List[tensor_float16_t[]] */;
    Cons(%234, %236) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_scatter_helper_float32(%ta2: List[tensor_float32_t[]], %current3: int32, %limit3: int32, %indices_2: Tensor[(?), int32], %values_2: List[tensor_float32_t[]]) -> List[tensor_float32_t[]] {
  %237 = equal(%current3, %limit3) /* ty=bool */;
  if (%237) {
    %ta2
  } else {
    %238 = take(%indices_2, %current3) /* ty=int32 */;
    %239 = @tensor_array_read_float32(%values_2, %current3) /* ty=tensor_float32_t[] */;
    %240 = @tensor_array_write_float32(%ta2, %238, %239) /* ty=List[tensor_float32_t[]] */;
    %241 = add(%current3, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float32(%240, %241, %limit3, %indices_2, %values_2) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor4_int64(%tensor20: Tensor[(?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %242 = shape_of(%tensor20, dtype="int32") /* ty=Tensor[(4), int32] */;
  %243 = take(%242, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int64(0 /* ty=int32 */, %243, %tensor20) /* ty=List[tensor_int64_t[]] */
}

def @tensor_expand_dims_uint8(%x12: tensor_uint8_t[]) -> tensor_uint8_t[] {
  match? (%x12) {
    tensor0_uint8(%t02: uint8) => %244 = expand_dims(%t02, axis=0) /* ty=Tensor[(?), uint8] */;
    tensor1_uint8(%244) /* ty=tensor_uint8_t[] */,
    tensor1_uint8(%t112: Tensor[(?), uint8]) => %245 = expand_dims(%t112, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    tensor2_uint8(%245) /* ty=tensor_uint8_t[] */,
    tensor2_uint8(%t212: Tensor[(?, ?), uint8]) => %246 = expand_dims(%t212, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    tensor3_uint8(%246) /* ty=tensor_uint8_t[] */,
    tensor3_uint8(%t38: Tensor[(?, ?, ?), uint8]) => %247 = expand_dims(%t38, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    tensor4_uint8(%247) /* ty=tensor_uint8_t[] */,
    tensor4_uint8(%t46: Tensor[(?, ?, ?, ?), uint8]) => %248 = expand_dims(%t46, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    tensor5_uint8(%248) /* ty=tensor_uint8_t[] */,
    tensor5_uint8(%t54: Tensor[(?, ?, ?, ?, ?), uint8]) => %249 = expand_dims(%t54, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint8] */;
    tensor6_uint8(%249) /* ty=tensor_uint8_t[] */,
  }
}

def @tensor_array_read_float16(%tensor_array11: List[tensor_float16_t[]], %x13: int32) -> tensor_float16_t[] {
  @nth(%tensor_array11, %x13) /* ty=tensor_float16_t[] */
}

def @tensor_expand_dims_float16(%x14: tensor_float16_t[]) -> tensor_float16_t[] {
  match? (%x14) {
    tensor0_float16(%t03: float16) => %250 = expand_dims(%t03, axis=0) /* ty=Tensor[(?), float16] */;
    tensor1_float16(%250) /* ty=tensor_float16_t[] */,
    tensor1_float16(%t113: Tensor[(?), float16]) => %251 = expand_dims(%t113, axis=0) /* ty=Tensor[(?, ?), float16] */;
    tensor2_float16(%251) /* ty=tensor_float16_t[] */,
    tensor2_float16(%t213: Tensor[(?, ?), float16]) => %252 = expand_dims(%t213, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    tensor3_float16(%252) /* ty=tensor_float16_t[] */,
    tensor3_float16(%t39: Tensor[(?, ?, ?), float16]) => %253 = expand_dims(%t39, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    tensor4_float16(%253) /* ty=tensor_float16_t[] */,
    tensor4_float16(%t47: Tensor[(?, ?, ?, ?), float16]) => %254 = expand_dims(%t47, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    tensor5_float16(%254) /* ty=tensor_float16_t[] */,
    tensor5_float16(%t55: Tensor[(?, ?, ?, ?, ?), float16]) => %255 = expand_dims(%t55, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float16] */;
    tensor6_float16(%255) /* ty=tensor_float16_t[] */,
  }
}

def @tensor_concatenate_float64(%x15: tensor_float64_t[], %y2: tensor_float64_t[]) -> tensor_float64_t[] {
  match? (%x15) {
    tensor1_float64(%t114: Tensor[(?), float64]) => match? (%y2) {
      tensor1_float64(%t122: Tensor[(?), float64]) => %256 = (%t114, %t122);
      %257 = concatenate(%256) /* ty=Tensor[(?), float64] */;
      tensor1_float64(%257) /* ty=tensor_float64_t[] */,
    },
    tensor2_float64(%t214: Tensor[(?, ?), float64]) => match? (%y2) {
      tensor2_float64(%t222: Tensor[(?, ?), float64]) => %258 = (%t214, %t222);
      %259 = concatenate(%258) /* ty=Tensor[(?, ?), float64] */;
      tensor2_float64(%259) /* ty=tensor_float64_t[] */,
    },
    tensor3_float64(%t312: Tensor[(?, ?, ?), float64]) => match? (%y2) {
      tensor3_float64(%t322: Tensor[(?, ?, ?), float64]) => %260 = (%t312, %t322);
      %261 = concatenate(%260) /* ty=Tensor[(?, ?, ?), float64] */;
      tensor3_float64(%261) /* ty=tensor_float64_t[] */,
    },
    tensor4_float64(%t412: Tensor[(?, ?, ?, ?), float64]) => match? (%y2) {
      tensor4_float64(%t422: Tensor[(?, ?, ?, ?), float64]) => %262 = (%t412, %t422);
      %263 = concatenate(%262) /* ty=Tensor[(?, ?, ?, ?), float64] */;
      tensor4_float64(%263) /* ty=tensor_float64_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor2_helper_int32(%i20: int32, %up20: int32, %t40: Tensor[(?, ?), int32]) -> List[tensor_int32_t[]] {
  %264 = equal(%i20, %up20) /* ty=bool */;
  if (%264) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %265 = take(%t40, %i20, axis=0) /* ty=Tensor[(?), int32] */;
    %266 = tensor1_int32(%265) /* ty=tensor_int32_t[] */;
    %267 = add(%i20, 1 /* ty=int32 */) /* ty=int32 */;
    %268 = @tensor_array_unstack_tensor2_helper_int32(%267, %up20, %t40) /* ty=List[tensor_int32_t[]] */;
    Cons(%266, %268) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_take_float16(%tensor21: tensor_float16_t[], %lower2: int32, %upper2: int32) -> tensor_float16_t[] {
  match? (%tensor21) {
    tensor1_float16(%t115: Tensor[(?), float16]) => %269 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][14], dtype="int32") /* ty=Tensor[(?), int32] */;
    %270 = take(%t115, %269) /* ty=Tensor[(?), float16] */;
    tensor1_float16(%270) /* ty=tensor_float16_t[] */,
    tensor2_float16(%t215: Tensor[(?, ?), float16]) => %271 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][15], dtype="int32") /* ty=Tensor[(?), int32] */;
    %272 = take(%t215, %271, axis=0) /* ty=Tensor[(?, ?), float16] */;
    tensor2_float16(%272) /* ty=tensor_float16_t[] */,
    tensor3_float16(%t310: Tensor[(?, ?, ?), float16]) => %273 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][16], dtype="int32") /* ty=Tensor[(?), int32] */;
    %274 = take(%t310, %273, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    tensor3_float16(%274) /* ty=tensor_float16_t[] */,
    tensor4_float16(%t48: Tensor[(?, ?, ?, ?), float16]) => %275 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][17], dtype="int32") /* ty=Tensor[(?), int32] */;
    %276 = take(%t48, %275, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    tensor4_float16(%276) /* ty=tensor_float16_t[] */,
    tensor5_float16(%t56: Tensor[(?, ?, ?, ?, ?), float16]) => %277 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][18], dtype="int32") /* ty=Tensor[(?), int32] */;
    %278 = take(%t56, %277, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    tensor5_float16(%278) /* ty=tensor_float16_t[] */,
    tensor6_float16(%t63: Tensor[(?, ?, ?, ?, ?, ?), float16]) => %279 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][19], dtype="int32") /* ty=Tensor[(?), int32] */;
    %280 = take(%t63, %279, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float16] */;
    tensor6_float16(%280) /* ty=tensor_float16_t[] */,
  }
}

def @tensor_array_read_int32(%tensor_array12: List[tensor_int32_t[]], %x16: int32) -> tensor_int32_t[] {
  @nth(%tensor_array12, %x16) /* ty=tensor_int32_t[] */
}

def @rev[A](%xs2: List[A]) -> List[A] {
  %281 = @flip(Cons) /* ty=fn (List[A], A) -> List[A] */;
  %282 = Nil /* ty=List[A] */;
  @foldl(%281, %282, %xs2) /* ty=List[A] */
}

def @tensor_array_write_float64(%tensor_array13: List[tensor_float64_t[]], %x17: int32, %v1: tensor_float64_t[]) -> List[tensor_float64_t[]] {
  @update(%tensor_array13, %x17, %v1) /* ty=List[tensor_float64_t[]] */
}

def @foldr[A, B](%f3: fn (A, B) -> B, %acc1: B, %xs3: List[A]) -> B {
  match (%xs3) {
    Cons(%x18: A, %rest2: List[A]) => %283 = @foldr(%f3, %acc1, %rest2) /* ty=B */;
    %f3(%x18, %283) /* ty=B */,
    Nil => %acc1,
  }
}

def @tensor_array_int8(%x19: int32) -> List[tensor_int8_t[]] {
  %284 = equal(%x19, 0 /* ty=int32 */) /* ty=bool */;
  if (%284) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %285 = tensor_nil_int8 /* ty=tensor_int8_t[] */;
    %286 = subtract(%x19, 1 /* ty=int32 */) /* ty=int32 */;
    %287 = @tensor_array_int8(%286) /* ty=List[tensor_int8_t[]] */;
    Cons(%285, %287) /* ty=List[tensor_int8_t[]] */
  }
}

def @tmap[A, B](%f4: fn (A) -> B, %t49: Tree[A]) -> Tree[B] {
  match (%t49) {
    Rose(%v2: A, %sub_trees: List[Tree[A]]) => {
      let %list_f: fn (Tree[A]) -> Tree[B] = fn (%tt: Tree[A]) -> Tree[B] {
        @tmap(%f4, %tt) /* ty=Tree[B] */
      };
      %288 = %f4(%v2) /* ty=B */;
      %289 = @map(%list_f, %sub_trees) /* ty=List[Tree[B]] */;
      Rose(%288, %289) /* ty=Tree[B] */
    },
  }
}

def @id[A](%x20: A) -> A {
  %x20
}

def @tensor_array_unstack_tensor4_float64(%tensor22: Tensor[(?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %290 = shape_of(%tensor22, dtype="int32") /* ty=Tensor[(4), int32] */;
  %291 = take(%290, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float64(0 /* ty=int32 */, %291, %tensor22) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor3_int8(%tensor23: Tensor[(?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %292 = shape_of(%tensor23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = take(%292, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int8(0 /* ty=int32 */, %293, %tensor23) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor2_int8(%tensor24: Tensor[(?, ?), int8]) -> List[tensor_int8_t[]] {
  %294 = shape_of(%tensor24, dtype="int32") /* ty=Tensor[(2), int32] */;
  %295 = take(%294, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int8(0 /* ty=int32 */, %295, %tensor24) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor1_uint16(%tensor25: Tensor[(?), uint16]) -> List[tensor_uint16_t[]] {
  %296 = shape_of(%tensor25, dtype="int32") /* ty=Tensor[(1), int32] */;
  %297 = take(%296, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_uint16(0 /* ty=int32 */, %297, %tensor25) /* ty=List[tensor_uint16_t[]] */
}

def @size[A](%t50: Tree[A]) -> int32 {
  match (%t50) {
    Rose(_, %sub_trees1: List[Tree[A]]) => %298 = @map(@size, %sub_trees1) /* ty=List[int32] */;
    %299 = @sum(%298) /* ty=int32 */;
    add(1 /* ty=int32 */, %299) /* ty=int32 */,
  }
}

def @tensor_concatenate_float16(%x21: tensor_float16_t[], %y3: tensor_float16_t[]) -> tensor_float16_t[] {
  match? (%x21) {
    tensor1_float16(%t116: Tensor[(?), float16]) => match? (%y3) {
      tensor1_float16(%t123: Tensor[(?), float16]) => %300 = (%t116, %t123);
      %301 = concatenate(%300) /* ty=Tensor[(?), float16] */;
      tensor1_float16(%301) /* ty=tensor_float16_t[] */,
    },
    tensor2_float16(%t216: Tensor[(?, ?), float16]) => match? (%y3) {
      tensor2_float16(%t223: Tensor[(?, ?), float16]) => %302 = (%t216, %t223);
      %303 = concatenate(%302) /* ty=Tensor[(?, ?), float16] */;
      tensor2_float16(%303) /* ty=tensor_float16_t[] */,
    },
    tensor3_float16(%t313: Tensor[(?, ?, ?), float16]) => match? (%y3) {
      tensor3_float16(%t323: Tensor[(?, ?, ?), float16]) => %304 = (%t313, %t323);
      %305 = concatenate(%304) /* ty=Tensor[(?, ?, ?), float16] */;
      tensor3_float16(%305) /* ty=tensor_float16_t[] */,
    },
    tensor4_float16(%t413: Tensor[(?, ?, ?, ?), float16]) => match? (%y3) {
      tensor4_float16(%t423: Tensor[(?, ?, ?, ?), float16]) => %306 = (%t413, %t423);
      %307 = concatenate(%306) /* ty=Tensor[(?, ?, ?, ?), float16] */;
      tensor4_float16(%307) /* ty=tensor_float16_t[] */,
    },
  }
}

def @tensor_concatenate_int16(%x22: tensor_int16_t[], %y4: tensor_int16_t[]) -> tensor_int16_t[] {
  match? (%x22) {
    tensor1_int16(%t117: Tensor[(?), int16]) => match? (%y4) {
      tensor1_int16(%t124: Tensor[(?), int16]) => %308 = (%t117, %t124);
      %309 = concatenate(%308) /* ty=Tensor[(?), int16] */;
      tensor1_int16(%309) /* ty=tensor_int16_t[] */,
    },
    tensor2_int16(%t217: Tensor[(?, ?), int16]) => match? (%y4) {
      tensor2_int16(%t224: Tensor[(?, ?), int16]) => %310 = (%t217, %t224);
      %311 = concatenate(%310) /* ty=Tensor[(?, ?), int16] */;
      tensor2_int16(%311) /* ty=tensor_int16_t[] */,
    },
    tensor3_int16(%t314: Tensor[(?, ?, ?), int16]) => match? (%y4) {
      tensor3_int16(%t324: Tensor[(?, ?, ?), int16]) => %312 = (%t314, %t324);
      %313 = concatenate(%312) /* ty=Tensor[(?, ?, ?), int16] */;
      tensor3_int16(%313) /* ty=tensor_int16_t[] */,
    },
    tensor4_int16(%t414: Tensor[(?, ?, ?, ?), int16]) => match? (%y4) {
      tensor4_int16(%t424: Tensor[(?, ?, ?, ?), int16]) => %314 = (%t414, %t424);
      %315 = concatenate(%314) /* ty=Tensor[(?, ?, ?, ?), int16] */;
      tensor4_int16(%315) /* ty=tensor_int16_t[] */,
    },
  }
}

def @tensor_array_float32(%x23: int32) -> List[tensor_float32_t[]] {
  %316 = equal(%x23, 0 /* ty=int32 */) /* ty=bool */;
  if (%316) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %317 = tensor_nil_float32 /* ty=tensor_float32_t[] */;
    %318 = subtract(%x23, 1 /* ty=int32 */) /* ty=int32 */;
    %319 = @tensor_array_float32(%318) /* ty=List[tensor_float32_t[]] */;
    Cons(%317, %319) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_stack_float64(%tensor_array14: List[tensor_float64_t[]]) -> tensor_float64_t[] {
  %320 = @map(@tensor_expand_dims_float64, %tensor_array14) /* ty=List[tensor_float64_t[]] */;
  %321 = @hd(%320) /* ty=tensor_float64_t[] */;
  %322 = @tl(%320) /* ty=List[tensor_float64_t[]] */;
  @foldl(@tensor_concatenate_float64, %321, %322) /* ty=tensor_float64_t[] */
}

def @concat[A](%xs4: List[A], %ys: List[A]) -> List[A] {
  @foldr(Cons, %ys, %xs4) /* ty=List[A] */
}

def @tensor_array_split_float16(%tensor_array15: List[tensor_float16_t[]], %value3: tensor_float16_t[], %lengths3: Tensor[(?), int32]) -> List[tensor_float16_t[]] {
  %323 = shape_of(%lengths3, dtype="int32") /* ty=Tensor[(1), int32] */;
  %324 = take(%323, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float16(%tensor_array15, %value3, 0 /* ty=int32 */, 0 /* ty=int32 */, %324, %lengths3) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor5_float16(%tensor26: Tensor[(?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %325 = shape_of(%tensor26, dtype="int32") /* ty=Tensor[(5), int32] */;
  %326 = take(%325, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float16(0 /* ty=int32 */, %326, %tensor26) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor5_float32(%tensor27: Tensor[(?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %327 = shape_of(%tensor27, dtype="int32") /* ty=Tensor[(5), int32] */;
  %328 = take(%327, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float32(0 /* ty=int32 */, %328, %tensor27) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor6_int32(%tensor28: Tensor[(?, ?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %329 = shape_of(%tensor28, dtype="int32") /* ty=Tensor[(6), int32] */;
  %330 = take(%329, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int32(0 /* ty=int32 */, %330, %tensor28) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor4_int16(%tensor29: Tensor[(?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %331 = shape_of(%tensor29, dtype="int32") /* ty=Tensor[(4), int32] */;
  %332 = take(%331, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int16(0 /* ty=int32 */, %332, %tensor29) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_scatter_float32(%tensor_array16: List[tensor_float32_t[]], %indices1: Tensor[(?), int32], %values1: List[tensor_float32_t[]]) -> List[tensor_float32_t[]] {
  %333 = shape_of(%indices1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %334 = take(%333, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float32(%tensor_array16, 0 /* ty=int32 */, %334, %indices1, %values1) /* ty=List[tensor_float32_t[]] */
}

def @length[A](%xs5: List[A]) -> int32 {
  match (%xs5) {
    Cons(_, %rest3: List[A]) => %335 = @length(%rest3) /* ty=int32 */;
    add(1 /* ty=int32 */, %335) /* ty=int32 */,
    Nil => 0 /* ty=int32 */,
  }
}

def @tensor_array_unstack_tensor1_helper_float32(%i21: int32, %up21: int32, %t57: Tensor[(?), float32]) -> List[tensor_float32_t[]] {
  %336 = equal(%i21, %up21) /* ty=bool */;
  if (%336) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %337 = take(%t57, %i21) /* ty=float32 */;
    %338 = tensor0_float32(%337) /* ty=tensor_float32_t[] */;
    %339 = add(%i21, 1 /* ty=int32 */) /* ty=int32 */;
    %340 = @tensor_array_unstack_tensor1_helper_float32(%339, %up21, %t57) /* ty=List[tensor_float32_t[]] */;
    Cons(%338, %340) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_concat_float64(%tensor_array17: List[tensor_float64_t[]]) -> tensor_float64_t[] {
  match? (%tensor_array17) {
    Nil => tensor_nil_float64 /* ty=tensor_float64_t[] */,
    Cons(%hd2: tensor_float64_t[], %tl2: List[tensor_float64_t[]]) => match? (%tl2) {
      Nil => %hd2,
      _ => %341 = @tensor_array_concat_float64(%tl2) /* ty=tensor_float64_t[] */;
      @tensor_concatenate_float64(%hd2, %341) /* ty=tensor_float64_t[] */,
    },
  }
}

def @unfoldr[A, B](%f5: fn (A) -> Option[(A, B)], %seed: A) -> List[B] {
  %342 = %f5(%seed) /* ty=Option[(A, B)] */;
  match (%342) {
    Some(%val: (A, B)) => %343 = %val.1;
    %344 = %val.0;
    %345 = @unfoldr(%f5, %344) /* ty=List[B] */;
    Cons(%343, %345) /* ty=List[B] */,
    None => Nil /* ty=List[B] */,
  }
}

def @tensor_array_unstack_tensor6_helper_float32(%i22: int32, %up22: int32, %t58: Tensor[(?, ?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %346 = equal(%i22, %up22) /* ty=bool */;
  if (%346) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %347 = take(%t58, %i22, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    %348 = tensor5_float32(%347) /* ty=tensor_float32_t[] */;
    %349 = add(%i22, 1 /* ty=int32 */) /* ty=int32 */;
    %350 = @tensor_array_unstack_tensor6_helper_float32(%349, %up22, %t58) /* ty=List[tensor_float32_t[]] */;
    Cons(%348, %350) /* ty=List[tensor_float32_t[]] */
  }
}

def @sum(%xs6: List[int32]) -> int32 {
  let %add_f: fn (int32, int32) -> int32 = fn (%x24: int32, %y5: int32) -> int32 {
    add(%x24, %y5) /* ty=int32 */
  };
  @foldl(%add_f, 0 /* ty=int32 */, %xs6) /* ty=int32 */
}

def @tensor_array_scatter_int32(%tensor_array18: List[tensor_int32_t[]], %indices2: Tensor[(?), int32], %values2: List[tensor_int32_t[]]) -> List[tensor_int32_t[]] {
  %351 = shape_of(%indices2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %352 = take(%351, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int32(%tensor_array18, 0 /* ty=int32 */, %352, %indices2, %values2) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor6_uint16(%tensor30: Tensor[(?, ?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %353 = shape_of(%tensor30, dtype="int32") /* ty=Tensor[(6), int32] */;
  %354 = take(%353, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_uint16(0 /* ty=int32 */, %354, %tensor30) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_take_int32(%tensor31: tensor_int32_t[], %lower3: int32, %upper3: int32) -> tensor_int32_t[] {
  match? (%tensor31) {
    tensor1_int32(%t118: Tensor[(?), int32]) => %355 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][20], dtype="int32") /* ty=Tensor[(?), int32] */;
    %356 = take(%t118, %355) /* ty=Tensor[(?), int32] */;
    tensor1_int32(%356) /* ty=tensor_int32_t[] */,
    tensor2_int32(%t218: Tensor[(?, ?), int32]) => %357 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][21], dtype="int32") /* ty=Tensor[(?), int32] */;
    %358 = take(%t218, %357, axis=0) /* ty=Tensor[(?, ?), int32] */;
    tensor2_int32(%358) /* ty=tensor_int32_t[] */,
    tensor3_int32(%t315: Tensor[(?, ?, ?), int32]) => %359 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][22], dtype="int32") /* ty=Tensor[(?), int32] */;
    %360 = take(%t315, %359, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    tensor3_int32(%360) /* ty=tensor_int32_t[] */,
    tensor4_int32(%t410: Tensor[(?, ?, ?, ?), int32]) => %361 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][23], dtype="int32") /* ty=Tensor[(?), int32] */;
    %362 = take(%t410, %361, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    tensor4_int32(%362) /* ty=tensor_int32_t[] */,
    tensor5_int32(%t59: Tensor[(?, ?, ?, ?, ?), int32]) => %363 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][24], dtype="int32") /* ty=Tensor[(?), int32] */;
    %364 = take(%t59, %363, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    tensor5_int32(%364) /* ty=tensor_int32_t[] */,
    tensor6_int32(%t64: Tensor[(?, ?, ?, ?, ?, ?), int32]) => %365 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][25], dtype="int32") /* ty=Tensor[(?), int32] */;
    %366 = take(%t64, %365, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int32] */;
    tensor6_int32(%366) /* ty=tensor_int32_t[] */,
  }
}

def @tensor_take_float32(%tensor32: tensor_float32_t[], %lower4: int32, %upper4: int32) -> tensor_float32_t[] {
  match? (%tensor32) {
    tensor1_float32(%t119: Tensor[(?), float32]) => %367 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][26], dtype="int32") /* ty=Tensor[(?), int32] */;
    %368 = take(%t119, %367) /* ty=Tensor[(?), float32] */;
    tensor1_float32(%368) /* ty=tensor_float32_t[] */,
    tensor2_float32(%t219: Tensor[(?, ?), float32]) => %369 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][27], dtype="int32") /* ty=Tensor[(?), int32] */;
    %370 = take(%t219, %369, axis=0) /* ty=Tensor[(?, ?), float32] */;
    tensor2_float32(%370) /* ty=tensor_float32_t[] */,
    tensor3_float32(%t316: Tensor[(?, ?, ?), float32]) => %371 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][28], dtype="int32") /* ty=Tensor[(?), int32] */;
    %372 = take(%t316, %371, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    tensor3_float32(%372) /* ty=tensor_float32_t[] */,
    tensor4_float32(%t415: Tensor[(?, ?, ?, ?), float32]) => %373 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][29], dtype="int32") /* ty=Tensor[(?), int32] */;
    %374 = take(%t415, %373, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    tensor4_float32(%374) /* ty=tensor_float32_t[] */,
    tensor5_float32(%t510: Tensor[(?, ?, ?, ?, ?), float32]) => %375 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][30], dtype="int32") /* ty=Tensor[(?), int32] */;
    %376 = take(%t510, %375, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    tensor5_float32(%376) /* ty=tensor_float32_t[] */,
    tensor6_float32(%t65: Tensor[(?, ?, ?, ?, ?, ?), float32]) => %377 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][31], dtype="int32") /* ty=Tensor[(?), int32] */;
    %378 = take(%t65, %377, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float32] */;
    tensor6_float32(%378) /* ty=tensor_float32_t[] */,
  }
}

def @map[A, B](%f6: fn (A) -> B, %xs7: List[A]) -> List[B] {
  match (%xs7) {
    Cons(%x25: A, %rest4: List[A]) => %379 = %f6(%x25) /* ty=B */;
    %380 = @map(%f6, %rest4) /* ty=List[B] */;
    Cons(%379, %380) /* ty=List[B] */,
    Nil => Nil /* ty=List[B] */,
  }
}

def @zip[A, B](%xs8: List[A], %ys1: List[B]) -> List[(A, B)] {
  %381 = (%xs8, %ys1);
  match (%381) {
    (Cons(%x26: A, %x_rest: List[A]), Cons(%y6: B, %y_rest: List[B])) => %382 = (%x26, %y6);
    %383 = @zip(%x_rest, %y_rest) /* ty=List[(A, B)] */;
    Cons(%382, %383) /* ty=List[(A, B)] */,
    _ => Nil /* ty=List[(A, B)] */,
  }
}

def @tensor_array_scatter_helper_uint8(%ta3: List[tensor_uint8_t[]], %current4: int32, %limit4: int32, %indices_3: Tensor[(?), int32], %values_3: List[tensor_uint8_t[]]) -> List[tensor_uint8_t[]] {
  %384 = equal(%current4, %limit4) /* ty=bool */;
  if (%384) {
    %ta3
  } else {
    %385 = take(%indices_3, %current4) /* ty=int32 */;
    %386 = @tensor_array_read_uint8(%values_3, %current4) /* ty=tensor_uint8_t[] */;
    %387 = @tensor_array_write_uint8(%ta3, %385, %386) /* ty=List[tensor_uint8_t[]] */;
    %388 = add(%current4, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_uint8(%387, %388, %limit4, %indices_3, %values_3) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_scatter_float16(%tensor_array19: List[tensor_float16_t[]], %indices3: Tensor[(?), int32], %values3: List[tensor_float16_t[]]) -> List[tensor_float16_t[]] {
  %389 = shape_of(%indices3, dtype="int32") /* ty=Tensor[(1), int32] */;
  %390 = take(%389, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float16(%tensor_array19, 0 /* ty=int32 */, %390, %indices3, %values3) /* ty=List[tensor_float16_t[]] */
}

def @filter[A](%f7: fn (A) -> bool, %xs9: List[A]) -> List[A] {
  match (%xs9) {
    Cons(%x27: A, %rest5: List[A]) => %391 = %f7(%x27) /* ty=bool */;
    if (%391) {
      %392 = @filter(%f7, %rest5) /* ty=List[A] */;
      Cons(%x27, %392) /* ty=List[A] */
    } else {
      @filter(%f7, %rest5) /* ty=List[A] */
    },
    Nil => Nil /* ty=List[A] */,
  }
}

def @tensor_array_unstack_tensor1_float32(%tensor33: Tensor[(?), float32]) -> List[tensor_float32_t[]] {
  %393 = shape_of(%tensor33, dtype="int32") /* ty=Tensor[(1), int32] */;
  %394 = take(%393, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float32(0 /* ty=int32 */, %394, %tensor33) /* ty=List[tensor_float32_t[]] */
}

def @tensor_concatenate_uint8(%x28: tensor_uint8_t[], %y7: tensor_uint8_t[]) -> tensor_uint8_t[] {
  match? (%x28) {
    tensor1_uint8(%t1110: Tensor[(?), uint8]) => match? (%y7) {
      tensor1_uint8(%t125: Tensor[(?), uint8]) => %395 = (%t1110, %t125);
      %396 = concatenate(%395) /* ty=Tensor[(?), uint8] */;
      tensor1_uint8(%396) /* ty=tensor_uint8_t[] */,
    },
    tensor2_uint8(%t2110: Tensor[(?, ?), uint8]) => match? (%y7) {
      tensor2_uint8(%t225: Tensor[(?, ?), uint8]) => %397 = (%t2110, %t225);
      %398 = concatenate(%397) /* ty=Tensor[(?, ?), uint8] */;
      tensor2_uint8(%398) /* ty=tensor_uint8_t[] */,
    },
    tensor3_uint8(%t317: Tensor[(?, ?, ?), uint8]) => match? (%y7) {
      tensor3_uint8(%t325: Tensor[(?, ?, ?), uint8]) => %399 = (%t317, %t325);
      %400 = concatenate(%399) /* ty=Tensor[(?, ?, ?), uint8] */;
      tensor3_uint8(%400) /* ty=tensor_uint8_t[] */,
    },
    tensor4_uint8(%t416: Tensor[(?, ?, ?, ?), uint8]) => match? (%y7) {
      tensor4_uint8(%t425: Tensor[(?, ?, ?, ?), uint8]) => %401 = (%t416, %t425);
      %402 = concatenate(%401) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
      tensor4_uint8(%402) /* ty=tensor_uint8_t[] */,
    },
  }
}

def @hd[A](%xs10: List[A]) -> A {
  match? (%xs10) {
    Cons(%x29: A, _) => %x29,
  }
}

def @unfoldl[A, B](%f8: fn (A) -> Option[(A, B)], %seed1: A) -> List[B] {
  %403 = @unfoldr(%f8, %seed1) /* ty=List[B] */;
  @rev(%403) /* ty=List[B] */
}

def @tensor_array_unstack_tensor4_uint16(%tensor34: Tensor[(?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %404 = shape_of(%tensor34, dtype="int32") /* ty=Tensor[(4), int32] */;
  %405 = take(%404, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_uint16(0 /* ty=int32 */, %405, %tensor34) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor5_helper_float32(%i23: int32, %up23: int32, %t60: Tensor[(?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %406 = equal(%i23, %up23) /* ty=bool */;
  if (%406) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %407 = take(%t60, %i23, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    %408 = tensor4_float32(%407) /* ty=tensor_float32_t[] */;
    %409 = add(%i23, 1 /* ty=int32 */) /* ty=int32 */;
    %410 = @tensor_array_unstack_tensor5_helper_float32(%409, %up23, %t60) /* ty=List[tensor_float32_t[]] */;
    Cons(%408, %410) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_float64(%i24: int32, %up24: int32, %t66: Tensor[(?), float64]) -> List[tensor_float64_t[]] {
  %411 = equal(%i24, %up24) /* ty=bool */;
  if (%411) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %412 = take(%t66, %i24) /* ty=float64 */;
    %413 = tensor0_float64(%412) /* ty=tensor_float64_t[] */;
    %414 = add(%i24, 1 /* ty=int32 */) /* ty=int32 */;
    %415 = @tensor_array_unstack_tensor1_helper_float64(%414, %up24, %t66) /* ty=List[tensor_float64_t[]] */;
    Cons(%413, %415) /* ty=List[tensor_float64_t[]] */
  }
}

def @map_accumr[A, B, C](%f9: fn (A, B) -> (A, C), %init: A, %xs11: List[B]) -> (A, List[C]) {
  let %updater: fn (B, (A, List[C])) -> (A, List[C]) = fn (%x30: B, %acc2: (A, List[C])) -> (A, List[C]) {
    %416 = %acc2.0;
    let %f_out: (A, C) = %f9(%416, %x30) /* ty=(A, C) */;
    %417 = %f_out.0;
    %418 = %f_out.1;
    %419 = %acc2.1;
    %420 = Cons(%418, %419) /* ty=List[C] */;
    (%417, %420)
  };
  %421 = Nil /* ty=List[C] */;
  %422 = (%init, %421);
  @foldr(%updater, %422, %xs11) /* ty=(A, List[C]) */
}

def @ta_split_helper_float16(%tensor_array20: List[tensor_float16_t[]], %value11: tensor_float16_t[], %offset11: int32, %current11: int32, %limit11: int32, %lengths4: Tensor[(?), int32]) -> List[tensor_float16_t[]] {
  %423 = equal(%current11, %limit11) /* ty=bool */;
  if (%423) {
    %tensor_array20
  } else {
    %424 = take(%lengths4, %current11) /* ty=int32 */;
    %425 = add(%offset11, %424) /* ty=int32 */;
    %426 = add(%current11, 1 /* ty=int32 */) /* ty=int32 */;
    %427 = @ta_split_helper_float16(%tensor_array20, %value11, %425, %426, %limit11, %lengths4) /* ty=List[tensor_float16_t[]] */;
    %428 = take(%lengths4, %current11) /* ty=int32 */;
    %429 = add(%428, %offset11) /* ty=int32 */;
    %430 = @tensor_take_float16(%value11, %offset11, %429) /* ty=tensor_float16_t[] */;
    @tensor_array_write_float16(%427, %current11, %430) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_concat_float16(%tensor_array21: List[tensor_float16_t[]]) -> tensor_float16_t[] {
  match? (%tensor_array21) {
    Nil => tensor_nil_float16 /* ty=tensor_float16_t[] */,
    Cons(%hd3: tensor_float16_t[], %tl3: List[tensor_float16_t[]]) => match? (%tl3) {
      Nil => %hd3,
      _ => %431 = @tensor_array_concat_float16(%tl3) /* ty=tensor_float16_t[] */;
      @tensor_concatenate_float16(%hd3, %431) /* ty=tensor_float16_t[] */,
    },
  }
}

def @ta_split_helper_float64(%tensor_array22: List[tensor_float64_t[]], %value12: tensor_float64_t[], %offset12: int32, %current12: int32, %limit12: int32, %lengths5: Tensor[(?), int32]) -> List[tensor_float64_t[]] {
  %432 = equal(%current12, %limit12) /* ty=bool */;
  if (%432) {
    %tensor_array22
  } else {
    %433 = take(%lengths5, %current12) /* ty=int32 */;
    %434 = add(%offset12, %433) /* ty=int32 */;
    %435 = add(%current12, 1 /* ty=int32 */) /* ty=int32 */;
    %436 = @ta_split_helper_float64(%tensor_array22, %value12, %434, %435, %limit12, %lengths5) /* ty=List[tensor_float64_t[]] */;
    %437 = take(%lengths5, %current12) /* ty=int32 */;
    %438 = add(%437, %offset12) /* ty=int32 */;
    %439 = @tensor_take_float64(%value12, %offset12, %438) /* ty=tensor_float64_t[] */;
    @tensor_array_write_float64(%436, %current12, %439) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_int32(%i25: int32, %up25: int32, %t67: Tensor[(?, ?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %440 = equal(%i25, %up25) /* ty=bool */;
  if (%440) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %441 = take(%t67, %i25, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    %442 = tensor5_int32(%441) /* ty=tensor_int32_t[] */;
    %443 = add(%i25, 1 /* ty=int32 */) /* ty=int32 */;
    %444 = @tensor_array_unstack_tensor6_helper_int32(%443, %up25, %t67) /* ty=List[tensor_int32_t[]] */;
    Cons(%442, %444) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_float64(%i26: int32, %up26: int32, %t68: Tensor[(?, ?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %445 = equal(%i26, %up26) /* ty=bool */;
  if (%445) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %446 = take(%t68, %i26, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    %447 = tensor5_float64(%446) /* ty=tensor_float64_t[] */;
    %448 = add(%i26, 1 /* ty=int32 */) /* ty=int32 */;
    %449 = @tensor_array_unstack_tensor6_helper_float64(%448, %up26, %t68) /* ty=List[tensor_float64_t[]] */;
    Cons(%447, %449) /* ty=List[tensor_float64_t[]] */
  }
}

def @iterate[A](%f10: fn (A) -> A, %n: int32) -> fn (A) -> A {
  %450 = equal(%n, 0 /* ty=int32 */) /* ty=bool */;
  if (%450) {
    @id
  } else {
    %451 = subtract(%n, 1 /* ty=int32 */) /* ty=int32 */;
    %452 = @iterate(%f10, %451) /* ty=fn (A) -> A */;
    @compose(%f10, %452) /* ty=fn (A) -> A */
  }
}

def @tensor_array_unstack_tensor3_uint8(%tensor35: Tensor[(?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %453 = shape_of(%tensor35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = take(%453, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_uint8(0 /* ty=int32 */, %454, %tensor35) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor2_float32(%tensor36: Tensor[(?, ?), float32]) -> List[tensor_float32_t[]] {
  %455 = shape_of(%tensor36, dtype="int32") /* ty=Tensor[(2), int32] */;
  %456 = take(%455, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float32(0 /* ty=int32 */, %456, %tensor36) /* ty=List[tensor_float32_t[]] */
}

def @tensor_expand_dims_float32(%x31: tensor_float32_t[]) -> tensor_float32_t[] {
  match? (%x31) {
    tensor0_float32(%t04: float32) => %457 = expand_dims(%t04, axis=0) /* ty=Tensor[(?), float32] */;
    tensor1_float32(%457) /* ty=tensor_float32_t[] */,
    tensor1_float32(%t120: Tensor[(?), float32]) => %458 = expand_dims(%t120, axis=0) /* ty=Tensor[(?, ?), float32] */;
    tensor2_float32(%458) /* ty=tensor_float32_t[] */,
    tensor2_float32(%t220: Tensor[(?, ?), float32]) => %459 = expand_dims(%t220, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    tensor3_float32(%459) /* ty=tensor_float32_t[] */,
    tensor3_float32(%t318: Tensor[(?, ?, ?), float32]) => %460 = expand_dims(%t318, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    tensor4_float32(%460) /* ty=tensor_float32_t[] */,
    tensor4_float32(%t417: Tensor[(?, ?, ?, ?), float32]) => %461 = expand_dims(%t417, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    tensor5_float32(%461) /* ty=tensor_float32_t[] */,
    tensor5_float32(%t511: Tensor[(?, ?, ?, ?, ?), float32]) => %462 = expand_dims(%t511, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float32] */;
    tensor6_float32(%462) /* ty=tensor_float32_t[] */,
  }
}

def @tensor_concatenate_float32(%x32: tensor_float32_t[], %y8: tensor_float32_t[]) -> tensor_float32_t[] {
  match? (%x32) {
    tensor1_float32(%t1111: Tensor[(?), float32]) => match? (%y8) {
      tensor1_float32(%t126: Tensor[(?), float32]) => %463 = (%t1111, %t126);
      %464 = concatenate(%463) /* ty=Tensor[(?), float32] */;
      tensor1_float32(%464) /* ty=tensor_float32_t[] */,
    },
    tensor2_float32(%t2111: Tensor[(?, ?), float32]) => match? (%y8) {
      tensor2_float32(%t226: Tensor[(?, ?), float32]) => %465 = (%t2111, %t226);
      %466 = concatenate(%465) /* ty=Tensor[(?, ?), float32] */;
      tensor2_float32(%466) /* ty=tensor_float32_t[] */,
    },
    tensor3_float32(%t319: Tensor[(?, ?, ?), float32]) => match? (%y8) {
      tensor3_float32(%t326: Tensor[(?, ?, ?), float32]) => %467 = (%t319, %t326);
      %468 = concatenate(%467) /* ty=Tensor[(?, ?, ?), float32] */;
      tensor3_float32(%468) /* ty=tensor_float32_t[] */,
    },
    tensor4_float32(%t418: Tensor[(?, ?, ?, ?), float32]) => match? (%y8) {
      tensor4_float32(%t426: Tensor[(?, ?, ?, ?), float32]) => %469 = (%t418, %t426);
      %470 = concatenate(%469) /* ty=Tensor[(?, ?, ?, ?), float32] */;
      tensor4_float32(%470) /* ty=tensor_float32_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor2_helper_float64(%i27: int32, %up27: int32, %t69: Tensor[(?, ?), float64]) -> List[tensor_float64_t[]] {
  %471 = equal(%i27, %up27) /* ty=bool */;
  if (%471) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %472 = take(%t69, %i27, axis=0) /* ty=Tensor[(?), float64] */;
    %473 = tensor1_float64(%472) /* ty=tensor_float64_t[] */;
    %474 = add(%i27, 1 /* ty=int32 */) /* ty=int32 */;
    %475 = @tensor_array_unstack_tensor2_helper_float64(%474, %up27, %t69) /* ty=List[tensor_float64_t[]] */;
    Cons(%473, %475) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_write_int8(%tensor_array23: List[tensor_int8_t[]], %x33: int32, %v3: tensor_int8_t[]) -> List[tensor_int8_t[]] {
  @update(%tensor_array23, %x33, %v3) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor1_helper_int8(%i28: int32, %up28: int32, %t70: Tensor[(?), int8]) -> List[tensor_int8_t[]] {
  %476 = equal(%i28, %up28) /* ty=bool */;
  if (%476) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %477 = take(%t70, %i28) /* ty=int8 */;
    %478 = tensor0_int8(%477) /* ty=tensor_int8_t[] */;
    %479 = add(%i28, 1 /* ty=int32 */) /* ty=int32 */;
    %480 = @tensor_array_unstack_tensor1_helper_int8(%479, %up28, %t70) /* ty=List[tensor_int8_t[]] */;
    Cons(%478, %480) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor3_float64(%tensor37: Tensor[(?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %481 = shape_of(%tensor37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = take(%481, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float64(0 /* ty=int32 */, %482, %tensor37) /* ty=List[tensor_float64_t[]] */
}

def @nth[A](%xs12: List[A], %n1: int32) -> A {
  %483 = equal(%n1, 0 /* ty=int32 */) /* ty=bool */;
  if (%483) {
    @hd(%xs12) /* ty=A */
  } else {
    %484 = @tl(%xs12) /* ty=List[A] */;
    %485 = subtract(%n1, 1 /* ty=int32 */) /* ty=int32 */;
    @nth(%484, %485) /* ty=A */
  }
}

def @tensor_array_unstack_tensor4_float32(%tensor38: Tensor[(?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %486 = shape_of(%tensor38, dtype="int32") /* ty=Tensor[(4), int32] */;
  %487 = take(%486, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float32(0 /* ty=int32 */, %487, %tensor38) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor1_int8(%tensor39: Tensor[(?), int8]) -> List[tensor_int8_t[]] {
  %488 = shape_of(%tensor39, dtype="int32") /* ty=Tensor[(1), int32] */;
  %489 = take(%488, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int8(0 /* ty=int32 */, %489, %tensor39) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor1_float64(%tensor40: Tensor[(?), float64]) -> List[tensor_float64_t[]] {
  %490 = shape_of(%tensor40, dtype="int32") /* ty=Tensor[(1), int32] */;
  %491 = take(%490, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float64(0 /* ty=int32 */, %491, %tensor40) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor1_helper_int64(%i29: int32, %up29: int32, %t71: Tensor[(?), int64]) -> List[tensor_int64_t[]] {
  %492 = equal(%i29, %up29) /* ty=bool */;
  if (%492) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %493 = take(%t71, %i29) /* ty=int64 */;
    %494 = tensor0_int64(%493) /* ty=tensor_int64_t[] */;
    %495 = add(%i29, 1 /* ty=int32 */) /* ty=int32 */;
    %496 = @tensor_array_unstack_tensor1_helper_int64(%495, %up29, %t71) /* ty=List[tensor_int64_t[]] */;
    Cons(%494, %496) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor1_int32(%tensor41: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %497 = shape_of(%tensor41, dtype="int32") /* ty=Tensor[(1), int32] */;
  %498 = take(%497, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int32(0 /* ty=int32 */, %498, %tensor41) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor2_float16(%tensor42: Tensor[(?, ?), float16]) -> List[tensor_float16_t[]] {
  %499 = shape_of(%tensor42, dtype="int32") /* ty=Tensor[(2), int32] */;
  %500 = take(%499, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float16(0 /* ty=int32 */, %500, %tensor42) /* ty=List[tensor_float16_t[]] */
}

def @update[A](%xs13: List[A], %n2: int32, %v4: A) -> List[A] {
  %501 = equal(%n2, 0 /* ty=int32 */) /* ty=bool */;
  if (%501) {
    %502 = @tl(%xs13) /* ty=List[A] */;
    Cons(%v4, %502) /* ty=List[A] */
  } else {
    %503 = @hd(%xs13) /* ty=A */;
    %504 = @tl(%xs13) /* ty=List[A] */;
    %505 = subtract(%n2, 1 /* ty=int32 */) /* ty=int32 */;
    %506 = @update(%504, %505, %v4) /* ty=List[A] */;
    Cons(%503, %506) /* ty=List[A] */
  }
}

def @tensor_array_unstack_tensor6_float32(%tensor43: Tensor[(?, ?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %507 = shape_of(%tensor43, dtype="int32") /* ty=Tensor[(6), int32] */;
  %508 = take(%507, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float32(0 /* ty=int32 */, %508, %tensor43) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor4_helper_uint8(%i30: int32, %up30: int32, %t72: Tensor[(?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %509 = equal(%i30, %up30) /* ty=bool */;
  if (%509) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %510 = take(%t72, %i30, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    %511 = tensor3_uint8(%510) /* ty=tensor_uint8_t[] */;
    %512 = add(%i30, 1 /* ty=int32 */) /* ty=int32 */;
    %513 = @tensor_array_unstack_tensor4_helper_uint8(%512, %up30, %t72) /* ty=List[tensor_uint8_t[]] */;
    Cons(%511, %513) /* ty=List[tensor_uint8_t[]] */
  }
}

def @map_accuml[A, B, C](%f11: fn (A, B) -> (A, C), %init1: A, %xs14: List[B]) -> (A, List[C]) {
  let %updater1: fn ((A, List[C]), B) -> (A, List[C]) = fn (%acc3: (A, List[C]), %x34: B) -> (A, List[C]) {
    %514 = %acc3.0;
    let %f_out1: (A, C) = %f11(%514, %x34) /* ty=(A, C) */;
    %515 = %f_out1.0;
    %516 = %f_out1.1;
    %517 = %acc3.1;
    %518 = Cons(%516, %517) /* ty=List[C] */;
    (%515, %518)
  };
  %519 = Nil /* ty=List[C] */;
  %520 = (%init1, %519);
  @foldl(%updater1, %520, %xs14) /* ty=(A, List[C]) */
}

def @tensor_array_unstack_tensor4_int8(%tensor44: Tensor[(?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %521 = shape_of(%tensor44, dtype="int32") /* ty=Tensor[(4), int32] */;
  %522 = take(%521, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int8(0 /* ty=int32 */, %522, %tensor44) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_stack_float32(%tensor_array24: List[tensor_float32_t[]]) -> tensor_float32_t[] {
  %523 = @map(@tensor_expand_dims_float32, %tensor_array24) /* ty=List[tensor_float32_t[]] */;
  %524 = @hd(%523) /* ty=tensor_float32_t[] */;
  %525 = @tl(%523) /* ty=List[tensor_float32_t[]] */;
  @foldl(@tensor_concatenate_float32, %524, %525) /* ty=tensor_float32_t[] */
}

def @tensor_array_unstack_tensor2_helper_float32(%i31: int32, %up31: int32, %t73: Tensor[(?, ?), float32]) -> List[tensor_float32_t[]] {
  %526 = equal(%i31, %up31) /* ty=bool */;
  if (%526) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %527 = take(%t73, %i31, axis=0) /* ty=Tensor[(?), float32] */;
    %528 = tensor1_float32(%527) /* ty=tensor_float32_t[] */;
    %529 = add(%i31, 1 /* ty=int32 */) /* ty=int32 */;
    %530 = @tensor_array_unstack_tensor2_helper_float32(%529, %up31, %t73) /* ty=List[tensor_float32_t[]] */;
    Cons(%528, %530) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_read_int64(%tensor_array25: List[tensor_int64_t[]], %x35: int32) -> tensor_int64_t[] {
  @nth(%tensor_array25, %x35) /* ty=tensor_int64_t[] */
}

def @tensor_array_stack_int8(%tensor_array26: List[tensor_int8_t[]]) -> tensor_int8_t[] {
  %531 = @map(@tensor_expand_dims_int8, %tensor_array26) /* ty=List[tensor_int8_t[]] */;
  %532 = @hd(%531) /* ty=tensor_int8_t[] */;
  %533 = @tl(%531) /* ty=List[tensor_int8_t[]] */;
  @foldl(@tensor_concatenate_int8, %532, %533) /* ty=tensor_int8_t[] */
}

def @tensor_array_unstack_tensor4_helper_float32(%i32: int32, %up32: int32, %t74: Tensor[(?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %534 = equal(%i32, %up32) /* ty=bool */;
  if (%534) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %535 = take(%t74, %i32, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    %536 = tensor3_float32(%535) /* ty=tensor_float32_t[] */;
    %537 = add(%i32, 1 /* ty=int32 */) /* ty=int32 */;
    %538 = @tensor_array_unstack_tensor4_helper_float32(%537, %up32, %t74) /* ty=List[tensor_float32_t[]] */;
    Cons(%536, %538) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_float16(%i33: int32, %up33: int32, %t75: Tensor[(?), float16]) -> List[tensor_float16_t[]] {
  %539 = equal(%i33, %up33) /* ty=bool */;
  if (%539) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %540 = take(%t75, %i33) /* ty=float16 */;
    %541 = tensor0_float16(%540) /* ty=tensor_float16_t[] */;
    %542 = add(%i33, 1 /* ty=int32 */) /* ty=int32 */;
    %543 = @tensor_array_unstack_tensor1_helper_float16(%542, %up33, %t75) /* ty=List[tensor_float16_t[]] */;
    Cons(%541, %543) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_scatter_helper_float16(%ta4: List[tensor_float16_t[]], %current5: int32, %limit5: int32, %indices_4: Tensor[(?), int32], %values_4: List[tensor_float16_t[]]) -> List[tensor_float16_t[]] {
  %544 = equal(%current5, %limit5) /* ty=bool */;
  if (%544) {
    %ta4
  } else {
    %545 = take(%indices_4, %current5) /* ty=int32 */;
    %546 = @tensor_array_read_float16(%values_4, %current5) /* ty=tensor_float16_t[] */;
    %547 = @tensor_array_write_float16(%ta4, %545, %546) /* ty=List[tensor_float16_t[]] */;
    %548 = add(%current5, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float16(%547, %548, %limit5, %indices_4, %values_4) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor4_int32(%tensor45: Tensor[(?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %549 = shape_of(%tensor45, dtype="int32") /* ty=Tensor[(4), int32] */;
  %550 = take(%549, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int32(0 /* ty=int32 */, %550, %tensor45) /* ty=List[tensor_int32_t[]] */
}

def @flip[A, B, C](%f12: fn (A, B) -> C) -> fn (B, A) -> C {
  fn (%b: B, %a: A) -> C {
    %f12(%a, %b) /* ty=C */
  }
}

def @tensor_array_write_float32(%tensor_array27: List[tensor_float32_t[]], %x36: int32, %v5: tensor_float32_t[]) -> List[tensor_float32_t[]] {
  @update(%tensor_array27, %x36, %v5) /* ty=List[tensor_float32_t[]] */
}

def @tl[A](%xs15: List[A]) -> List[A] {
  match? (%xs15) {
    Cons(_, %rest6: List[A]) => %rest6,
  }
}

def @tensor_array_concat_float32(%tensor_array28: List[tensor_float32_t[]]) -> tensor_float32_t[] {
  match? (%tensor_array28) {
    Nil => tensor_nil_float32 /* ty=tensor_float32_t[] */,
    Cons(%hd4: tensor_float32_t[], %tl4: List[tensor_float32_t[]]) => match? (%tl4) {
      Nil => %hd4,
      _ => %551 = @tensor_array_concat_float32(%tl4) /* ty=tensor_float32_t[] */;
      @tensor_concatenate_float32(%hd4, %551) /* ty=tensor_float32_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor5_helper_int8(%i34: int32, %up34: int32, %t76: Tensor[(?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %552 = equal(%i34, %up34) /* ty=bool */;
  if (%552) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %553 = take(%t76, %i34, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    %554 = tensor4_int8(%553) /* ty=tensor_int8_t[] */;
    %555 = add(%i34, 1 /* ty=int32 */) /* ty=int32 */;
    %556 = @tensor_array_unstack_tensor5_helper_int8(%555, %up34, %t76) /* ty=List[tensor_int8_t[]] */;
    Cons(%554, %556) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_split_uint16(%tensor_array29: List[tensor_uint16_t[]], %value4: tensor_uint16_t[], %lengths6: Tensor[(?), int32]) -> List[tensor_uint16_t[]] {
  %557 = shape_of(%lengths6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %558 = take(%557, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_uint16(%tensor_array29, %value4, 0 /* ty=int32 */, 0 /* ty=int32 */, %558, %lengths6) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_read_float32(%tensor_array30: List[tensor_float32_t[]], %x37: int32) -> tensor_float32_t[] {
  @nth(%tensor_array30, %x37) /* ty=tensor_float32_t[] */
}

def @tensor_array_scatter_uint16(%tensor_array31: List[tensor_uint16_t[]], %indices4: Tensor[(?), int32], %values4: List[tensor_uint16_t[]]) -> List[tensor_uint16_t[]] {
  %559 = shape_of(%indices4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %560 = take(%559, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_uint16(%tensor_array31, 0 /* ty=int32 */, %560, %indices4, %values4) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor5_int16(%tensor46: Tensor[(?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %561 = shape_of(%tensor46, dtype="int32") /* ty=Tensor[(5), int32] */;
  %562 = take(%561, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int16(0 /* ty=int32 */, %562, %tensor46) /* ty=List[tensor_int16_t[]] */
}

def @tensor_expand_dims_int32(%x38: tensor_int32_t[]) -> tensor_int32_t[] {
  match? (%x38) {
    tensor0_int32(%t05: int32) => %563 = expand_dims(%t05, axis=0) /* ty=Tensor[(?), int32] */;
    tensor1_int32(%563) /* ty=tensor_int32_t[] */,
    tensor1_int32(%t127: Tensor[(?), int32]) => %564 = expand_dims(%t127, axis=0) /* ty=Tensor[(?, ?), int32] */;
    tensor2_int32(%564) /* ty=tensor_int32_t[] */,
    tensor2_int32(%t227: Tensor[(?, ?), int32]) => %565 = expand_dims(%t227, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    tensor3_int32(%565) /* ty=tensor_int32_t[] */,
    tensor3_int32(%t320: Tensor[(?, ?, ?), int32]) => %566 = expand_dims(%t320, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    tensor4_int32(%566) /* ty=tensor_int32_t[] */,
    tensor4_int32(%t419: Tensor[(?, ?, ?, ?), int32]) => %567 = expand_dims(%t419, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    tensor5_int32(%567) /* ty=tensor_int32_t[] */,
    tensor5_int32(%t512: Tensor[(?, ?, ?, ?, ?), int32]) => %568 = expand_dims(%t512, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int32] */;
    tensor6_int32(%568) /* ty=tensor_int32_t[] */,
  }
}

def @tensor_concatenate_int32(%x39: tensor_int32_t[], %y9: tensor_int32_t[]) -> tensor_int32_t[] {
  match? (%x39) {
    tensor1_int32(%t1112: Tensor[(?), int32]) => match? (%y9) {
      tensor1_int32(%t128: Tensor[(?), int32]) => %569 = (%t1112, %t128);
      %570 = concatenate(%569) /* ty=Tensor[(?), int32] */;
      tensor1_int32(%570) /* ty=tensor_int32_t[] */,
    },
    tensor2_int32(%t2112: Tensor[(?, ?), int32]) => match? (%y9) {
      tensor2_int32(%t228: Tensor[(?, ?), int32]) => %571 = (%t2112, %t228);
      %572 = concatenate(%571) /* ty=Tensor[(?, ?), int32] */;
      tensor2_int32(%572) /* ty=tensor_int32_t[] */,
    },
    tensor3_int32(%t3110: Tensor[(?, ?, ?), int32]) => match? (%y9) {
      tensor3_int32(%t327: Tensor[(?, ?, ?), int32]) => %573 = (%t3110, %t327);
      %574 = concatenate(%573) /* ty=Tensor[(?, ?, ?), int32] */;
      tensor3_int32(%574) /* ty=tensor_int32_t[] */,
    },
    tensor4_int32(%t4110: Tensor[(?, ?, ?, ?), int32]) => match? (%y9) {
      tensor4_int32(%t427: Tensor[(?, ?, ?, ?), int32]) => %575 = (%t4110, %t427);
      %576 = concatenate(%575) /* ty=Tensor[(?, ?, ?, ?), int32] */;
      tensor4_int32(%576) /* ty=tensor_int32_t[] */,
    },
  }
}

def @tensor_array_int32(%x40: int32) -> List[tensor_int32_t[]] {
  %577 = equal(%x40, 0 /* ty=int32 */) /* ty=bool */;
  if (%577) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %578 = tensor_nil_int32 /* ty=tensor_int32_t[] */;
    %579 = subtract(%x40, 1 /* ty=int32 */) /* ty=int32 */;
    %580 = @tensor_array_int32(%579) /* ty=List[tensor_int32_t[]] */;
    Cons(%578, %580) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_write_int32(%tensor_array32: List[tensor_int32_t[]], %x41: int32, %v6: tensor_int32_t[]) -> List[tensor_int32_t[]] {
  @update(%tensor_array32, %x41, %v6) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor5_helper_int32(%i35: int32, %up35: int32, %t77: Tensor[(?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %581 = equal(%i35, %up35) /* ty=bool */;
  if (%581) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %582 = take(%t77, %i35, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    %583 = tensor4_int32(%582) /* ty=tensor_int32_t[] */;
    %584 = add(%i35, 1 /* ty=int32 */) /* ty=int32 */;
    %585 = @tensor_array_unstack_tensor5_helper_int32(%584, %up35, %t77) /* ty=List[tensor_int32_t[]] */;
    Cons(%583, %585) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_int32(%i36: int32, %up36: int32, %t78: Tensor[(?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %586 = equal(%i36, %up36) /* ty=bool */;
  if (%586) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %587 = take(%t78, %i36, axis=0) /* ty=Tensor[(?, ?), int32] */;
    %588 = tensor2_int32(%587) /* ty=tensor_int32_t[] */;
    %589 = add(%i36, 1 /* ty=int32 */) /* ty=int32 */;
    %590 = @tensor_array_unstack_tensor3_helper_int32(%589, %up36, %t78) /* ty=List[tensor_int32_t[]] */;
    Cons(%588, %590) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int32(%tensor47: Tensor[(?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %591 = shape_of(%tensor47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = take(%591, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int32(0 /* ty=int32 */, %592, %tensor47) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int32(%i37: int32, %up37: int32, %t79: Tensor[(?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %593 = equal(%i37, %up37) /* ty=bool */;
  if (%593) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %594 = take(%t79, %i37, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    %595 = tensor3_int32(%594) /* ty=tensor_int32_t[] */;
    %596 = add(%i37, 1 /* ty=int32 */) /* ty=int32 */;
    %597 = @tensor_array_unstack_tensor4_helper_int32(%596, %up37, %t79) /* ty=List[tensor_int32_t[]] */;
    Cons(%595, %597) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_scatter_helper_int32(%ta5: List[tensor_int32_t[]], %current6: int32, %limit6: int32, %indices_5: Tensor[(?), int32], %values_5: List[tensor_int32_t[]]) -> List[tensor_int32_t[]] {
  %598 = equal(%current6, %limit6) /* ty=bool */;
  if (%598) {
    %ta5
  } else {
    %599 = take(%indices_5, %current6) /* ty=int32 */;
    %600 = @tensor_array_read_int32(%values_5, %current6) /* ty=tensor_int32_t[] */;
    %601 = @tensor_array_write_int32(%ta5, %599, %600) /* ty=List[tensor_int32_t[]] */;
    %602 = add(%current6, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int32(%601, %602, %limit6, %indices_5, %values_5) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_stack_float16(%tensor_array33: List[tensor_float16_t[]]) -> tensor_float16_t[] {
  %603 = @map(@tensor_expand_dims_float16, %tensor_array33) /* ty=List[tensor_float16_t[]] */;
  %604 = @hd(%603) /* ty=tensor_float16_t[] */;
  %605 = @tl(%603) /* ty=List[tensor_float16_t[]] */;
  @foldl(@tensor_concatenate_float16, %604, %605) /* ty=tensor_float16_t[] */
}

def @ta_split_helper_int32(%tensor_array34: List[tensor_int32_t[]], %value13: tensor_int32_t[], %offset13: int32, %current13: int32, %limit13: int32, %lengths7: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %606 = equal(%current13, %limit13) /* ty=bool */;
  if (%606) {
    %tensor_array34
  } else {
    %607 = take(%lengths7, %current13) /* ty=int32 */;
    %608 = add(%offset13, %607) /* ty=int32 */;
    %609 = add(%current13, 1 /* ty=int32 */) /* ty=int32 */;
    %610 = @ta_split_helper_int32(%tensor_array34, %value13, %608, %609, %limit13, %lengths7) /* ty=List[tensor_int32_t[]] */;
    %611 = take(%lengths7, %current13) /* ty=int32 */;
    %612 = add(%611, %offset13) /* ty=int32 */;
    %613 = @tensor_take_int32(%value13, %offset13, %612) /* ty=tensor_int32_t[] */;
    @tensor_array_write_int32(%610, %current13, %613) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_split_int32(%tensor_array35: List[tensor_int32_t[]], %value5: tensor_int32_t[], %lengths8: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %614 = shape_of(%lengths8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %615 = take(%614, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int32(%tensor_array35, %value5, 0 /* ty=int32 */, 0 /* ty=int32 */, %615, %lengths8) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_split_uint8(%tensor_array36: List[tensor_uint8_t[]], %value6: tensor_uint8_t[], %lengths9: Tensor[(?), int32]) -> List[tensor_uint8_t[]] {
  %616 = shape_of(%lengths9, dtype="int32") /* ty=Tensor[(1), int32] */;
  %617 = take(%616, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_uint8(%tensor_array36, %value6, 0 /* ty=int32 */, 0 /* ty=int32 */, %617, %lengths9) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_stack_int32(%tensor_array37: List[tensor_int32_t[]]) -> tensor_int32_t[] {
  %618 = @map(@tensor_expand_dims_int32, %tensor_array37) /* ty=List[tensor_int32_t[]] */;
  %619 = @hd(%618) /* ty=tensor_int32_t[] */;
  %620 = @tl(%618) /* ty=List[tensor_int32_t[]] */;
  @foldl(@tensor_concatenate_int32, %619, %620) /* ty=tensor_int32_t[] */
}

def @tensor_take_uint8(%tensor48: tensor_uint8_t[], %lower5: int32, %upper5: int32) -> tensor_uint8_t[] {
  match? (%tensor48) {
    tensor1_uint8(%t129: Tensor[(?), uint8]) => %621 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][32], dtype="int32") /* ty=Tensor[(?), int32] */;
    %622 = take(%t129, %621) /* ty=Tensor[(?), uint8] */;
    tensor1_uint8(%622) /* ty=tensor_uint8_t[] */,
    tensor2_uint8(%t229: Tensor[(?, ?), uint8]) => %623 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][33], dtype="int32") /* ty=Tensor[(?), int32] */;
    %624 = take(%t229, %623, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    tensor2_uint8(%624) /* ty=tensor_uint8_t[] */,
    tensor3_uint8(%t328: Tensor[(?, ?, ?), uint8]) => %625 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][34], dtype="int32") /* ty=Tensor[(?), int32] */;
    %626 = take(%t328, %625, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    tensor3_uint8(%626) /* ty=tensor_uint8_t[] */,
    tensor4_uint8(%t420: Tensor[(?, ?, ?, ?), uint8]) => %627 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][35], dtype="int32") /* ty=Tensor[(?), int32] */;
    %628 = take(%t420, %627, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    tensor4_uint8(%628) /* ty=tensor_uint8_t[] */,
    tensor5_uint8(%t513: Tensor[(?, ?, ?, ?, ?), uint8]) => %629 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][36], dtype="int32") /* ty=Tensor[(?), int32] */;
    %630 = take(%t513, %629, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    tensor5_uint8(%630) /* ty=tensor_uint8_t[] */,
    tensor6_uint8(%t610: Tensor[(?, ?, ?, ?, ?, ?), uint8]) => %631 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][37], dtype="int32") /* ty=Tensor[(?), int32] */;
    %632 = take(%t610, %631, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint8] */;
    tensor6_uint8(%632) /* ty=tensor_uint8_t[] */,
  }
}

def @tensor_array_unstack_tensor5_uint8(%tensor49: Tensor[(?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %633 = shape_of(%tensor49, dtype="int32") /* ty=Tensor[(5), int32] */;
  %634 = take(%633, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_uint8(0 /* ty=int32 */, %634, %tensor49) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_read_uint8(%tensor_array38: List[tensor_uint8_t[]], %x42: int32) -> tensor_uint8_t[] {
  @nth(%tensor_array38, %x42) /* ty=tensor_uint8_t[] */
}

def @tensor_array_uint16(%x43: int32) -> List[tensor_uint16_t[]] {
  %635 = equal(%x43, 0 /* ty=int32 */) /* ty=bool */;
  if (%635) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %636 = tensor_nil_uint16 /* ty=tensor_uint16_t[] */;
    %637 = subtract(%x43, 1 /* ty=int32 */) /* ty=int32 */;
    %638 = @tensor_array_uint16(%637) /* ty=List[tensor_uint16_t[]] */;
    Cons(%636, %638) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_write_float16(%tensor_array39: List[tensor_float16_t[]], %x44: int32, %v7: tensor_float16_t[]) -> List[tensor_float16_t[]] {
  @update(%tensor_array39, %x44, %v7) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_write_uint8(%tensor_array40: List[tensor_uint8_t[]], %x45: int32, %v8: tensor_uint8_t[]) -> List[tensor_uint8_t[]] {
  @update(%tensor_array40, %x45, %v8) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor1_helper_uint8(%i38: int32, %up38: int32, %t80: Tensor[(?), uint8]) -> List[tensor_uint8_t[]] {
  %639 = equal(%i38, %up38) /* ty=bool */;
  if (%639) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %640 = take(%t80, %i38) /* ty=uint8 */;
    %641 = tensor0_uint8(%640) /* ty=tensor_uint8_t[] */;
    %642 = add(%i38, 1 /* ty=int32 */) /* ty=int32 */;
    %643 = @tensor_array_unstack_tensor1_helper_uint8(%642, %up38, %t80) /* ty=List[tensor_uint8_t[]] */;
    Cons(%641, %643) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor1_uint8(%tensor50: Tensor[(?), uint8]) -> List[tensor_uint8_t[]] {
  %644 = shape_of(%tensor50, dtype="int32") /* ty=Tensor[(1), int32] */;
  %645 = take(%644, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_uint8(0 /* ty=int32 */, %645, %tensor50) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_expand_dims_int8(%x46: tensor_int8_t[]) -> tensor_int8_t[] {
  match? (%x46) {
    tensor0_int8(%t06: int8) => %646 = expand_dims(%t06, axis=0) /* ty=Tensor[(?), int8] */;
    tensor1_int8(%646) /* ty=tensor_int8_t[] */,
    tensor1_int8(%t130: Tensor[(?), int8]) => %647 = expand_dims(%t130, axis=0) /* ty=Tensor[(?, ?), int8] */;
    tensor2_int8(%647) /* ty=tensor_int8_t[] */,
    tensor2_int8(%t230: Tensor[(?, ?), int8]) => %648 = expand_dims(%t230, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    tensor3_int8(%648) /* ty=tensor_int8_t[] */,
    tensor3_int8(%t329: Tensor[(?, ?, ?), int8]) => %649 = expand_dims(%t329, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    tensor4_int8(%649) /* ty=tensor_int8_t[] */,
    tensor4_int8(%t428: Tensor[(?, ?, ?, ?), int8]) => %650 = expand_dims(%t428, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    tensor5_int8(%650) /* ty=tensor_int8_t[] */,
    tensor5_int8(%t514: Tensor[(?, ?, ?, ?, ?), int8]) => %651 = expand_dims(%t514, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int8] */;
    tensor6_int8(%651) /* ty=tensor_int8_t[] */,
  }
}

def @tensor_array_unstack_tensor2_helper_uint8(%i39: int32, %up39: int32, %t81: Tensor[(?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %652 = equal(%i39, %up39) /* ty=bool */;
  if (%652) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %653 = take(%t81, %i39, axis=0) /* ty=Tensor[(?), uint8] */;
    %654 = tensor1_uint8(%653) /* ty=tensor_uint8_t[] */;
    %655 = add(%i39, 1 /* ty=int32 */) /* ty=int32 */;
    %656 = @tensor_array_unstack_tensor2_helper_uint8(%655, %up39, %t81) /* ty=List[tensor_uint8_t[]] */;
    Cons(%654, %656) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_uint16(%i40: int32, %up40: int32, %t82: Tensor[(?), uint16]) -> List[tensor_uint16_t[]] {
  %657 = equal(%i40, %up40) /* ty=bool */;
  if (%657) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %658 = take(%t82, %i40) /* ty=uint16 */;
    %659 = tensor0_uint16(%658) /* ty=tensor_uint16_t[] */;
    %660 = add(%i40, 1 /* ty=int32 */) /* ty=int32 */;
    %661 = @tensor_array_unstack_tensor1_helper_uint16(%660, %up40, %t82) /* ty=List[tensor_uint16_t[]] */;
    Cons(%659, %661) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_uint8(%tensor51: Tensor[(?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %662 = shape_of(%tensor51, dtype="int32") /* ty=Tensor[(2), int32] */;
  %663 = take(%662, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_uint8(0 /* ty=int32 */, %663, %tensor51) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor3_helper_uint8(%i41: int32, %up41: int32, %t83: Tensor[(?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %664 = equal(%i41, %up41) /* ty=bool */;
  if (%664) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %665 = take(%t83, %i41, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    %666 = tensor2_uint8(%665) /* ty=tensor_uint8_t[] */;
    %667 = add(%i41, 1 /* ty=int32 */) /* ty=int32 */;
    %668 = @tensor_array_unstack_tensor3_helper_uint8(%667, %up41, %t83) /* ty=List[tensor_uint8_t[]] */;
    Cons(%666, %668) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor4_uint8(%tensor52: Tensor[(?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %669 = shape_of(%tensor52, dtype="int32") /* ty=Tensor[(4), int32] */;
  %670 = take(%669, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_uint8(0 /* ty=int32 */, %670, %tensor52) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_split_int64(%tensor_array41: List[tensor_int64_t[]], %value7: tensor_int64_t[], %lengths10: Tensor[(?), int32]) -> List[tensor_int64_t[]] {
  %671 = shape_of(%lengths10, dtype="int32") /* ty=Tensor[(1), int32] */;
  %672 = take(%671, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int64(%tensor_array41, %value7, 0 /* ty=int32 */, 0 /* ty=int32 */, %672, %lengths10) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_concat_uint8(%tensor_array42: List[tensor_uint8_t[]]) -> tensor_uint8_t[] {
  match? (%tensor_array42) {
    Nil => tensor_nil_uint8 /* ty=tensor_uint8_t[] */,
    Cons(%hd5: tensor_uint8_t[], %tl5: List[tensor_uint8_t[]]) => match? (%tl5) {
      Nil => %hd5,
      _ => %673 = @tensor_array_concat_uint8(%tl5) /* ty=tensor_uint8_t[] */;
      @tensor_concatenate_uint8(%hd5, %673) /* ty=tensor_uint8_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor3_helper_int64(%i42: int32, %up42: int32, %t84: Tensor[(?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %674 = equal(%i42, %up42) /* ty=bool */;
  if (%674) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %675 = take(%t84, %i42, axis=0) /* ty=Tensor[(?, ?), int64] */;
    %676 = tensor2_int64(%675) /* ty=tensor_int64_t[] */;
    %677 = add(%i42, 1 /* ty=int32 */) /* ty=int32 */;
    %678 = @tensor_array_unstack_tensor3_helper_int64(%677, %up42, %t84) /* ty=List[tensor_int64_t[]] */;
    Cons(%676, %678) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_concat_int8(%tensor_array43: List[tensor_int8_t[]]) -> tensor_int8_t[] {
  match? (%tensor_array43) {
    Nil => tensor_nil_int8 /* ty=tensor_int8_t[] */,
    Cons(%hd6: tensor_int8_t[], %tl6: List[tensor_int8_t[]]) => match? (%tl6) {
      Nil => %hd6,
      _ => %679 = @tensor_array_concat_int8(%tl6) /* ty=tensor_int8_t[] */;
      @tensor_concatenate_int8(%hd6, %679) /* ty=tensor_int8_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor5_helper_uint8(%i43: int32, %up43: int32, %t85: Tensor[(?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %680 = equal(%i43, %up43) /* ty=bool */;
  if (%680) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %681 = take(%t85, %i43, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    %682 = tensor4_uint8(%681) /* ty=tensor_uint8_t[] */;
    %683 = add(%i43, 1 /* ty=int32 */) /* ty=int32 */;
    %684 = @tensor_array_unstack_tensor5_helper_uint8(%683, %up43, %t85) /* ty=List[tensor_uint8_t[]] */;
    Cons(%682, %684) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_concat_int32(%tensor_array44: List[tensor_int32_t[]]) -> tensor_int32_t[] {
  match? (%tensor_array44) {
    Nil => tensor_nil_int32 /* ty=tensor_int32_t[] */,
    Cons(%hd7: tensor_int32_t[], %tl7: List[tensor_int32_t[]]) => match? (%tl7) {
      Nil => %hd7,
      _ => %685 = @tensor_array_concat_int32(%tl7) /* ty=tensor_int32_t[] */;
      @tensor_concatenate_int32(%hd7, %685) /* ty=tensor_int32_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor6_helper_uint8(%i44: int32, %up44: int32, %t86: Tensor[(?, ?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %686 = equal(%i44, %up44) /* ty=bool */;
  if (%686) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %687 = take(%t86, %i44, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    %688 = tensor5_uint8(%687) /* ty=tensor_uint8_t[] */;
    %689 = add(%i44, 1 /* ty=int32 */) /* ty=int32 */;
    %690 = @tensor_array_unstack_tensor6_helper_uint8(%689, %up44, %t86) /* ty=List[tensor_uint8_t[]] */;
    Cons(%688, %690) /* ty=List[tensor_uint8_t[]] */
  }
}

def @ta_split_helper_float32(%tensor_array45: List[tensor_float32_t[]], %value14: tensor_float32_t[], %offset14: int32, %current14: int32, %limit14: int32, %lengths11: Tensor[(?), int32]) -> List[tensor_float32_t[]] {
  %691 = equal(%current14, %limit14) /* ty=bool */;
  if (%691) {
    %tensor_array45
  } else {
    %692 = take(%lengths11, %current14) /* ty=int32 */;
    %693 = add(%offset14, %692) /* ty=int32 */;
    %694 = add(%current14, 1 /* ty=int32 */) /* ty=int32 */;
    %695 = @ta_split_helper_float32(%tensor_array45, %value14, %693, %694, %limit14, %lengths11) /* ty=List[tensor_float32_t[]] */;
    %696 = take(%lengths11, %current14) /* ty=int32 */;
    %697 = add(%696, %offset14) /* ty=int32 */;
    %698 = @tensor_take_float32(%value14, %offset14, %697) /* ty=tensor_float32_t[] */;
    @tensor_array_write_float32(%695, %current14, %698) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_int16(%i45: int32, %up45: int32, %t87: Tensor[(?, ?), int16]) -> List[tensor_int16_t[]] {
  %699 = equal(%i45, %up45) /* ty=bool */;
  if (%699) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %700 = take(%t87, %i45, axis=0) /* ty=Tensor[(?), int16] */;
    %701 = tensor1_int16(%700) /* ty=tensor_int16_t[] */;
    %702 = add(%i45, 1 /* ty=int32 */) /* ty=int32 */;
    %703 = @tensor_array_unstack_tensor2_helper_int16(%702, %up45, %t87) /* ty=List[tensor_int16_t[]] */;
    Cons(%701, %703) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_uint8(%tensor53: Tensor[(?, ?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %704 = shape_of(%tensor53, dtype="int32") /* ty=Tensor[(6), int32] */;
  %705 = take(%704, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_uint8(0 /* ty=int32 */, %705, %tensor53) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_scatter_helper_int8(%ta6: List[tensor_int8_t[]], %current7: int32, %limit7: int32, %indices_6: Tensor[(?), int32], %values_6: List[tensor_int8_t[]]) -> List[tensor_int8_t[]] {
  %706 = equal(%current7, %limit7) /* ty=bool */;
  if (%706) {
    %ta6
  } else {
    %707 = take(%indices_6, %current7) /* ty=int32 */;
    %708 = @tensor_array_read_int8(%values_6, %current7) /* ty=tensor_int8_t[] */;
    %709 = @tensor_array_write_int8(%ta6, %707, %708) /* ty=List[tensor_int8_t[]] */;
    %710 = add(%current7, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int8(%709, %710, %limit7, %indices_6, %values_6) /* ty=List[tensor_int8_t[]] */
  }
}

def @ta_split_helper_int64(%tensor_array46: List[tensor_int64_t[]], %value15: tensor_int64_t[], %offset15: int32, %current15: int32, %limit15: int32, %lengths12: Tensor[(?), int32]) -> List[tensor_int64_t[]] {
  %711 = equal(%current15, %limit15) /* ty=bool */;
  if (%711) {
    %tensor_array46
  } else {
    %712 = take(%lengths12, %current15) /* ty=int32 */;
    %713 = add(%offset15, %712) /* ty=int32 */;
    %714 = add(%current15, 1 /* ty=int32 */) /* ty=int32 */;
    %715 = @ta_split_helper_int64(%tensor_array46, %value15, %713, %714, %limit15, %lengths12) /* ty=List[tensor_int64_t[]] */;
    %716 = take(%lengths12, %current15) /* ty=int32 */;
    %717 = add(%716, %offset15) /* ty=int32 */;
    %718 = @tensor_take_int64(%value15, %offset15, %717) /* ty=tensor_int64_t[] */;
    @tensor_array_write_int64(%715, %current15, %718) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_scatter_int16(%tensor_array47: List[tensor_int16_t[]], %indices5: Tensor[(?), int32], %values5: List[tensor_int16_t[]]) -> List[tensor_int16_t[]] {
  %719 = shape_of(%indices5, dtype="int32") /* ty=Tensor[(1), int32] */;
  %720 = take(%719, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int16(%tensor_array47, 0 /* ty=int32 */, %720, %indices5, %values5) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_scatter_uint8(%tensor_array48: List[tensor_uint8_t[]], %indices6: Tensor[(?), int32], %values6: List[tensor_uint8_t[]]) -> List[tensor_uint8_t[]] {
  %721 = shape_of(%indices6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = take(%721, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_uint8(%tensor_array48, 0 /* ty=int32 */, %722, %indices6, %values6) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_write_int16(%tensor_array49: List[tensor_int16_t[]], %x47: int32, %v9: tensor_int16_t[]) -> List[tensor_int16_t[]] {
  @update(%tensor_array49, %x47, %v9) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_read_uint16(%tensor_array50: List[tensor_uint16_t[]], %x48: int32) -> tensor_uint16_t[] {
  @nth(%tensor_array50, %x48) /* ty=tensor_uint16_t[] */
}

def @tensor_array_read_int16(%tensor_array51: List[tensor_int16_t[]], %x49: int32) -> tensor_int16_t[] {
  @nth(%tensor_array51, %x49) /* ty=tensor_int16_t[] */
}

def @ta_split_helper_uint8(%tensor_array52: List[tensor_uint8_t[]], %value16: tensor_uint8_t[], %offset16: int32, %current16: int32, %limit16: int32, %lengths13: Tensor[(?), int32]) -> List[tensor_uint8_t[]] {
  %723 = equal(%current16, %limit16) /* ty=bool */;
  if (%723) {
    %tensor_array52
  } else {
    %724 = take(%lengths13, %current16) /* ty=int32 */;
    %725 = add(%offset16, %724) /* ty=int32 */;
    %726 = add(%current16, 1 /* ty=int32 */) /* ty=int32 */;
    %727 = @ta_split_helper_uint8(%tensor_array52, %value16, %725, %726, %limit16, %lengths13) /* ty=List[tensor_uint8_t[]] */;
    %728 = take(%lengths13, %current16) /* ty=int32 */;
    %729 = add(%728, %offset16) /* ty=int32 */;
    %730 = @tensor_take_uint8(%value16, %offset16, %729) /* ty=tensor_uint8_t[] */;
    @tensor_array_write_uint8(%727, %current16, %730) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_int16(%x50: int32) -> List[tensor_int16_t[]] {
  %731 = equal(%x50, 0 /* ty=int32 */) /* ty=bool */;
  if (%731) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %732 = tensor_nil_int16 /* ty=tensor_int16_t[] */;
    %733 = subtract(%x50, 1 /* ty=int32 */) /* ty=int32 */;
    %734 = @tensor_array_int16(%733) /* ty=List[tensor_int16_t[]] */;
    Cons(%732, %734) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_take_int8(%tensor54: tensor_int8_t[], %lower6: int32, %upper6: int32) -> tensor_int8_t[] {
  match? (%tensor54) {
    tensor1_int8(%t131: Tensor[(?), int8]) => %735 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][38], dtype="int32") /* ty=Tensor[(?), int32] */;
    %736 = take(%t131, %735) /* ty=Tensor[(?), int8] */;
    tensor1_int8(%736) /* ty=tensor_int8_t[] */,
    tensor2_int8(%t231: Tensor[(?, ?), int8]) => %737 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][39], dtype="int32") /* ty=Tensor[(?), int32] */;
    %738 = take(%t231, %737, axis=0) /* ty=Tensor[(?, ?), int8] */;
    tensor2_int8(%738) /* ty=tensor_int8_t[] */,
    tensor3_int8(%t330: Tensor[(?, ?, ?), int8]) => %739 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][40], dtype="int32") /* ty=Tensor[(?), int32] */;
    %740 = take(%t330, %739, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    tensor3_int8(%740) /* ty=tensor_int8_t[] */,
    tensor4_int8(%t429: Tensor[(?, ?, ?, ?), int8]) => %741 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][41], dtype="int32") /* ty=Tensor[(?), int32] */;
    %742 = take(%t429, %741, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    tensor4_int8(%742) /* ty=tensor_int8_t[] */,
    tensor5_int8(%t515: Tensor[(?, ?, ?, ?, ?), int8]) => %743 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][42], dtype="int32") /* ty=Tensor[(?), int32] */;
    %744 = take(%t515, %743, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    tensor5_int8(%744) /* ty=tensor_int8_t[] */,
    tensor6_int8(%t611: Tensor[(?, ?, ?, ?, ?, ?), int8]) => %745 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][43], dtype="int32") /* ty=Tensor[(?), int32] */;
    %746 = take(%t611, %745, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int8] */;
    tensor6_int8(%746) /* ty=tensor_int8_t[] */,
  }
}

def @tensor_array_read_int8(%tensor_array53: List[tensor_int8_t[]], %x51: int32) -> tensor_int8_t[] {
  @nth(%tensor_array53, %x51) /* ty=tensor_int8_t[] */
}

def @tensor_array_unstack_tensor3_helper_int8(%i46: int32, %up46: int32, %t88: Tensor[(?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %747 = equal(%i46, %up46) /* ty=bool */;
  if (%747) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %748 = take(%t88, %i46, axis=0) /* ty=Tensor[(?, ?), int8] */;
    %749 = tensor2_int8(%748) /* ty=tensor_int8_t[] */;
    %750 = add(%i46, 1 /* ty=int32 */) /* ty=int32 */;
    %751 = @tensor_array_unstack_tensor3_helper_int8(%750, %up46, %t88) /* ty=List[tensor_int8_t[]] */;
    Cons(%749, %751) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_int8(%i47: int32, %up47: int32, %t89: Tensor[(?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %752 = equal(%i47, %up47) /* ty=bool */;
  if (%752) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %753 = take(%t89, %i47, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    %754 = tensor3_int8(%753) /* ty=tensor_int8_t[] */;
    %755 = add(%i47, 1 /* ty=int32 */) /* ty=int32 */;
    %756 = @tensor_array_unstack_tensor4_helper_int8(%755, %up47, %t89) /* ty=List[tensor_int8_t[]] */;
    Cons(%754, %756) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int8(%tensor55: Tensor[(?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %757 = shape_of(%tensor55, dtype="int32") /* ty=Tensor[(5), int32] */;
  %758 = take(%757, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int8(0 /* ty=int32 */, %758, %tensor55) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor6_helper_int8(%i48: int32, %up48: int32, %t90: Tensor[(?, ?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %759 = equal(%i48, %up48) /* ty=bool */;
  if (%759) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %760 = take(%t90, %i48, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    %761 = tensor5_int8(%760) /* ty=tensor_int8_t[] */;
    %762 = add(%i48, 1 /* ty=int32 */) /* ty=int32 */;
    %763 = @tensor_array_unstack_tensor6_helper_int8(%762, %up48, %t90) /* ty=List[tensor_int8_t[]] */;
    Cons(%761, %763) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor2_int32(%tensor56: Tensor[(?, ?), int32]) -> List[tensor_int32_t[]] {
  %764 = shape_of(%tensor56, dtype="int32") /* ty=Tensor[(2), int32] */;
  %765 = take(%764, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int32(0 /* ty=int32 */, %765, %tensor56) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_scatter_int8(%tensor_array54: List[tensor_int8_t[]], %indices7: Tensor[(?), int32], %values7: List[tensor_int8_t[]]) -> List[tensor_int8_t[]] {
  %766 = shape_of(%indices7, dtype="int32") /* ty=Tensor[(1), int32] */;
  %767 = take(%766, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int8(%tensor_array54, 0 /* ty=int32 */, %767, %indices7, %values7) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_scatter_float64(%tensor_array55: List[tensor_float64_t[]], %indices8: Tensor[(?), int32], %values8: List[tensor_float64_t[]]) -> List[tensor_float64_t[]] {
  %768 = shape_of(%indices8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %769 = take(%768, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float64(%tensor_array55, 0 /* ty=int32 */, %769, %indices8, %values8) /* ty=List[tensor_float64_t[]] */
}

def @ta_split_helper_int8(%tensor_array56: List[tensor_int8_t[]], %value17: tensor_int8_t[], %offset17: int32, %current17: int32, %limit17: int32, %lengths14: Tensor[(?), int32]) -> List[tensor_int8_t[]] {
  %770 = equal(%current17, %limit17) /* ty=bool */;
  if (%770) {
    %tensor_array56
  } else {
    %771 = take(%lengths14, %current17) /* ty=int32 */;
    %772 = add(%offset17, %771) /* ty=int32 */;
    %773 = add(%current17, 1 /* ty=int32 */) /* ty=int32 */;
    %774 = @ta_split_helper_int8(%tensor_array56, %value17, %772, %773, %limit17, %lengths14) /* ty=List[tensor_int8_t[]] */;
    %775 = take(%lengths14, %current17) /* ty=int32 */;
    %776 = add(%775, %offset17) /* ty=int32 */;
    %777 = @tensor_take_int8(%value17, %offset17, %776) /* ty=tensor_int8_t[] */;
    @tensor_array_write_int8(%774, %current17, %777) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_take_int64(%tensor57: tensor_int64_t[], %lower7: int32, %upper7: int32) -> tensor_int64_t[] {
  match? (%tensor57) {
    tensor1_int64(%t132: Tensor[(?), int64]) => %778 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][44], dtype="int32") /* ty=Tensor[(?), int32] */;
    %779 = take(%t132, %778) /* ty=Tensor[(?), int64] */;
    tensor1_int64(%779) /* ty=tensor_int64_t[] */,
    tensor2_int64(%t232: Tensor[(?, ?), int64]) => %780 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][45], dtype="int32") /* ty=Tensor[(?), int32] */;
    %781 = take(%t232, %780, axis=0) /* ty=Tensor[(?, ?), int64] */;
    tensor2_int64(%781) /* ty=tensor_int64_t[] */,
    tensor3_int64(%t331: Tensor[(?, ?, ?), int64]) => %782 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][46], dtype="int32") /* ty=Tensor[(?), int32] */;
    %783 = take(%t331, %782, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    tensor3_int64(%783) /* ty=tensor_int64_t[] */,
    tensor4_int64(%t430: Tensor[(?, ?, ?, ?), int64]) => %784 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][47], dtype="int32") /* ty=Tensor[(?), int32] */;
    %785 = take(%t430, %784, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    tensor4_int64(%785) /* ty=tensor_int64_t[] */,
    tensor5_int64(%t516: Tensor[(?, ?, ?, ?, ?), int64]) => %786 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][48], dtype="int32") /* ty=Tensor[(?), int32] */;
    %787 = take(%t516, %786, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    tensor5_int64(%787) /* ty=tensor_int64_t[] */,
    tensor6_int64(%t612: Tensor[(?, ?, ?, ?, ?, ?), int64]) => %788 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][49], dtype="int32") /* ty=Tensor[(?), int32] */;
    %789 = take(%t612, %788, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int64] */;
    tensor6_int64(%789) /* ty=tensor_int64_t[] */,
  }
}

def @tensor_array_unstack_tensor3_helper_float32(%i49: int32, %up49: int32, %t91: Tensor[(?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %790 = equal(%i49, %up49) /* ty=bool */;
  if (%790) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %791 = take(%t91, %i49, axis=0) /* ty=Tensor[(?, ?), float32] */;
    %792 = tensor2_float32(%791) /* ty=tensor_float32_t[] */;
    %793 = add(%i49, 1 /* ty=int32 */) /* ty=int32 */;
    %794 = @tensor_array_unstack_tensor3_helper_float32(%793, %up49, %t91) /* ty=List[tensor_float32_t[]] */;
    Cons(%792, %794) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_split_int8(%tensor_array57: List[tensor_int8_t[]], %value8: tensor_int8_t[], %lengths15: Tensor[(?), int32]) -> List[tensor_int8_t[]] {
  %795 = shape_of(%lengths15, dtype="int32") /* ty=Tensor[(1), int32] */;
  %796 = take(%795, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int8(%tensor_array57, %value8, 0 /* ty=int32 */, 0 /* ty=int32 */, %796, %lengths15) /* ty=List[tensor_int8_t[]] */
}

def @tensor_expand_dims_int16(%x52: tensor_int16_t[]) -> tensor_int16_t[] {
  match? (%x52) {
    tensor0_int16(%t07: int16) => %797 = expand_dims(%t07, axis=0) /* ty=Tensor[(?), int16] */;
    tensor1_int16(%797) /* ty=tensor_int16_t[] */,
    tensor1_int16(%t133: Tensor[(?), int16]) => %798 = expand_dims(%t133, axis=0) /* ty=Tensor[(?, ?), int16] */;
    tensor2_int16(%798) /* ty=tensor_int16_t[] */,
    tensor2_int16(%t233: Tensor[(?, ?), int16]) => %799 = expand_dims(%t233, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    tensor3_int16(%799) /* ty=tensor_int16_t[] */,
    tensor3_int16(%t332: Tensor[(?, ?, ?), int16]) => %800 = expand_dims(%t332, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    tensor4_int16(%800) /* ty=tensor_int16_t[] */,
    tensor4_int16(%t431: Tensor[(?, ?, ?, ?), int16]) => %801 = expand_dims(%t431, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    tensor5_int16(%801) /* ty=tensor_int16_t[] */,
    tensor5_int16(%t517: Tensor[(?, ?, ?, ?, ?), int16]) => %802 = expand_dims(%t517, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int16] */;
    tensor6_int16(%802) /* ty=tensor_int16_t[] */,
  }
}

def @tensor_array_scatter_helper_int64(%ta7: List[tensor_int64_t[]], %current8: int32, %limit8: int32, %indices_7: Tensor[(?), int32], %values_7: List[tensor_int64_t[]]) -> List[tensor_int64_t[]] {
  %803 = equal(%current8, %limit8) /* ty=bool */;
  if (%803) {
    %ta7
  } else {
    %804 = take(%indices_7, %current8) /* ty=int32 */;
    %805 = @tensor_array_read_int64(%values_7, %current8) /* ty=tensor_int64_t[] */;
    %806 = @tensor_array_write_int64(%ta7, %804, %805) /* ty=List[tensor_int64_t[]] */;
    %807 = add(%current8, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int64(%806, %807, %limit8, %indices_7, %values_7) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_int16(%i50: int32, %up50: int32, %t92: Tensor[(?), int16]) -> List[tensor_int16_t[]] {
  %808 = equal(%i50, %up50) /* ty=bool */;
  if (%808) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %809 = take(%t92, %i50) /* ty=int16 */;
    %810 = tensor0_int16(%809) /* ty=tensor_int16_t[] */;
    %811 = add(%i50, 1 /* ty=int32 */) /* ty=int32 */;
    %812 = @tensor_array_unstack_tensor1_helper_int16(%811, %up50, %t92) /* ty=List[tensor_int16_t[]] */;
    Cons(%810, %812) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_int16(%tensor58: Tensor[(?), int16]) -> List[tensor_int16_t[]] {
  %813 = shape_of(%tensor58, dtype="int32") /* ty=Tensor[(1), int32] */;
  %814 = take(%813, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int16(0 /* ty=int32 */, %814, %tensor58) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_float16(%x53: int32) -> List[tensor_float16_t[]] {
  %815 = equal(%x53, 0 /* ty=int32 */) /* ty=bool */;
  if (%815) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %816 = tensor_nil_float16 /* ty=tensor_float16_t[] */;
    %817 = subtract(%x53, 1 /* ty=int32 */) /* ty=int32 */;
    %818 = @tensor_array_float16(%817) /* ty=List[tensor_float16_t[]] */;
    Cons(%816, %818) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_uint8(%x54: int32) -> List[tensor_uint8_t[]] {
  %819 = equal(%x54, 0 /* ty=int32 */) /* ty=bool */;
  if (%819) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %820 = tensor_nil_uint8 /* ty=tensor_uint8_t[] */;
    %821 = subtract(%x54, 1 /* ty=int32 */) /* ty=int32 */;
    %822 = @tensor_array_uint8(%821) /* ty=List[tensor_uint8_t[]] */;
    Cons(%820, %822) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_int16(%i51: int32, %up51: int32, %t93: Tensor[(?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %823 = equal(%i51, %up51) /* ty=bool */;
  if (%823) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %824 = take(%t93, %i51, axis=0) /* ty=Tensor[(?, ?), int16] */;
    %825 = tensor2_int16(%824) /* ty=tensor_int16_t[] */;
    %826 = add(%i51, 1 /* ty=int32 */) /* ty=int32 */;
    %827 = @tensor_array_unstack_tensor3_helper_int16(%826, %up51, %t93) /* ty=List[tensor_int16_t[]] */;
    Cons(%825, %827) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int16(%tensor59: Tensor[(?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %828 = shape_of(%tensor59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = take(%828, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int16(0 /* ty=int32 */, %829, %tensor59) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor6_int16(%tensor60: Tensor[(?, ?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %830 = shape_of(%tensor60, dtype="int32") /* ty=Tensor[(6), int32] */;
  %831 = take(%830, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int16(0 /* ty=int32 */, %831, %tensor60) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_scatter_helper_int16(%ta8: List[tensor_int16_t[]], %current9: int32, %limit9: int32, %indices_8: Tensor[(?), int32], %values_8: List[tensor_int16_t[]]) -> List[tensor_int16_t[]] {
  %832 = equal(%current9, %limit9) /* ty=bool */;
  if (%832) {
    %ta8
  } else {
    %833 = take(%indices_8, %current9) /* ty=int32 */;
    %834 = @tensor_array_read_int16(%values_8, %current9) /* ty=tensor_int16_t[] */;
    %835 = @tensor_array_write_int16(%ta8, %833, %834) /* ty=List[tensor_int16_t[]] */;
    %836 = add(%current9, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int16(%835, %836, %limit9, %indices_8, %values_8) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_uint16(%tensor61: Tensor[(?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %837 = shape_of(%tensor61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = take(%837, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_uint16(0 /* ty=int32 */, %838, %tensor61) /* ty=List[tensor_uint16_t[]] */
}

def @ta_split_helper_int16(%tensor_array58: List[tensor_int16_t[]], %value18: tensor_int16_t[], %offset18: int32, %current18: int32, %limit18: int32, %lengths16: Tensor[(?), int32]) -> List[tensor_int16_t[]] {
  %839 = equal(%current18, %limit18) /* ty=bool */;
  if (%839) {
    %tensor_array58
  } else {
    %840 = take(%lengths16, %current18) /* ty=int32 */;
    %841 = add(%offset18, %840) /* ty=int32 */;
    %842 = add(%current18, 1 /* ty=int32 */) /* ty=int32 */;
    %843 = @ta_split_helper_int16(%tensor_array58, %value18, %841, %842, %limit18, %lengths16) /* ty=List[tensor_int16_t[]] */;
    %844 = take(%lengths16, %current18) /* ty=int32 */;
    %845 = add(%844, %offset18) /* ty=int32 */;
    %846 = @tensor_take_int16(%value18, %offset18, %845) /* ty=tensor_int16_t[] */;
    @tensor_array_write_int16(%843, %current18, %846) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_split_int16(%tensor_array59: List[tensor_int16_t[]], %value9: tensor_int16_t[], %lengths17: Tensor[(?), int32]) -> List[tensor_int16_t[]] {
  %847 = shape_of(%lengths17, dtype="int32") /* ty=Tensor[(1), int32] */;
  %848 = take(%847, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int16(%tensor_array59, %value9, 0 /* ty=int32 */, 0 /* ty=int32 */, %848, %lengths17) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_concat_int16(%tensor_array60: List[tensor_int16_t[]]) -> tensor_int16_t[] {
  match? (%tensor_array60) {
    Nil => tensor_nil_int16 /* ty=tensor_int16_t[] */,
    Cons(%hd8: tensor_int16_t[], %tl8: List[tensor_int16_t[]]) => match? (%tl8) {
      Nil => %hd8,
      _ => %849 = @tensor_array_concat_int16(%tl8) /* ty=tensor_int16_t[] */;
      @tensor_concatenate_int16(%hd8, %849) /* ty=tensor_int16_t[] */,
    },
  }
}

def @tensor_array_stack_int16(%tensor_array61: List[tensor_int16_t[]]) -> tensor_int16_t[] {
  %850 = @map(@tensor_expand_dims_int16, %tensor_array61) /* ty=List[tensor_int16_t[]] */;
  %851 = @hd(%850) /* ty=tensor_int16_t[] */;
  %852 = @tl(%850) /* ty=List[tensor_int16_t[]] */;
  @foldl(@tensor_concatenate_int16, %851, %852) /* ty=tensor_int16_t[] */
}

def @tensor_array_unstack_tensor4_helper_float64(%i52: int32, %up52: int32, %t94: Tensor[(?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %853 = equal(%i52, %up52) /* ty=bool */;
  if (%853) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %854 = take(%t94, %i52, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    %855 = tensor3_float64(%854) /* ty=tensor_float64_t[] */;
    %856 = add(%i52, 1 /* ty=int32 */) /* ty=int32 */;
    %857 = @tensor_array_unstack_tensor4_helper_float64(%856, %up52, %t94) /* ty=List[tensor_float64_t[]] */;
    Cons(%855, %857) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_take_uint16(%tensor62: tensor_uint16_t[], %lower8: int32, %upper8: int32) -> tensor_uint16_t[] {
  match? (%tensor62) {
    tensor1_uint16(%t134: Tensor[(?), uint16]) => %858 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][50], dtype="int32") /* ty=Tensor[(?), int32] */;
    %859 = take(%t134, %858) /* ty=Tensor[(?), uint16] */;
    tensor1_uint16(%859) /* ty=tensor_uint16_t[] */,
    tensor2_uint16(%t234: Tensor[(?, ?), uint16]) => %860 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][51], dtype="int32") /* ty=Tensor[(?), int32] */;
    %861 = take(%t234, %860, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    tensor2_uint16(%861) /* ty=tensor_uint16_t[] */,
    tensor3_uint16(%t333: Tensor[(?, ?, ?), uint16]) => %862 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][52], dtype="int32") /* ty=Tensor[(?), int32] */;
    %863 = take(%t333, %862, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    tensor3_uint16(%863) /* ty=tensor_uint16_t[] */,
    tensor4_uint16(%t432: Tensor[(?, ?, ?, ?), uint16]) => %864 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][53], dtype="int32") /* ty=Tensor[(?), int32] */;
    %865 = take(%t432, %864, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    tensor4_uint16(%865) /* ty=tensor_uint16_t[] */,
    tensor5_uint16(%t518: Tensor[(?, ?, ?, ?, ?), uint16]) => %866 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][54], dtype="int32") /* ty=Tensor[(?), int32] */;
    %867 = take(%t518, %866, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    tensor5_uint16(%867) /* ty=tensor_uint16_t[] */,
    tensor6_uint16(%t613: Tensor[(?, ?, ?, ?, ?, ?), uint16]) => %868 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][55], dtype="int32") /* ty=Tensor[(?), int32] */;
    %869 = take(%t613, %868, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint16] */;
    tensor6_uint16(%869) /* ty=tensor_uint16_t[] */,
  }
}

def @tensor_expand_dims_uint16(%x55: tensor_uint16_t[]) -> tensor_uint16_t[] {
  match? (%x55) {
    tensor0_uint16(%t08: uint16) => %870 = expand_dims(%t08, axis=0) /* ty=Tensor[(?), uint16] */;
    tensor1_uint16(%870) /* ty=tensor_uint16_t[] */,
    tensor1_uint16(%t135: Tensor[(?), uint16]) => %871 = expand_dims(%t135, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    tensor2_uint16(%871) /* ty=tensor_uint16_t[] */,
    tensor2_uint16(%t235: Tensor[(?, ?), uint16]) => %872 = expand_dims(%t235, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    tensor3_uint16(%872) /* ty=tensor_uint16_t[] */,
    tensor3_uint16(%t334: Tensor[(?, ?, ?), uint16]) => %873 = expand_dims(%t334, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    tensor4_uint16(%873) /* ty=tensor_uint16_t[] */,
    tensor4_uint16(%t433: Tensor[(?, ?, ?, ?), uint16]) => %874 = expand_dims(%t433, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    tensor5_uint16(%874) /* ty=tensor_uint16_t[] */,
    tensor5_uint16(%t519: Tensor[(?, ?, ?, ?, ?), uint16]) => %875 = expand_dims(%t519, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint16] */;
    tensor6_uint16(%875) /* ty=tensor_uint16_t[] */,
  }
}

def @tensor_array_unstack_tensor3_helper_float64(%i53: int32, %up53: int32, %t95: Tensor[(?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %876 = equal(%i53, %up53) /* ty=bool */;
  if (%876) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %877 = take(%t95, %i53, axis=0) /* ty=Tensor[(?, ?), float64] */;
    %878 = tensor2_float64(%877) /* ty=tensor_float64_t[] */;
    %879 = add(%i53, 1 /* ty=int32 */) /* ty=int32 */;
    %880 = @tensor_array_unstack_tensor3_helper_float64(%879, %up53, %t95) /* ty=List[tensor_float64_t[]] */;
    Cons(%878, %880) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_concatenate_uint16(%x56: tensor_uint16_t[], %y10: tensor_uint16_t[]) -> tensor_uint16_t[] {
  match? (%x56) {
    tensor1_uint16(%t1113: Tensor[(?), uint16]) => match? (%y10) {
      tensor1_uint16(%t1210: Tensor[(?), uint16]) => %881 = (%t1113, %t1210);
      %882 = concatenate(%881) /* ty=Tensor[(?), uint16] */;
      tensor1_uint16(%882) /* ty=tensor_uint16_t[] */,
    },
    tensor2_uint16(%t2113: Tensor[(?, ?), uint16]) => match? (%y10) {
      tensor2_uint16(%t2210: Tensor[(?, ?), uint16]) => %883 = (%t2113, %t2210);
      %884 = concatenate(%883) /* ty=Tensor[(?, ?), uint16] */;
      tensor2_uint16(%884) /* ty=tensor_uint16_t[] */,
    },
    tensor3_uint16(%t3111: Tensor[(?, ?, ?), uint16]) => match? (%y10) {
      tensor3_uint16(%t3210: Tensor[(?, ?, ?), uint16]) => %885 = (%t3111, %t3210);
      %886 = concatenate(%885) /* ty=Tensor[(?, ?, ?), uint16] */;
      tensor3_uint16(%886) /* ty=tensor_uint16_t[] */,
    },
    tensor4_uint16(%t4111: Tensor[(?, ?, ?, ?), uint16]) => match? (%y10) {
      tensor4_uint16(%t4210: Tensor[(?, ?, ?, ?), uint16]) => %887 = (%t4111, %t4210);
      %888 = concatenate(%887) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
      tensor4_uint16(%888) /* ty=tensor_uint16_t[] */,
    },
  }
}

def @tensor_array_write_uint16(%tensor_array62: List[tensor_uint16_t[]], %x57: int32, %v10: tensor_uint16_t[]) -> List[tensor_uint16_t[]] {
  @update(%tensor_array62, %x57, %v10) /* ty=List[tensor_uint16_t[]] */
}

// meta data omitted. you can use show_meta_data=True to include meta data
