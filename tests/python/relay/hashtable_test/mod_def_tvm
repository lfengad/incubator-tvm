v0.0.4
type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type Option[A] {
  Some(A),
  None,
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

def @main(%input-0: Tensor[(128), int32], %keys: Tensor[(6), int32], %values: Tensor[(6), int32]) -> (Tensor[(128), int32], Tensor[(1), int32]) {
  %0 = contrib.hash_table(key_dtype="int32", value_dtype="int32", dtype="custom[hashtable]64") /* ty=Tensor[(1), custom[hashtable]64] */;
  %1 = contrib.lookup_table_find(%0, %input-0, meta[relay.Constant][0] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, key_dtype="int32", value_dtype="int32", dtype="int32") /* ty=Tensor[(128), int32] */;
  %2 = contrib.lookup_table_find(%0, %input-0, meta[relay.Constant][0] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, key_dtype="int32", value_dtype="int32", dtype="int32") /* ty=Tensor[(128), int32] */;
  %3 = add(%1, %2) /* ty=Tensor[(128), int32] */;
  %4 = contrib.lookup_table_find(%0, %input-0, meta[relay.Constant][0] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, key_dtype="int32", value_dtype="int32", dtype="int32") /* ty=Tensor[(128), int32] */;
  %5 = add(%3, %4) /* ty=Tensor[(128), int32] */;
  %6 = contrib.lookup_table_import(%0, %keys, %values, key_dtype="int32", value_dtype="int32") /* ty=Tensor[(1), int32] */;
  (%5, %6)
}

def @tensor_array_stack_int64(%tensor_array: List[tensor_int64_t[]]) -> tensor_int64_t[] {
  %7 = @map(@tensor_expand_dims_int64, %tensor_array) /* ty=List[tensor_int64_t[]] */;
  %8 = @hd(%7) /* ty=tensor_int64_t[] */;
  %9 = @tl(%7) /* ty=List[tensor_int64_t[]] */;
  @foldl(@tensor_concatenate_int64, %8, %9) /* ty=tensor_int64_t[] */
}

def @tensor_array_concat_int64(%tensor_array1: List[tensor_int64_t[]]) -> tensor_int64_t[] {
  match? (%tensor_array1) {
    Nil => tensor_nil_int64 /* ty=tensor_int64_t[] */,
    Cons(%hd: tensor_int64_t[], %tl: List[tensor_int64_t[]]) => match? (%tl) {
      Nil => %hd,
      _ => %10 = @tensor_array_concat_int64(%tl) /* ty=tensor_int64_t[] */;
      @tensor_concatenate_int64(%hd, %10) /* ty=tensor_int64_t[] */,
    },
  }
}

def @tensor_array_split_int64(%tensor_array2: List[tensor_int64_t[]], %value: tensor_int64_t[], %lengths: Tensor[(?), int32]) -> List[tensor_int64_t[]] {
  %11 = shape_of(%lengths, dtype="int32") /* ty=Tensor[(1), int32] */;
  %12 = take(%11, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int64(%tensor_array2, %value, 0 /* ty=int32 */, 0 /* ty=int32 */, %12, %lengths) /* ty=List[tensor_int64_t[]] */
}

def @ta_split_helper_int64(%tensor_array3: List[tensor_int64_t[]], %value1: tensor_int64_t[], %offset1: int32, %current1: int32, %limit1: int32, %lengths1: Tensor[(?), int32]) -> List[tensor_int64_t[]] {
  %13 = equal(%current1, %limit1) /* ty=bool */;
  if (%13) {
    %tensor_array3
  } else {
    %14 = take(%lengths1, %current1) /* ty=int32 */;
    %15 = add(%offset1, %14) /* ty=int32 */;
    %16 = add(%current1, 1 /* ty=int32 */) /* ty=int32 */;
    %17 = @ta_split_helper_int64(%tensor_array3, %value1, %15, %16, %limit1, %lengths1) /* ty=List[tensor_int64_t[]] */;
    %18 = take(%lengths1, %current1) /* ty=int32 */;
    %19 = add(%18, %offset1) /* ty=int32 */;
    %20 = @tensor_take_int64(%value1, %offset1, %19) /* ty=tensor_int64_t[] */;
    @tensor_array_write_int64(%17, %current1, %20) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor6_int64(%tensor: Tensor[(?, ?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %21 = shape_of(%tensor, dtype="int32") /* ty=Tensor[(6), int32] */;
  %22 = take(%21, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int64(0 /* ty=int32 */, %22, %tensor) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor5_int64(%tensor1: Tensor[(?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %23 = shape_of(%tensor1, dtype="int32") /* ty=Tensor[(5), int32] */;
  %24 = take(%23, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int64(0 /* ty=int32 */, %24, %tensor1) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int64(%i: int32, %up: int32, %t: Tensor[(?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %25 = equal(%i, %up) /* ty=bool */;
  if (%25) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %26 = take(%t, %i, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    %27 = tensor3_int64(%26) /* ty=tensor_int64_t[] */;
    %28 = add(%i, 1 /* ty=int32 */) /* ty=int32 */;
    %29 = @tensor_array_unstack_tensor4_helper_int64(%28, %up, %t) /* ty=List[tensor_int64_t[]] */;
    Cons(%27, %29) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int64(%tensor2: Tensor[(?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %30 = shape_of(%tensor2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = take(%30, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int64(0 /* ty=int32 */, %31, %tensor2) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor2_int64(%tensor3: Tensor[(?, ?), int64]) -> List[tensor_int64_t[]] {
  %32 = shape_of(%tensor3, dtype="int32") /* ty=Tensor[(2), int32] */;
  %33 = take(%32, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int64(0 /* ty=int32 */, %33, %tensor3) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor1_helper_int64(%i1: int32, %up1: int32, %t1: Tensor[(?), int64]) -> List[tensor_int64_t[]] {
  %34 = equal(%i1, %up1) /* ty=bool */;
  if (%34) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %35 = take(%t1, %i1) /* ty=int64 */;
    %36 = tensor0_int64(%35) /* ty=tensor_int64_t[] */;
    %37 = add(%i1, 1 /* ty=int32 */) /* ty=int32 */;
    %38 = @tensor_array_unstack_tensor1_helper_int64(%37, %up1, %t1) /* ty=List[tensor_int64_t[]] */;
    Cons(%36, %38) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_int64(%x: int32) -> List[tensor_int64_t[]] {
  %39 = equal(%x, 0 /* ty=int32 */) /* ty=bool */;
  if (%39) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %40 = tensor_nil_int64 /* ty=tensor_int64_t[] */;
    %41 = subtract(%x, 1 /* ty=int32 */) /* ty=int32 */;
    %42 = @tensor_array_int64(%41) /* ty=List[tensor_int64_t[]] */;
    Cons(%40, %42) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_concatenate_int64(%x1: tensor_int64_t[], %y: tensor_int64_t[]) -> tensor_int64_t[] {
  match? (%x1) {
    tensor1_int64(%t11: Tensor[(?), int64]) => match? (%y) {
      tensor1_int64(%t12: Tensor[(?), int64]) => %43 = (%t11, %t12);
      %44 = concatenate(%43) /* ty=Tensor[(?), int64] */;
      tensor1_int64(%44) /* ty=tensor_int64_t[] */,
    },
    tensor2_int64(%t21: Tensor[(?, ?), int64]) => match? (%y) {
      tensor2_int64(%t22: Tensor[(?, ?), int64]) => %45 = (%t21, %t22);
      %46 = concatenate(%45) /* ty=Tensor[(?, ?), int64] */;
      tensor2_int64(%46) /* ty=tensor_int64_t[] */,
    },
    tensor3_int64(%t31: Tensor[(?, ?, ?), int64]) => match? (%y) {
      tensor3_int64(%t32: Tensor[(?, ?, ?), int64]) => %47 = (%t31, %t32);
      %48 = concatenate(%47) /* ty=Tensor[(?, ?, ?), int64] */;
      tensor3_int64(%48) /* ty=tensor_int64_t[] */,
    },
    tensor4_int64(%t41: Tensor[(?, ?, ?, ?), int64]) => match? (%y) {
      tensor4_int64(%t42: Tensor[(?, ?, ?, ?), int64]) => %49 = (%t41, %t42);
      %50 = concatenate(%49) /* ty=Tensor[(?, ?, ?, ?), int64] */;
      tensor4_int64(%50) /* ty=tensor_int64_t[] */,
    },
  }
}

def @tensor_take_int64(%tensor4: tensor_int64_t[], %lower: int32, %upper: int32) -> tensor_int64_t[] {
  match? (%tensor4) {
    tensor1_int64(%t13: Tensor[(?), int64]) => %51 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][1], dtype="int32") /* ty=Tensor[(?), int32] */;
    %52 = take(%t13, %51) /* ty=Tensor[(?), int64] */;
    tensor1_int64(%52) /* ty=tensor_int64_t[] */,
    tensor2_int64(%t2: Tensor[(?, ?), int64]) => %53 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][2], dtype="int32") /* ty=Tensor[(?), int32] */;
    %54 = take(%t2, %53, axis=0) /* ty=Tensor[(?, ?), int64] */;
    tensor2_int64(%54) /* ty=tensor_int64_t[] */,
    tensor3_int64(%t3: Tensor[(?, ?, ?), int64]) => %55 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][3], dtype="int32") /* ty=Tensor[(?), int32] */;
    %56 = take(%t3, %55, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    tensor3_int64(%56) /* ty=tensor_int64_t[] */,
    tensor4_int64(%t4: Tensor[(?, ?, ?, ?), int64]) => %57 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][4], dtype="int32") /* ty=Tensor[(?), int32] */;
    %58 = take(%t4, %57, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    tensor4_int64(%58) /* ty=tensor_int64_t[] */,
    tensor5_int64(%t5: Tensor[(?, ?, ?, ?, ?), int64]) => %59 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][5], dtype="int32") /* ty=Tensor[(?), int32] */;
    %60 = take(%t5, %59, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    tensor5_int64(%60) /* ty=tensor_int64_t[] */,
    tensor6_int64(%t6: Tensor[(?, ?, ?, ?, ?, ?), int64]) => %61 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][6], dtype="int32") /* ty=Tensor[(?), int32] */;
    %62 = take(%t6, %61, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int64] */;
    tensor6_int64(%62) /* ty=tensor_int64_t[] */,
  }
}

def @ta_split_helper_uint16(%tensor_array4: List[tensor_uint16_t[]], %value11: tensor_uint16_t[], %offset11: int32, %current11: int32, %limit11: int32, %lengths2: Tensor[(?), int32]) -> List[tensor_uint16_t[]] {
  %63 = equal(%current11, %limit11) /* ty=bool */;
  if (%63) {
    %tensor_array4
  } else {
    %64 = take(%lengths2, %current11) /* ty=int32 */;
    %65 = add(%offset11, %64) /* ty=int32 */;
    %66 = add(%current11, 1 /* ty=int32 */) /* ty=int32 */;
    %67 = @ta_split_helper_uint16(%tensor_array4, %value11, %65, %66, %limit11, %lengths2) /* ty=List[tensor_uint16_t[]] */;
    %68 = take(%lengths2, %current11) /* ty=int32 */;
    %69 = add(%68, %offset11) /* ty=int32 */;
    %70 = @tensor_take_uint16(%value11, %offset11, %69) /* ty=tensor_uint16_t[] */;
    @tensor_array_write_uint16(%67, %current11, %70) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_scatter_helper_uint16(%ta: List[tensor_uint16_t[]], %current: int32, %limit: int32, %indices_: Tensor[(?), int32], %values_: List[tensor_uint16_t[]]) -> List[tensor_uint16_t[]] {
  %71 = equal(%current, %limit) /* ty=bool */;
  if (%71) {
    %ta
  } else {
    %72 = take(%indices_, %current) /* ty=int32 */;
    %73 = @tensor_array_read_uint16(%values_, %current) /* ty=tensor_uint16_t[] */;
    %74 = @tensor_array_write_uint16(%ta, %72, %73) /* ty=List[tensor_uint16_t[]] */;
    %75 = add(%current, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_uint16(%74, %75, %limit, %indices_, %values_) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_uint16(%i2: int32, %up2: int32, %t7: Tensor[(?, ?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %76 = equal(%i2, %up2) /* ty=bool */;
  if (%76) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %77 = take(%t7, %i2, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    %78 = tensor5_uint16(%77) /* ty=tensor_uint16_t[] */;
    %79 = add(%i2, 1 /* ty=int32 */) /* ty=int32 */;
    %80 = @tensor_array_unstack_tensor6_helper_uint16(%79, %up2, %t7) /* ty=List[tensor_uint16_t[]] */;
    Cons(%78, %80) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_uint16(%i3: int32, %up3: int32, %t8: Tensor[(?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %81 = equal(%i3, %up3) /* ty=bool */;
  if (%81) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %82 = take(%t8, %i3, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    %83 = tensor4_uint16(%82) /* ty=tensor_uint16_t[] */;
    %84 = add(%i3, 1 /* ty=int32 */) /* ty=int32 */;
    %85 = @tensor_array_unstack_tensor5_helper_uint16(%84, %up3, %t8) /* ty=List[tensor_uint16_t[]] */;
    Cons(%83, %85) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_uint16(%tensor5: Tensor[(?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %86 = shape_of(%tensor5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = take(%86, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_uint16(0 /* ty=int32 */, %87, %tensor5) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor3_helper_uint16(%i4: int32, %up4: int32, %t9: Tensor[(?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %88 = equal(%i4, %up4) /* ty=bool */;
  if (%88) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %89 = take(%t9, %i4, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    %90 = tensor2_uint16(%89) /* ty=tensor_uint16_t[] */;
    %91 = add(%i4, 1 /* ty=int32 */) /* ty=int32 */;
    %92 = @tensor_array_unstack_tensor3_helper_uint16(%91, %up4, %t9) /* ty=List[tensor_uint16_t[]] */;
    Cons(%90, %92) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_uint16(%tensor6: Tensor[(?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %93 = shape_of(%tensor6, dtype="int32") /* ty=Tensor[(2), int32] */;
  %94 = take(%93, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_uint16(0 /* ty=int32 */, %94, %tensor6) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor1_uint16(%tensor7: Tensor[(?), uint16]) -> List[tensor_uint16_t[]] {
  %95 = shape_of(%tensor7, dtype="int32") /* ty=Tensor[(1), int32] */;
  %96 = take(%95, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_uint16(0 /* ty=int32 */, %96, %tensor7) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_split_float64(%tensor_array5: List[tensor_float64_t[]], %value2: tensor_float64_t[], %lengths3: Tensor[(?), int32]) -> List[tensor_float64_t[]] {
  %97 = shape_of(%lengths3, dtype="int32") /* ty=Tensor[(1), int32] */;
  %98 = take(%97, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float64(%tensor_array5, %value2, 0 /* ty=int32 */, 0 /* ty=int32 */, %98, %lengths3) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_split_uint16(%tensor_array6: List[tensor_uint16_t[]], %value3: tensor_uint16_t[], %lengths4: Tensor[(?), int32]) -> List[tensor_uint16_t[]] {
  %99 = shape_of(%lengths4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %100 = take(%99, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_uint16(%tensor_array6, %value3, 0 /* ty=int32 */, 0 /* ty=int32 */, %100, %lengths4) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor5_float64(%tensor8: Tensor[(?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %101 = shape_of(%tensor8, dtype="int32") /* ty=Tensor[(5), int32] */;
  %102 = take(%101, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float64(0 /* ty=int32 */, %102, %tensor8) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor6_helper_int32(%i5: int32, %up5: int32, %t10: Tensor[(?, ?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %103 = equal(%i5, %up5) /* ty=bool */;
  if (%103) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %104 = take(%t10, %i5, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    %105 = tensor5_int32(%104) /* ty=tensor_int32_t[] */;
    %106 = add(%i5, 1 /* ty=int32 */) /* ty=int32 */;
    %107 = @tensor_array_unstack_tensor6_helper_int32(%106, %up5, %t10) /* ty=List[tensor_int32_t[]] */;
    Cons(%105, %107) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor4_uint16(%tensor9: Tensor[(?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %108 = shape_of(%tensor9, dtype="int32") /* ty=Tensor[(4), int32] */;
  %109 = take(%108, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_uint16(0 /* ty=int32 */, %109, %tensor9) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor5_helper_float64(%i6: int32, %up6: int32, %t14: Tensor[(?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %110 = equal(%i6, %up6) /* ty=bool */;
  if (%110) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %111 = take(%t14, %i6, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    %112 = tensor4_float64(%111) /* ty=tensor_float64_t[] */;
    %113 = add(%i6, 1 /* ty=int32 */) /* ty=int32 */;
    %114 = @tensor_array_unstack_tensor5_helper_float64(%113, %up6, %t14) /* ty=List[tensor_float64_t[]] */;
    Cons(%112, %114) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_concat_float64(%tensor_array7: List[tensor_float64_t[]]) -> tensor_float64_t[] {
  match? (%tensor_array7) {
    Nil => tensor_nil_float64 /* ty=tensor_float64_t[] */,
    Cons(%hd1: tensor_float64_t[], %tl1: List[tensor_float64_t[]]) => match? (%tl1) {
      Nil => %hd1,
      _ => %115 = @tensor_array_concat_float64(%tl1) /* ty=tensor_float64_t[] */;
      @tensor_concatenate_float64(%hd1, %115) /* ty=tensor_float64_t[] */,
    },
  }
}

def @tensor_array_write_int8(%tensor_array8: List[tensor_int8_t[]], %x2: int32, %v: tensor_int8_t[]) -> List[tensor_int8_t[]] {
  @update(%tensor_array8, %x2, %v) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_scatter_helper_int64(%ta1: List[tensor_int64_t[]], %current2: int32, %limit2: int32, %indices_1: Tensor[(?), int32], %values_1: List[tensor_int64_t[]]) -> List[tensor_int64_t[]] {
  %116 = equal(%current2, %limit2) /* ty=bool */;
  if (%116) {
    %ta1
  } else {
    %117 = take(%indices_1, %current2) /* ty=int32 */;
    %118 = @tensor_array_read_int64(%values_1, %current2) /* ty=tensor_int64_t[] */;
    %119 = @tensor_array_write_int64(%ta1, %117, %118) /* ty=List[tensor_int64_t[]] */;
    %120 = add(%current2, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int64(%119, %120, %limit2, %indices_1, %values_1) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_concatenate_float64(%x3: tensor_float64_t[], %y1: tensor_float64_t[]) -> tensor_float64_t[] {
  match? (%x3) {
    tensor1_float64(%t111: Tensor[(?), float64]) => match? (%y1) {
      tensor1_float64(%t121: Tensor[(?), float64]) => %121 = (%t111, %t121);
      %122 = concatenate(%121) /* ty=Tensor[(?), float64] */;
      tensor1_float64(%122) /* ty=tensor_float64_t[] */,
    },
    tensor2_float64(%t211: Tensor[(?, ?), float64]) => match? (%y1) {
      tensor2_float64(%t221: Tensor[(?, ?), float64]) => %123 = (%t211, %t221);
      %124 = concatenate(%123) /* ty=Tensor[(?, ?), float64] */;
      tensor2_float64(%124) /* ty=tensor_float64_t[] */,
    },
    tensor3_float64(%t311: Tensor[(?, ?, ?), float64]) => match? (%y1) {
      tensor3_float64(%t321: Tensor[(?, ?, ?), float64]) => %125 = (%t311, %t321);
      %126 = concatenate(%125) /* ty=Tensor[(?, ?, ?), float64] */;
      tensor3_float64(%126) /* ty=tensor_float64_t[] */,
    },
    tensor4_float64(%t411: Tensor[(?, ?, ?, ?), float64]) => match? (%y1) {
      tensor4_float64(%t421: Tensor[(?, ?, ?, ?), float64]) => %127 = (%t411, %t421);
      %128 = concatenate(%127) /* ty=Tensor[(?, ?, ?, ?), float64] */;
      tensor4_float64(%128) /* ty=tensor_float64_t[] */,
    },
  }
}

def @tensor_take_float64(%tensor10: tensor_float64_t[], %lower1: int32, %upper1: int32) -> tensor_float64_t[] {
  match? (%tensor10) {
    tensor1_float64(%t15: Tensor[(?), float64]) => %129 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][7], dtype="int32") /* ty=Tensor[(?), int32] */;
    %130 = take(%t15, %129) /* ty=Tensor[(?), float64] */;
    tensor1_float64(%130) /* ty=tensor_float64_t[] */,
    tensor2_float64(%t23: Tensor[(?, ?), float64]) => %131 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][8], dtype="int32") /* ty=Tensor[(?), int32] */;
    %132 = take(%t23, %131, axis=0) /* ty=Tensor[(?, ?), float64] */;
    tensor2_float64(%132) /* ty=tensor_float64_t[] */,
    tensor3_float64(%t33: Tensor[(?, ?, ?), float64]) => %133 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][9], dtype="int32") /* ty=Tensor[(?), int32] */;
    %134 = take(%t33, %133, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    tensor3_float64(%134) /* ty=tensor_float64_t[] */,
    tensor4_float64(%t43: Tensor[(?, ?, ?, ?), float64]) => %135 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][10], dtype="int32") /* ty=Tensor[(?), int32] */;
    %136 = take(%t43, %135, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    tensor4_float64(%136) /* ty=tensor_float64_t[] */,
    tensor5_float64(%t51: Tensor[(?, ?, ?, ?, ?), float64]) => %137 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][11], dtype="int32") /* ty=Tensor[(?), int32] */;
    %138 = take(%t51, %137, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    tensor5_float64(%138) /* ty=tensor_float64_t[] */,
    tensor6_float64(%t61: Tensor[(?, ?, ?, ?, ?, ?), float64]) => %139 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][12], dtype="int32") /* ty=Tensor[(?), int32] */;
    %140 = take(%t61, %139, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float64] */;
    tensor6_float64(%140) /* ty=tensor_float64_t[] */,
  }
}

def @ta_split_helper_int16(%tensor_array9: List[tensor_int16_t[]], %value12: tensor_int16_t[], %offset12: int32, %current12: int32, %limit12: int32, %lengths5: Tensor[(?), int32]) -> List[tensor_int16_t[]] {
  %141 = equal(%current12, %limit12) /* ty=bool */;
  if (%141) {
    %tensor_array9
  } else {
    %142 = take(%lengths5, %current12) /* ty=int32 */;
    %143 = add(%offset12, %142) /* ty=int32 */;
    %144 = add(%current12, 1 /* ty=int32 */) /* ty=int32 */;
    %145 = @ta_split_helper_int16(%tensor_array9, %value12, %143, %144, %limit12, %lengths5) /* ty=List[tensor_int16_t[]] */;
    %146 = take(%lengths5, %current12) /* ty=int32 */;
    %147 = add(%146, %offset12) /* ty=int32 */;
    %148 = @tensor_take_int16(%value12, %offset12, %147) /* ty=tensor_int16_t[] */;
    @tensor_array_write_int16(%145, %current12, %148) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_float64(%i7: int32, %up7: int32, %t16: Tensor[(?, ?), float64]) -> List[tensor_float64_t[]] {
  %149 = equal(%i7, %up7) /* ty=bool */;
  if (%149) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %150 = take(%t16, %i7, axis=0) /* ty=Tensor[(?), float64] */;
    %151 = tensor1_float64(%150) /* ty=tensor_float64_t[] */;
    %152 = add(%i7, 1 /* ty=int32 */) /* ty=int32 */;
    %153 = @tensor_array_unstack_tensor2_helper_float64(%152, %up7, %t16) /* ty=List[tensor_float64_t[]] */;
    Cons(%151, %153) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_int16(%i8: int32, %up8: int32, %t17: Tensor[(?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %154 = equal(%i8, %up8) /* ty=bool */;
  if (%154) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %155 = take(%t17, %i8, axis=0) /* ty=Tensor[(?, ?), int16] */;
    %156 = tensor2_int16(%155) /* ty=tensor_int16_t[] */;
    %157 = add(%i8, 1 /* ty=int32 */) /* ty=int32 */;
    %158 = @tensor_array_unstack_tensor3_helper_int16(%157, %up8, %t17) /* ty=List[tensor_int16_t[]] */;
    Cons(%156, %158) /* ty=List[tensor_int16_t[]] */
  }
}

def @ta_split_helper_float16(%tensor_array10: List[tensor_float16_t[]], %value13: tensor_float16_t[], %offset13: int32, %current13: int32, %limit13: int32, %lengths6: Tensor[(?), int32]) -> List[tensor_float16_t[]] {
  %159 = equal(%current13, %limit13) /* ty=bool */;
  if (%159) {
    %tensor_array10
  } else {
    %160 = take(%lengths6, %current13) /* ty=int32 */;
    %161 = add(%offset13, %160) /* ty=int32 */;
    %162 = add(%current13, 1 /* ty=int32 */) /* ty=int32 */;
    %163 = @ta_split_helper_float16(%tensor_array10, %value13, %161, %162, %limit13, %lengths6) /* ty=List[tensor_float16_t[]] */;
    %164 = take(%lengths6, %current13) /* ty=int32 */;
    %165 = add(%164, %offset13) /* ty=int32 */;
    %166 = @tensor_take_float16(%value13, %offset13, %165) /* ty=tensor_float16_t[] */;
    @tensor_array_write_float16(%163, %current13, %166) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int8(%tensor11: Tensor[(?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %167 = shape_of(%tensor11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = take(%167, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int8(0 /* ty=int32 */, %168, %tensor11) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor2_helper_int64(%i9: int32, %up9: int32, %t18: Tensor[(?, ?), int64]) -> List[tensor_int64_t[]] {
  %169 = equal(%i9, %up9) /* ty=bool */;
  if (%169) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %170 = take(%t18, %i9, axis=0) /* ty=Tensor[(?), int64] */;
    %171 = tensor1_int64(%170) /* ty=tensor_int64_t[] */;
    %172 = add(%i9, 1 /* ty=int32 */) /* ty=int32 */;
    %173 = @tensor_array_unstack_tensor2_helper_int64(%172, %up9, %t18) /* ty=List[tensor_int64_t[]] */;
    Cons(%171, %173) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_float16(%i10: int32, %up10: int32, %t19: Tensor[(?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %174 = equal(%i10, %up10) /* ty=bool */;
  if (%174) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %175 = take(%t19, %i10, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    %176 = tensor3_float16(%175) /* ty=tensor_float16_t[] */;
    %177 = add(%i10, 1 /* ty=int32 */) /* ty=int32 */;
    %178 = @tensor_array_unstack_tensor4_helper_float16(%177, %up10, %t19) /* ty=List[tensor_float16_t[]] */;
    Cons(%176, %178) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_float32(%i11: int32, %up11: int32, %t20: Tensor[(?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %179 = equal(%i11, %up11) /* ty=bool */;
  if (%179) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %180 = take(%t20, %i11, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    %181 = tensor4_float32(%180) /* ty=tensor_float32_t[] */;
    %182 = add(%i11, 1 /* ty=int32 */) /* ty=int32 */;
    %183 = @tensor_array_unstack_tensor5_helper_float32(%182, %up11, %t20) /* ty=List[tensor_float32_t[]] */;
    Cons(%181, %183) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_expand_dims_float64(%x4: tensor_float64_t[]) -> tensor_float64_t[] {
  match? (%x4) {
    tensor0_float64(%t0: float64) => %184 = expand_dims(%t0, axis=0) /* ty=Tensor[(?), float64] */;
    tensor1_float64(%184) /* ty=tensor_float64_t[] */,
    tensor1_float64(%t110: Tensor[(?), float64]) => %185 = expand_dims(%t110, axis=0) /* ty=Tensor[(?, ?), float64] */;
    tensor2_float64(%185) /* ty=tensor_float64_t[] */,
    tensor2_float64(%t24: Tensor[(?, ?), float64]) => %186 = expand_dims(%t24, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    tensor3_float64(%186) /* ty=tensor_float64_t[] */,
    tensor3_float64(%t34: Tensor[(?, ?, ?), float64]) => %187 = expand_dims(%t34, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    tensor4_float64(%187) /* ty=tensor_float64_t[] */,
    tensor4_float64(%t44: Tensor[(?, ?, ?, ?), float64]) => %188 = expand_dims(%t44, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    tensor5_float64(%188) /* ty=tensor_float64_t[] */,
    tensor5_float64(%t52: Tensor[(?, ?, ?, ?, ?), float64]) => %189 = expand_dims(%t52, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float64] */;
    tensor6_float64(%189) /* ty=tensor_float64_t[] */,
  }
}

def @size[A](%t25: Tree[A]) -> int32 {
  match (%t25) {
    Rose(_, %sub_trees: List[Tree[A]]) => %190 = @map(@size, %sub_trees) /* ty=List[int32] */;
    %191 = @sum(%190) /* ty=int32 */;
    add(1 /* ty=int32 */, %191) /* ty=int32 */,
  }
}

def @tensor_array_unstack_tensor6_helper_float64(%i12: int32, %up12: int32, %t26: Tensor[(?, ?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %192 = equal(%i12, %up12) /* ty=bool */;
  if (%192) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %193 = take(%t26, %i12, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    %194 = tensor5_float64(%193) /* ty=tensor_float64_t[] */;
    %195 = add(%i12, 1 /* ty=int32 */) /* ty=int32 */;
    %196 = @tensor_array_unstack_tensor6_helper_float64(%195, %up12, %t26) /* ty=List[tensor_float64_t[]] */;
    Cons(%194, %196) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_float16(%i13: int32, %up13: int32, %t27: Tensor[(?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %197 = equal(%i13, %up13) /* ty=bool */;
  if (%197) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %198 = take(%t27, %i13, axis=0) /* ty=Tensor[(?, ?), float16] */;
    %199 = tensor2_float16(%198) /* ty=tensor_float16_t[] */;
    %200 = add(%i13, 1 /* ty=int32 */) /* ty=int32 */;
    %201 = @tensor_array_unstack_tensor3_helper_float16(%200, %up13, %t27) /* ty=List[tensor_float16_t[]] */;
    Cons(%199, %201) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int32(%tensor12: Tensor[(?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %202 = shape_of(%tensor12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = take(%202, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int32(0 /* ty=int32 */, %203, %tensor12) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor1_int64(%tensor13: Tensor[(?), int64]) -> List[tensor_int64_t[]] {
  %204 = shape_of(%tensor13, dtype="int32") /* ty=Tensor[(1), int32] */;
  %205 = take(%204, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int64(0 /* ty=int32 */, %205, %tensor13) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor2_helper_float16(%i14: int32, %up14: int32, %t28: Tensor[(?, ?), float16]) -> List[tensor_float16_t[]] {
  %206 = equal(%i14, %up14) /* ty=bool */;
  if (%206) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %207 = take(%t28, %i14, axis=0) /* ty=Tensor[(?), float16] */;
    %208 = tensor1_float16(%207) /* ty=tensor_float16_t[] */;
    %209 = add(%i14, 1 /* ty=int32 */) /* ty=int32 */;
    %210 = @tensor_array_unstack_tensor2_helper_float16(%209, %up14, %t28) /* ty=List[tensor_float16_t[]] */;
    Cons(%208, %210) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_int8(%tensor14: Tensor[(?, ?), int8]) -> List[tensor_int8_t[]] {
  %211 = shape_of(%tensor14, dtype="int32") /* ty=Tensor[(2), int32] */;
  %212 = take(%211, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int8(0 /* ty=int32 */, %212, %tensor14) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor6_helper_int16(%i15: int32, %up15: int32, %t29: Tensor[(?, ?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %213 = equal(%i15, %up15) /* ty=bool */;
  if (%213) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %214 = take(%t29, %i15, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    %215 = tensor5_int16(%214) /* ty=tensor_int16_t[] */;
    %216 = add(%i15, 1 /* ty=int32 */) /* ty=int32 */;
    %217 = @tensor_array_unstack_tensor6_helper_int16(%216, %up15, %t29) /* ty=List[tensor_int16_t[]] */;
    Cons(%215, %217) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_float16(%i16: int32, %up16: int32, %t30: Tensor[(?), float16]) -> List[tensor_float16_t[]] {
  %218 = equal(%i16, %up16) /* ty=bool */;
  if (%218) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %219 = take(%t30, %i16) /* ty=float16 */;
    %220 = tensor0_float16(%219) /* ty=tensor_float16_t[] */;
    %221 = add(%i16, 1 /* ty=int32 */) /* ty=int32 */;
    %222 = @tensor_array_unstack_tensor1_helper_float16(%221, %up16, %t30) /* ty=List[tensor_float16_t[]] */;
    Cons(%220, %222) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_read_float16(%tensor_array11: List[tensor_float16_t[]], %x5: int32) -> tensor_float16_t[] {
  @nth(%tensor_array11, %x5) /* ty=tensor_float16_t[] */
}

def @tensor_array_int8(%x6: int32) -> List[tensor_int8_t[]] {
  %223 = equal(%x6, 0 /* ty=int32 */) /* ty=bool */;
  if (%223) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %224 = tensor_nil_int8 /* ty=tensor_int8_t[] */;
    %225 = subtract(%x6, 1 /* ty=int32 */) /* ty=int32 */;
    %226 = @tensor_array_int8(%225) /* ty=List[tensor_int8_t[]] */;
    Cons(%224, %226) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor6_int16(%tensor15: Tensor[(?, ?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %227 = shape_of(%tensor15, dtype="int32") /* ty=Tensor[(6), int32] */;
  %228 = take(%227, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int16(0 /* ty=int32 */, %228, %tensor15) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_float16(%x7: int32) -> List[tensor_float16_t[]] {
  %229 = equal(%x7, 0 /* ty=int32 */) /* ty=bool */;
  if (%229) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %230 = tensor_nil_float16 /* ty=tensor_float16_t[] */;
    %231 = subtract(%x7, 1 /* ty=int32 */) /* ty=int32 */;
    %232 = @tensor_array_float16(%231) /* ty=List[tensor_float16_t[]] */;
    Cons(%230, %232) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_stack_int32(%tensor_array12: List[tensor_int32_t[]]) -> tensor_int32_t[] {
  %233 = @map(@tensor_expand_dims_int32, %tensor_array12) /* ty=List[tensor_int32_t[]] */;
  %234 = @hd(%233) /* ty=tensor_int32_t[] */;
  %235 = @tl(%233) /* ty=List[tensor_int32_t[]] */;
  @foldl(@tensor_concatenate_int32, %234, %235) /* ty=tensor_int32_t[] */
}

def @tensor_array_scatter_float64(%tensor_array13: List[tensor_float64_t[]], %indices: Tensor[(?), int32], %values1: List[tensor_float64_t[]]) -> List[tensor_float64_t[]] {
  %236 = shape_of(%indices, dtype="int32") /* ty=Tensor[(1), int32] */;
  %237 = take(%236, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float64(%tensor_array13, 0 /* ty=int32 */, %237, %indices, %values1) /* ty=List[tensor_float64_t[]] */
}

def @sum(%xs: List[int32]) -> int32 {
  let %add_f: fn (int32, int32) -> int32 = fn (%x8: int32, %y2: int32) -> int32 {
    add(%x8, %y2) /* ty=int32 */
  };
  @foldl(%add_f, 0 /* ty=int32 */, %xs) /* ty=int32 */
}

def @tensor_array_unstack_tensor1_float64(%tensor16: Tensor[(?), float64]) -> List[tensor_float64_t[]] {
  %238 = shape_of(%tensor16, dtype="int32") /* ty=Tensor[(1), int32] */;
  %239 = take(%238, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float64(0 /* ty=int32 */, %239, %tensor16) /* ty=List[tensor_float64_t[]] */
}

def @length[A](%xs1: List[A]) -> int32 {
  match (%xs1) {
    Cons(_, %rest: List[A]) => %240 = @length(%rest) /* ty=int32 */;
    add(1 /* ty=int32 */, %240) /* ty=int32 */,
    Nil => 0 /* ty=int32 */,
  }
}

def @map_accuml[A, B, C](%f: fn (A, B) -> (A, C), %init: A, %xs2: List[B]) -> (A, List[C]) {
  let %updater: fn ((A, List[C]), B) -> (A, List[C]) = fn (%acc: (A, List[C]), %x9: B) -> (A, List[C]) {
    %241 = %acc.0;
    let %f_out: (A, C) = %f(%241, %x9) /* ty=(A, C) */;
    %242 = %f_out.0;
    %243 = %f_out.1;
    %244 = %acc.1;
    %245 = Cons(%243, %244) /* ty=List[C] */;
    (%242, %245)
  };
  %246 = Nil /* ty=List[C] */;
  %247 = (%init, %246);
  @foldl(%updater, %247, %xs2) /* ty=(A, List[C]) */
}

def @tensor_array_split_float16(%tensor_array14: List[tensor_float16_t[]], %value4: tensor_float16_t[], %lengths7: Tensor[(?), int32]) -> List[tensor_float16_t[]] {
  %248 = shape_of(%lengths7, dtype="int32") /* ty=Tensor[(1), int32] */;
  %249 = take(%248, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float16(%tensor_array14, %value4, 0 /* ty=int32 */, 0 /* ty=int32 */, %249, %lengths7) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor5_float16(%tensor17: Tensor[(?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %250 = shape_of(%tensor17, dtype="int32") /* ty=Tensor[(5), int32] */;
  %251 = take(%250, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float16(0 /* ty=int32 */, %251, %tensor17) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_concat_float16(%tensor_array15: List[tensor_float16_t[]]) -> tensor_float16_t[] {
  match? (%tensor_array15) {
    Nil => tensor_nil_float16 /* ty=tensor_float16_t[] */,
    Cons(%hd2: tensor_float16_t[], %tl2: List[tensor_float16_t[]]) => match? (%tl2) {
      Nil => %hd2,
      _ => %252 = @tensor_array_concat_float16(%tl2) /* ty=tensor_float16_t[] */;
      @tensor_concatenate_float16(%hd2, %252) /* ty=tensor_float16_t[] */,
    },
  }
}

def @tensor_expand_dims_float32(%x10: tensor_float32_t[]) -> tensor_float32_t[] {
  match? (%x10) {
    tensor0_float32(%t01: float32) => %253 = expand_dims(%t01, axis=0) /* ty=Tensor[(?), float32] */;
    tensor1_float32(%253) /* ty=tensor_float32_t[] */,
    tensor1_float32(%t112: Tensor[(?), float32]) => %254 = expand_dims(%t112, axis=0) /* ty=Tensor[(?, ?), float32] */;
    tensor2_float32(%254) /* ty=tensor_float32_t[] */,
    tensor2_float32(%t210: Tensor[(?, ?), float32]) => %255 = expand_dims(%t210, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    tensor3_float32(%255) /* ty=tensor_float32_t[] */,
    tensor3_float32(%t35: Tensor[(?, ?, ?), float32]) => %256 = expand_dims(%t35, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    tensor4_float32(%256) /* ty=tensor_float32_t[] */,
    tensor4_float32(%t45: Tensor[(?, ?, ?, ?), float32]) => %257 = expand_dims(%t45, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    tensor5_float32(%257) /* ty=tensor_float32_t[] */,
    tensor5_float32(%t53: Tensor[(?, ?, ?, ?, ?), float32]) => %258 = expand_dims(%t53, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float32] */;
    tensor6_float32(%258) /* ty=tensor_float32_t[] */,
  }
}

def @tensor_array_unstack_tensor4_helper_float64(%i17: int32, %up17: int32, %t36: Tensor[(?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %259 = equal(%i17, %up17) /* ty=bool */;
  if (%259) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %260 = take(%t36, %i17, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    %261 = tensor3_float64(%260) /* ty=tensor_float64_t[] */;
    %262 = add(%i17, 1 /* ty=int32 */) /* ty=int32 */;
    %263 = @tensor_array_unstack_tensor4_helper_float64(%262, %up17, %t36) /* ty=List[tensor_float64_t[]] */;
    Cons(%261, %263) /* ty=List[tensor_float64_t[]] */
  }
}

def @unfoldr[A, B](%f1: fn (A) -> Option[(A, B)], %seed: A) -> List[B] {
  %264 = %f1(%seed) /* ty=Option[(A, B)] */;
  match (%264) {
    Some(%val: (A, B)) => %265 = %val.1;
    %266 = %val.0;
    %267 = @unfoldr(%f1, %266) /* ty=List[B] */;
    Cons(%265, %267) /* ty=List[B] */,
    None => Nil /* ty=List[B] */,
  }
}

def @tensor_array_unstack_tensor6_helper_float32(%i18: int32, %up18: int32, %t37: Tensor[(?, ?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %268 = equal(%i18, %up18) /* ty=bool */;
  if (%268) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %269 = take(%t37, %i18, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    %270 = tensor5_float32(%269) /* ty=tensor_float32_t[] */;
    %271 = add(%i18, 1 /* ty=int32 */) /* ty=int32 */;
    %272 = @tensor_array_unstack_tensor6_helper_float32(%271, %up18, %t37) /* ty=List[tensor_float32_t[]] */;
    Cons(%270, %272) /* ty=List[tensor_float32_t[]] */
  }
}

def @nth[A](%xs3: List[A], %n: int32) -> A {
  %273 = equal(%n, 0 /* ty=int32 */) /* ty=bool */;
  if (%273) {
    @hd(%xs3) /* ty=A */
  } else {
    %274 = @tl(%xs3) /* ty=List[A] */;
    %275 = subtract(%n, 1 /* ty=int32 */) /* ty=int32 */;
    @nth(%274, %275) /* ty=A */
  }
}

def @tensor_array_write_int16(%tensor_array16: List[tensor_int16_t[]], %x11: int32, %v1: tensor_int16_t[]) -> List[tensor_int16_t[]] {
  @update(%tensor_array16, %x11, %v1) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor3_helper_float64(%i19: int32, %up19: int32, %t38: Tensor[(?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %276 = equal(%i19, %up19) /* ty=bool */;
  if (%276) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %277 = take(%t38, %i19, axis=0) /* ty=Tensor[(?, ?), float64] */;
    %278 = tensor2_float64(%277) /* ty=tensor_float64_t[] */;
    %279 = add(%i19, 1 /* ty=int32 */) /* ty=int32 */;
    %280 = @tensor_array_unstack_tensor3_helper_float64(%279, %up19, %t38) /* ty=List[tensor_float64_t[]] */;
    Cons(%278, %280) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_write_int32(%tensor_array17: List[tensor_int32_t[]], %x12: int32, %v2: tensor_int32_t[]) -> List[tensor_int32_t[]] {
  @update(%tensor_array17, %x12, %v2) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_read_int8(%tensor_array18: List[tensor_int8_t[]], %x13: int32) -> tensor_int8_t[] {
  @nth(%tensor_array18, %x13) /* ty=tensor_int8_t[] */
}

def @zip[A, B](%xs4: List[A], %ys: List[B]) -> List[(A, B)] {
  %281 = (%xs4, %ys);
  match (%281) {
    (Cons(%x14: A, %x_rest: List[A]), Cons(%y3: B, %y_rest: List[B])) => %282 = (%x14, %y3);
    %283 = @zip(%x_rest, %y_rest) /* ty=List[(A, B)] */;
    Cons(%282, %283) /* ty=List[(A, B)] */,
    _ => Nil /* ty=List[(A, B)] */,
  }
}

def @tensor_array_unstack_tensor1_float16(%tensor18: Tensor[(?), float16]) -> List[tensor_float16_t[]] {
  %284 = shape_of(%tensor18, dtype="int32") /* ty=Tensor[(1), int32] */;
  %285 = take(%284, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float16(0 /* ty=int32 */, %285, %tensor18) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor1_helper_int16(%i20: int32, %up20: int32, %t39: Tensor[(?), int16]) -> List[tensor_int16_t[]] {
  %286 = equal(%i20, %up20) /* ty=bool */;
  if (%286) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %287 = take(%t39, %i20) /* ty=int16 */;
    %288 = tensor0_int16(%287) /* ty=tensor_int16_t[] */;
    %289 = add(%i20, 1 /* ty=int32 */) /* ty=int32 */;
    %290 = @tensor_array_unstack_tensor1_helper_int16(%289, %up20, %t39) /* ty=List[tensor_int16_t[]] */;
    Cons(%288, %290) /* ty=List[tensor_int16_t[]] */
  }
}

def @update[A](%xs5: List[A], %n1: int32, %v3: A) -> List[A] {
  %291 = equal(%n1, 0 /* ty=int32 */) /* ty=bool */;
  if (%291) {
    %292 = @tl(%xs5) /* ty=List[A] */;
    Cons(%v3, %292) /* ty=List[A] */
  } else {
    %293 = @hd(%xs5) /* ty=A */;
    %294 = @tl(%xs5) /* ty=List[A] */;
    %295 = subtract(%n1, 1 /* ty=int32 */) /* ty=int32 */;
    %296 = @update(%294, %295, %v3) /* ty=List[A] */;
    Cons(%293, %296) /* ty=List[A] */
  }
}

def @tensor_array_stack_float64(%tensor_array19: List[tensor_float64_t[]]) -> tensor_float64_t[] {
  %297 = @map(@tensor_expand_dims_float64, %tensor_array19) /* ty=List[tensor_float64_t[]] */;
  %298 = @hd(%297) /* ty=tensor_float64_t[] */;
  %299 = @tl(%297) /* ty=List[tensor_float64_t[]] */;
  @foldl(@tensor_concatenate_float64, %298, %299) /* ty=tensor_float64_t[] */
}

def @tensor_array_scatter_float32(%tensor_array20: List[tensor_float32_t[]], %indices1: Tensor[(?), int32], %values2: List[tensor_float32_t[]]) -> List[tensor_float32_t[]] {
  %300 = shape_of(%indices1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %301 = take(%300, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float32(%tensor_array20, 0 /* ty=int32 */, %301, %indices1, %values2) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_write_int64(%tensor_array21: List[tensor_int64_t[]], %x15: int32, %v4: tensor_int64_t[]) -> List[tensor_int64_t[]] {
  @update(%tensor_array21, %x15, %v4) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor1_helper_uint8(%i21: int32, %up21: int32, %t40: Tensor[(?), uint8]) -> List[tensor_uint8_t[]] {
  %302 = equal(%i21, %up21) /* ty=bool */;
  if (%302) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %303 = take(%t40, %i21) /* ty=uint8 */;
    %304 = tensor0_uint8(%303) /* ty=tensor_uint8_t[] */;
    %305 = add(%i21, 1 /* ty=int32 */) /* ty=int32 */;
    %306 = @tensor_array_unstack_tensor1_helper_uint8(%305, %up21, %t40) /* ty=List[tensor_uint8_t[]] */;
    Cons(%304, %306) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_scatter_uint8(%tensor_array22: List[tensor_uint8_t[]], %indices2: Tensor[(?), int32], %values3: List[tensor_uint8_t[]]) -> List[tensor_uint8_t[]] {
  %307 = shape_of(%indices2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %308 = take(%307, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_uint8(%tensor_array22, 0 /* ty=int32 */, %308, %indices2, %values3) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor5_helper_uint8(%i22: int32, %up22: int32, %t46: Tensor[(?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %309 = equal(%i22, %up22) /* ty=bool */;
  if (%309) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %310 = take(%t46, %i22, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    %311 = tensor4_uint8(%310) /* ty=tensor_uint8_t[] */;
    %312 = add(%i22, 1 /* ty=int32 */) /* ty=int32 */;
    %313 = @tensor_array_unstack_tensor5_helper_uint8(%312, %up22, %t46) /* ty=List[tensor_uint8_t[]] */;
    Cons(%311, %313) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_concatenate_int16(%x16: tensor_int16_t[], %y4: tensor_int16_t[]) -> tensor_int16_t[] {
  match? (%x16) {
    tensor1_int16(%t113: Tensor[(?), int16]) => match? (%y4) {
      tensor1_int16(%t122: Tensor[(?), int16]) => %314 = (%t113, %t122);
      %315 = concatenate(%314) /* ty=Tensor[(?), int16] */;
      tensor1_int16(%315) /* ty=tensor_int16_t[] */,
    },
    tensor2_int16(%t212: Tensor[(?, ?), int16]) => match? (%y4) {
      tensor2_int16(%t222: Tensor[(?, ?), int16]) => %316 = (%t212, %t222);
      %317 = concatenate(%316) /* ty=Tensor[(?, ?), int16] */;
      tensor2_int16(%317) /* ty=tensor_int16_t[] */,
    },
    tensor3_int16(%t312: Tensor[(?, ?, ?), int16]) => match? (%y4) {
      tensor3_int16(%t322: Tensor[(?, ?, ?), int16]) => %318 = (%t312, %t322);
      %319 = concatenate(%318) /* ty=Tensor[(?, ?, ?), int16] */;
      tensor3_int16(%319) /* ty=tensor_int16_t[] */,
    },
    tensor4_int16(%t412: Tensor[(?, ?, ?, ?), int16]) => match? (%y4) {
      tensor4_int16(%t422: Tensor[(?, ?, ?, ?), int16]) => %320 = (%t412, %t422);
      %321 = concatenate(%320) /* ty=Tensor[(?, ?, ?, ?), int16] */;
      tensor4_int16(%321) /* ty=tensor_int16_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor6_helper_float16(%i23: int32, %up23: int32, %t47: Tensor[(?, ?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %322 = equal(%i23, %up23) /* ty=bool */;
  if (%322) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %323 = take(%t47, %i23, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    %324 = tensor5_float16(%323) /* ty=tensor_float16_t[] */;
    %325 = add(%i23, 1 /* ty=int32 */) /* ty=int32 */;
    %326 = @tensor_array_unstack_tensor6_helper_float16(%325, %up23, %t47) /* ty=List[tensor_float16_t[]] */;
    Cons(%324, %326) /* ty=List[tensor_float16_t[]] */
  }
}

def @foldl[A, B](%f2: fn (A, B) -> A, %acc1: A, %xs6: List[B]) -> A {
  match (%xs6) {
    Cons(%x17: B, %rest1: List[B]) => %327 = %f2(%acc1, %x17) /* ty=A */;
    @foldl(%f2, %327, %rest1) /* ty=A */,
    Nil => %acc1,
  }
}

def @tensor_array_unstack_tensor4_int64(%tensor19: Tensor[(?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %328 = shape_of(%tensor19, dtype="int32") /* ty=Tensor[(4), int32] */;
  %329 = take(%328, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int64(0 /* ty=int32 */, %329, %tensor19) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_scatter_helper_float32(%ta2: List[tensor_float32_t[]], %current3: int32, %limit3: int32, %indices_2: Tensor[(?), int32], %values_2: List[tensor_float32_t[]]) -> List[tensor_float32_t[]] {
  %330 = equal(%current3, %limit3) /* ty=bool */;
  if (%330) {
    %ta2
  } else {
    %331 = take(%indices_2, %current3) /* ty=int32 */;
    %332 = @tensor_array_read_float32(%values_2, %current3) /* ty=tensor_float32_t[] */;
    %333 = @tensor_array_write_float32(%ta2, %331, %332) /* ty=List[tensor_float32_t[]] */;
    %334 = add(%current3, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float32(%333, %334, %limit3, %indices_2, %values_2) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_float64(%x18: int32) -> List[tensor_float64_t[]] {
  %335 = equal(%x18, 0 /* ty=int32 */) /* ty=bool */;
  if (%335) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %336 = tensor_nil_float64 /* ty=tensor_float64_t[] */;
    %337 = subtract(%x18, 1 /* ty=int32 */) /* ty=int32 */;
    %338 = @tensor_array_float64(%337) /* ty=List[tensor_float64_t[]] */;
    Cons(%336, %338) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_float32(%i24: int32, %up24: int32, %t48: Tensor[(?, ?), float32]) -> List[tensor_float32_t[]] {
  %339 = equal(%i24, %up24) /* ty=bool */;
  if (%339) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %340 = take(%t48, %i24, axis=0) /* ty=Tensor[(?), float32] */;
    %341 = tensor1_float32(%340) /* ty=tensor_float32_t[] */;
    %342 = add(%i24, 1 /* ty=int32 */) /* ty=int32 */;
    %343 = @tensor_array_unstack_tensor2_helper_float32(%342, %up24, %t48) /* ty=List[tensor_float32_t[]] */;
    Cons(%341, %343) /* ty=List[tensor_float32_t[]] */
  }
}

def @iterate[A](%f3: fn (A) -> A, %n2: int32) -> fn (A) -> A {
  %344 = equal(%n2, 0 /* ty=int32 */) /* ty=bool */;
  if (%344) {
    @id
  } else {
    %345 = subtract(%n2, 1 /* ty=int32 */) /* ty=int32 */;
    %346 = @iterate(%f3, %345) /* ty=fn (A) -> A */;
    @compose(%f3, %346) /* ty=fn (A) -> A */
  }
}

def @tensor_take_float16(%tensor20: tensor_float16_t[], %lower2: int32, %upper2: int32) -> tensor_float16_t[] {
  match? (%tensor20) {
    tensor1_float16(%t114: Tensor[(?), float16]) => %347 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][13], dtype="int32") /* ty=Tensor[(?), int32] */;
    %348 = take(%t114, %347) /* ty=Tensor[(?), float16] */;
    tensor1_float16(%348) /* ty=tensor_float16_t[] */,
    tensor2_float16(%t213: Tensor[(?, ?), float16]) => %349 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][14], dtype="int32") /* ty=Tensor[(?), int32] */;
    %350 = take(%t213, %349, axis=0) /* ty=Tensor[(?, ?), float16] */;
    tensor2_float16(%350) /* ty=tensor_float16_t[] */,
    tensor3_float16(%t310: Tensor[(?, ?, ?), float16]) => %351 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][15], dtype="int32") /* ty=Tensor[(?), int32] */;
    %352 = take(%t310, %351, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    tensor3_float16(%352) /* ty=tensor_float16_t[] */,
    tensor4_float16(%t49: Tensor[(?, ?, ?, ?), float16]) => %353 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][16], dtype="int32") /* ty=Tensor[(?), int32] */;
    %354 = take(%t49, %353, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    tensor4_float16(%354) /* ty=tensor_float16_t[] */,
    tensor5_float16(%t54: Tensor[(?, ?, ?, ?, ?), float16]) => %355 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][17], dtype="int32") /* ty=Tensor[(?), int32] */;
    %356 = take(%t54, %355, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    tensor5_float16(%356) /* ty=tensor_float16_t[] */,
    tensor6_float16(%t62: Tensor[(?, ?, ?, ?, ?, ?), float16]) => %357 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][18], dtype="int32") /* ty=Tensor[(?), int32] */;
    %358 = take(%t62, %357, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float16] */;
    tensor6_float16(%358) /* ty=tensor_float16_t[] */,
  }
}

def @tensor_array_concat_int32(%tensor_array23: List[tensor_int32_t[]]) -> tensor_int32_t[] {
  match? (%tensor_array23) {
    Nil => tensor_nil_int32 /* ty=tensor_int32_t[] */,
    Cons(%hd3: tensor_int32_t[], %tl3: List[tensor_int32_t[]]) => match? (%tl3) {
      Nil => %hd3,
      _ => %359 = @tensor_array_concat_int32(%tl3) /* ty=tensor_int32_t[] */;
      @tensor_concatenate_int32(%hd3, %359) /* ty=tensor_int32_t[] */,
    },
  }
}

def @unfoldl[A, B](%f4: fn (A) -> Option[(A, B)], %seed1: A) -> List[B] {
  %360 = @unfoldr(%f4, %seed1) /* ty=List[B] */;
  @rev(%360) /* ty=List[B] */
}

def @tensor_array_unstack_tensor4_helper_uint16(%i25: int32, %up25: int32, %t50: Tensor[(?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %361 = equal(%i25, %up25) /* ty=bool */;
  if (%361) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %362 = take(%t50, %i25, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    %363 = tensor3_uint16(%362) /* ty=tensor_uint16_t[] */;
    %364 = add(%i25, 1 /* ty=int32 */) /* ty=int32 */;
    %365 = @tensor_array_unstack_tensor4_helper_uint16(%364, %up25, %t50) /* ty=List[tensor_uint16_t[]] */;
    Cons(%363, %365) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_write_float16(%tensor_array24: List[tensor_float16_t[]], %x19: int32, %v5: tensor_float16_t[]) -> List[tensor_float16_t[]] {
  @update(%tensor_array24, %x19, %v5) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor4_int32(%tensor21: Tensor[(?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %366 = shape_of(%tensor21, dtype="int32") /* ty=Tensor[(4), int32] */;
  %367 = take(%366, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int32(0 /* ty=int32 */, %367, %tensor21) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor3_float32(%tensor22: Tensor[(?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %368 = shape_of(%tensor22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = take(%368, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float32(0 /* ty=int32 */, %369, %tensor22) /* ty=List[tensor_float32_t[]] */
}

def @tensor_expand_dims_float16(%x20: tensor_float16_t[]) -> tensor_float16_t[] {
  match? (%x20) {
    tensor0_float16(%t02: float16) => %370 = expand_dims(%t02, axis=0) /* ty=Tensor[(?), float16] */;
    tensor1_float16(%370) /* ty=tensor_float16_t[] */,
    tensor1_float16(%t115: Tensor[(?), float16]) => %371 = expand_dims(%t115, axis=0) /* ty=Tensor[(?, ?), float16] */;
    tensor2_float16(%371) /* ty=tensor_float16_t[] */,
    tensor2_float16(%t214: Tensor[(?, ?), float16]) => %372 = expand_dims(%t214, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    tensor3_float16(%372) /* ty=tensor_float16_t[] */,
    tensor3_float16(%t313: Tensor[(?, ?, ?), float16]) => %373 = expand_dims(%t313, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    tensor4_float16(%373) /* ty=tensor_float16_t[] */,
    tensor4_float16(%t410: Tensor[(?, ?, ?, ?), float16]) => %374 = expand_dims(%t410, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    tensor5_float16(%374) /* ty=tensor_float16_t[] */,
    tensor5_float16(%t55: Tensor[(?, ?, ?, ?, ?), float16]) => %375 = expand_dims(%t55, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float16] */;
    tensor6_float16(%375) /* ty=tensor_float16_t[] */,
  }
}

def @tensor_array_unstack_tensor5_helper_int64(%i26: int32, %up26: int32, %t56: Tensor[(?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %376 = equal(%i26, %up26) /* ty=bool */;
  if (%376) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %377 = take(%t56, %i26, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    %378 = tensor4_int64(%377) /* ty=tensor_int64_t[] */;
    %379 = add(%i26, 1 /* ty=int32 */) /* ty=int32 */;
    %380 = @tensor_array_unstack_tensor5_helper_int64(%379, %up26, %t56) /* ty=List[tensor_int64_t[]] */;
    Cons(%378, %380) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_stack_int8(%tensor_array25: List[tensor_int8_t[]]) -> tensor_int8_t[] {
  %381 = @map(@tensor_expand_dims_int8, %tensor_array25) /* ty=List[tensor_int8_t[]] */;
  %382 = @hd(%381) /* ty=tensor_int8_t[] */;
  %383 = @tl(%381) /* ty=List[tensor_int8_t[]] */;
  @foldl(@tensor_concatenate_int8, %382, %383) /* ty=tensor_int8_t[] */
}

def @tensor_array_stack_float16(%tensor_array26: List[tensor_float16_t[]]) -> tensor_float16_t[] {
  %384 = @map(@tensor_expand_dims_float16, %tensor_array26) /* ty=List[tensor_float16_t[]] */;
  %385 = @hd(%384) /* ty=tensor_float16_t[] */;
  %386 = @tl(%384) /* ty=List[tensor_float16_t[]] */;
  @foldl(@tensor_concatenate_float16, %385, %386) /* ty=tensor_float16_t[] */
}

def @tensor_expand_dims_int16(%x21: tensor_int16_t[]) -> tensor_int16_t[] {
  match? (%x21) {
    tensor0_int16(%t03: int16) => %387 = expand_dims(%t03, axis=0) /* ty=Tensor[(?), int16] */;
    tensor1_int16(%387) /* ty=tensor_int16_t[] */,
    tensor1_int16(%t116: Tensor[(?), int16]) => %388 = expand_dims(%t116, axis=0) /* ty=Tensor[(?, ?), int16] */;
    tensor2_int16(%388) /* ty=tensor_int16_t[] */,
    tensor2_int16(%t215: Tensor[(?, ?), int16]) => %389 = expand_dims(%t215, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    tensor3_int16(%389) /* ty=tensor_int16_t[] */,
    tensor3_int16(%t314: Tensor[(?, ?, ?), int16]) => %390 = expand_dims(%t314, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    tensor4_int16(%390) /* ty=tensor_int16_t[] */,
    tensor4_int16(%t413: Tensor[(?, ?, ?, ?), int16]) => %391 = expand_dims(%t413, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    tensor5_int16(%391) /* ty=tensor_int16_t[] */,
    tensor5_int16(%t57: Tensor[(?, ?, ?, ?, ?), int16]) => %392 = expand_dims(%t57, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int16] */;
    tensor6_int16(%392) /* ty=tensor_int16_t[] */,
  }
}

def @tensor_array_scatter_helper_float16(%ta3: List[tensor_float16_t[]], %current4: int32, %limit4: int32, %indices_3: Tensor[(?), int32], %values_3: List[tensor_float16_t[]]) -> List[tensor_float16_t[]] {
  %393 = equal(%current4, %limit4) /* ty=bool */;
  if (%393) {
    %ta3
  } else {
    %394 = take(%indices_3, %current4) /* ty=int32 */;
    %395 = @tensor_array_read_float16(%values_3, %current4) /* ty=tensor_float16_t[] */;
    %396 = @tensor_array_write_float16(%ta3, %394, %395) /* ty=List[tensor_float16_t[]] */;
    %397 = add(%current4, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float16(%396, %397, %limit4, %indices_3, %values_3) /* ty=List[tensor_float16_t[]] */
  }
}

def @tl[A](%xs7: List[A]) -> List[A] {
  match? (%xs7) {
    Cons(_, %rest2: List[A]) => %rest2,
  }
}

def @tensor_array_unstack_tensor5_float32(%tensor23: Tensor[(?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %398 = shape_of(%tensor23, dtype="int32") /* ty=Tensor[(5), int32] */;
  %399 = take(%398, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float32(0 /* ty=int32 */, %399, %tensor23) /* ty=List[tensor_float32_t[]] */
}

def @tensor_take_int32(%tensor24: tensor_int32_t[], %lower3: int32, %upper3: int32) -> tensor_int32_t[] {
  match? (%tensor24) {
    tensor1_int32(%t117: Tensor[(?), int32]) => %400 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][19], dtype="int32") /* ty=Tensor[(?), int32] */;
    %401 = take(%t117, %400) /* ty=Tensor[(?), int32] */;
    tensor1_int32(%401) /* ty=tensor_int32_t[] */,
    tensor2_int32(%t216: Tensor[(?, ?), int32]) => %402 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][20], dtype="int32") /* ty=Tensor[(?), int32] */;
    %403 = take(%t216, %402, axis=0) /* ty=Tensor[(?, ?), int32] */;
    tensor2_int32(%403) /* ty=tensor_int32_t[] */,
    tensor3_int32(%t315: Tensor[(?, ?, ?), int32]) => %404 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][21], dtype="int32") /* ty=Tensor[(?), int32] */;
    %405 = take(%t315, %404, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    tensor3_int32(%405) /* ty=tensor_int32_t[] */,
    tensor4_int32(%t414: Tensor[(?, ?, ?, ?), int32]) => %406 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][22], dtype="int32") /* ty=Tensor[(?), int32] */;
    %407 = take(%t414, %406, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    tensor4_int32(%407) /* ty=tensor_int32_t[] */,
    tensor5_int32(%t58: Tensor[(?, ?, ?, ?, ?), int32]) => %408 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][23], dtype="int32") /* ty=Tensor[(?), int32] */;
    %409 = take(%t58, %408, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    tensor5_int32(%409) /* ty=tensor_int32_t[] */,
    tensor6_int32(%t63: Tensor[(?, ?, ?, ?, ?, ?), int32]) => %410 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][24], dtype="int32") /* ty=Tensor[(?), int32] */;
    %411 = take(%t63, %410, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int32] */;
    tensor6_int32(%411) /* ty=tensor_int32_t[] */,
  }
}

def @tensor_array_unstack_tensor3_float64(%tensor25: Tensor[(?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %412 = shape_of(%tensor25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = take(%412, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float64(0 /* ty=int32 */, %413, %tensor25) /* ty=List[tensor_float64_t[]] */
}

def @foldr1[A](%f5: fn (A, A) -> A, %xs8: List[A]) -> A {
  match? (%xs8) {
    Cons(%x22: A, Nil) => %x22,
    Cons(%x23: A, %rest3: List[A]) => %414 = @foldr1(%f5, %rest3) /* ty=A */;
    %f5(%x23, %414) /* ty=A */,
  }
}

def @tensor_array_unstack_tensor4_float64(%tensor26: Tensor[(?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %415 = shape_of(%tensor26, dtype="int32") /* ty=Tensor[(4), int32] */;
  %416 = take(%415, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float64(0 /* ty=int32 */, %416, %tensor26) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor2_helper_uint16(%i27: int32, %up27: int32, %t59: Tensor[(?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %417 = equal(%i27, %up27) /* ty=bool */;
  if (%417) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %418 = take(%t59, %i27, axis=0) /* ty=Tensor[(?), uint16] */;
    %419 = tensor1_uint16(%418) /* ty=tensor_uint16_t[] */;
    %420 = add(%i27, 1 /* ty=int32 */) /* ty=int32 */;
    %421 = @tensor_array_unstack_tensor2_helper_uint16(%420, %up27, %t59) /* ty=List[tensor_uint16_t[]] */;
    Cons(%419, %421) /* ty=List[tensor_uint16_t[]] */
  }
}

def @foldr[A, B](%f6: fn (A, B) -> B, %acc2: B, %xs9: List[A]) -> B {
  match (%xs9) {
    Cons(%x24: A, %rest4: List[A]) => %422 = @foldr(%f6, %acc2, %rest4) /* ty=B */;
    %f6(%x24, %422) /* ty=B */,
    Nil => %acc2,
  }
}

def @tensor_array_unstack_tensor1_helper_float64(%i28: int32, %up28: int32, %t60: Tensor[(?), float64]) -> List[tensor_float64_t[]] {
  %423 = equal(%i28, %up28) /* ty=bool */;
  if (%423) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %424 = take(%t60, %i28) /* ty=float64 */;
    %425 = tensor0_float64(%424) /* ty=tensor_float64_t[] */;
    %426 = add(%i28, 1 /* ty=int32 */) /* ty=int32 */;
    %427 = @tensor_array_unstack_tensor1_helper_float64(%426, %up28, %t60) /* ty=List[tensor_float64_t[]] */;
    Cons(%425, %427) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_expand_dims_uint16(%x25: tensor_uint16_t[]) -> tensor_uint16_t[] {
  match? (%x25) {
    tensor0_uint16(%t04: uint16) => %428 = expand_dims(%t04, axis=0) /* ty=Tensor[(?), uint16] */;
    tensor1_uint16(%428) /* ty=tensor_uint16_t[] */,
    tensor1_uint16(%t118: Tensor[(?), uint16]) => %429 = expand_dims(%t118, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    tensor2_uint16(%429) /* ty=tensor_uint16_t[] */,
    tensor2_uint16(%t217: Tensor[(?, ?), uint16]) => %430 = expand_dims(%t217, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    tensor3_uint16(%430) /* ty=tensor_uint16_t[] */,
    tensor3_uint16(%t316: Tensor[(?, ?, ?), uint16]) => %431 = expand_dims(%t316, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    tensor4_uint16(%431) /* ty=tensor_uint16_t[] */,
    tensor4_uint16(%t415: Tensor[(?, ?, ?, ?), uint16]) => %432 = expand_dims(%t415, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    tensor5_uint16(%432) /* ty=tensor_uint16_t[] */,
    tensor5_uint16(%t510: Tensor[(?, ?, ?, ?, ?), uint16]) => %433 = expand_dims(%t510, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint16] */;
    tensor6_uint16(%433) /* ty=tensor_uint16_t[] */,
  }
}

def @tensor_array_unstack_tensor6_float16(%tensor27: Tensor[(?, ?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %434 = shape_of(%tensor27, dtype="int32") /* ty=Tensor[(6), int32] */;
  %435 = take(%434, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float16(0 /* ty=int32 */, %435, %tensor27) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_concat_int8(%tensor_array27: List[tensor_int8_t[]]) -> tensor_int8_t[] {
  match? (%tensor_array27) {
    Nil => tensor_nil_int8 /* ty=tensor_int8_t[] */,
    Cons(%hd4: tensor_int8_t[], %tl4: List[tensor_int8_t[]]) => match? (%tl4) {
      Nil => %hd4,
      _ => %436 = @tensor_array_concat_int8(%tl4) /* ty=tensor_int8_t[] */;
      @tensor_concatenate_int8(%hd4, %436) /* ty=tensor_int8_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor2_float16(%tensor28: Tensor[(?, ?), float16]) -> List[tensor_float16_t[]] {
  %437 = shape_of(%tensor28, dtype="int32") /* ty=Tensor[(2), int32] */;
  %438 = take(%437, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float16(0 /* ty=int32 */, %438, %tensor28) /* ty=List[tensor_float16_t[]] */
}

def @id[A](%x26: A) -> A {
  %x26
}

def @tensor_array_concat_int16(%tensor_array28: List[tensor_int16_t[]]) -> tensor_int16_t[] {
  match? (%tensor_array28) {
    Nil => tensor_nil_int16 /* ty=tensor_int16_t[] */,
    Cons(%hd5: tensor_int16_t[], %tl5: List[tensor_int16_t[]]) => match? (%tl5) {
      Nil => %hd5,
      _ => %439 = @tensor_array_concat_int16(%tl5) /* ty=tensor_int16_t[] */;
      @tensor_concatenate_int16(%hd5, %439) /* ty=tensor_int16_t[] */,
    },
  }
}

def @tensor_array_scatter_float16(%tensor_array29: List[tensor_float16_t[]], %indices3: Tensor[(?), int32], %values4: List[tensor_float16_t[]]) -> List[tensor_float16_t[]] {
  %440 = shape_of(%indices3, dtype="int32") /* ty=Tensor[(1), int32] */;
  %441 = take(%440, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float16(%tensor_array29, 0 /* ty=int32 */, %441, %indices3, %values4) /* ty=List[tensor_float16_t[]] */
}

def @tensor_concatenate_float32(%x27: tensor_float32_t[], %y5: tensor_float32_t[]) -> tensor_float32_t[] {
  match? (%x27) {
    tensor1_float32(%t119: Tensor[(?), float32]) => match? (%y5) {
      tensor1_float32(%t123: Tensor[(?), float32]) => %442 = (%t119, %t123);
      %443 = concatenate(%442) /* ty=Tensor[(?), float32] */;
      tensor1_float32(%443) /* ty=tensor_float32_t[] */,
    },
    tensor2_float32(%t218: Tensor[(?, ?), float32]) => match? (%y5) {
      tensor2_float32(%t223: Tensor[(?, ?), float32]) => %444 = (%t218, %t223);
      %445 = concatenate(%444) /* ty=Tensor[(?, ?), float32] */;
      tensor2_float32(%445) /* ty=tensor_float32_t[] */,
    },
    tensor3_float32(%t317: Tensor[(?, ?, ?), float32]) => match? (%y5) {
      tensor3_float32(%t323: Tensor[(?, ?, ?), float32]) => %446 = (%t317, %t323);
      %447 = concatenate(%446) /* ty=Tensor[(?, ?, ?), float32] */;
      tensor3_float32(%447) /* ty=tensor_float32_t[] */,
    },
    tensor4_float32(%t416: Tensor[(?, ?, ?, ?), float32]) => match? (%y5) {
      tensor4_float32(%t423: Tensor[(?, ?, ?, ?), float32]) => %448 = (%t416, %t423);
      %449 = concatenate(%448) /* ty=Tensor[(?, ?, ?, ?), float32] */;
      tensor4_float32(%449) /* ty=tensor_float32_t[] */,
    },
  }
}

def @map_accumr[A, B, C](%f7: fn (A, B) -> (A, C), %init1: A, %xs10: List[B]) -> (A, List[C]) {
  let %updater1: fn (B, (A, List[C])) -> (A, List[C]) = fn (%x28: B, %acc3: (A, List[C])) -> (A, List[C]) {
    %450 = %acc3.0;
    let %f_out1: (A, C) = %f7(%450, %x28) /* ty=(A, C) */;
    %451 = %f_out1.0;
    %452 = %f_out1.1;
    %453 = %acc3.1;
    %454 = Cons(%452, %453) /* ty=List[C] */;
    (%451, %454)
  };
  %455 = Nil /* ty=List[C] */;
  %456 = (%init1, %455);
  @foldr(%updater1, %456, %xs10) /* ty=(A, List[C]) */
}

def @tensor_array_unstack_tensor3_helper_float32(%i29: int32, %up29: int32, %t64: Tensor[(?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %457 = equal(%i29, %up29) /* ty=bool */;
  if (%457) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %458 = take(%t64, %i29, axis=0) /* ty=Tensor[(?, ?), float32] */;
    %459 = tensor2_float32(%458) /* ty=tensor_float32_t[] */;
    %460 = add(%i29, 1 /* ty=int32 */) /* ty=int32 */;
    %461 = @tensor_array_unstack_tensor3_helper_float32(%460, %up29, %t64) /* ty=List[tensor_float32_t[]] */;
    Cons(%459, %461) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_take_uint8(%tensor29: tensor_uint8_t[], %lower4: int32, %upper4: int32) -> tensor_uint8_t[] {
  match? (%tensor29) {
    tensor1_uint8(%t120: Tensor[(?), uint8]) => %462 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][25], dtype="int32") /* ty=Tensor[(?), int32] */;
    %463 = take(%t120, %462) /* ty=Tensor[(?), uint8] */;
    tensor1_uint8(%463) /* ty=tensor_uint8_t[] */,
    tensor2_uint8(%t219: Tensor[(?, ?), uint8]) => %464 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][26], dtype="int32") /* ty=Tensor[(?), int32] */;
    %465 = take(%t219, %464, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    tensor2_uint8(%465) /* ty=tensor_uint8_t[] */,
    tensor3_uint8(%t318: Tensor[(?, ?, ?), uint8]) => %466 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][27], dtype="int32") /* ty=Tensor[(?), int32] */;
    %467 = take(%t318, %466, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    tensor3_uint8(%467) /* ty=tensor_uint8_t[] */,
    tensor4_uint8(%t417: Tensor[(?, ?, ?, ?), uint8]) => %468 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][28], dtype="int32") /* ty=Tensor[(?), int32] */;
    %469 = take(%t417, %468, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    tensor4_uint8(%469) /* ty=tensor_uint8_t[] */,
    tensor5_uint8(%t511: Tensor[(?, ?, ?, ?, ?), uint8]) => %470 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][29], dtype="int32") /* ty=Tensor[(?), int32] */;
    %471 = take(%t511, %470, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    tensor5_uint8(%471) /* ty=tensor_uint8_t[] */,
    tensor6_uint8(%t65: Tensor[(?, ?, ?, ?, ?, ?), uint8]) => %472 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][30], dtype="int32") /* ty=Tensor[(?), int32] */;
    %473 = take(%t65, %472, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint8] */;
    tensor6_uint8(%473) /* ty=tensor_uint8_t[] */,
  }
}

def @tensor_array_unstack_tensor4_float16(%tensor30: Tensor[(?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %474 = shape_of(%tensor30, dtype="int32") /* ty=Tensor[(4), int32] */;
  %475 = take(%474, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float16(0 /* ty=int32 */, %475, %tensor30) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor6_uint16(%tensor31: Tensor[(?, ?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %476 = shape_of(%tensor31, dtype="int32") /* ty=Tensor[(6), int32] */;
  %477 = take(%476, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_uint16(0 /* ty=int32 */, %477, %tensor31) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor5_uint16(%tensor32: Tensor[(?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %478 = shape_of(%tensor32, dtype="int32") /* ty=Tensor[(5), int32] */;
  %479 = take(%478, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_uint16(0 /* ty=int32 */, %479, %tensor32) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor3_float16(%tensor33: Tensor[(?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %480 = shape_of(%tensor33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = take(%480, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float16(0 /* ty=int32 */, %481, %tensor33) /* ty=List[tensor_float16_t[]] */
}

def @hd[A](%xs11: List[A]) -> A {
  match? (%xs11) {
    Cons(%x29: A, _) => %x29,
  }
}

def @tensor_array_unstack_tensor3_helper_int64(%i30: int32, %up30: int32, %t66: Tensor[(?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %482 = equal(%i30, %up30) /* ty=bool */;
  if (%482) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %483 = take(%t66, %i30, axis=0) /* ty=Tensor[(?, ?), int64] */;
    %484 = tensor2_int64(%483) /* ty=tensor_int64_t[] */;
    %485 = add(%i30, 1 /* ty=int32 */) /* ty=int32 */;
    %486 = @tensor_array_unstack_tensor3_helper_int64(%485, %up30, %t66) /* ty=List[tensor_int64_t[]] */;
    Cons(%484, %486) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_take_float32(%tensor34: tensor_float32_t[], %lower5: int32, %upper5: int32) -> tensor_float32_t[] {
  match? (%tensor34) {
    tensor1_float32(%t124: Tensor[(?), float32]) => %487 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][31], dtype="int32") /* ty=Tensor[(?), int32] */;
    %488 = take(%t124, %487) /* ty=Tensor[(?), float32] */;
    tensor1_float32(%488) /* ty=tensor_float32_t[] */,
    tensor2_float32(%t220: Tensor[(?, ?), float32]) => %489 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][32], dtype="int32") /* ty=Tensor[(?), int32] */;
    %490 = take(%t220, %489, axis=0) /* ty=Tensor[(?, ?), float32] */;
    tensor2_float32(%490) /* ty=tensor_float32_t[] */,
    tensor3_float32(%t319: Tensor[(?, ?, ?), float32]) => %491 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][33], dtype="int32") /* ty=Tensor[(?), int32] */;
    %492 = take(%t319, %491, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    tensor3_float32(%492) /* ty=tensor_float32_t[] */,
    tensor4_float32(%t418: Tensor[(?, ?, ?, ?), float32]) => %493 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][34], dtype="int32") /* ty=Tensor[(?), int32] */;
    %494 = take(%t418, %493, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    tensor4_float32(%494) /* ty=tensor_float32_t[] */,
    tensor5_float32(%t512: Tensor[(?, ?, ?, ?, ?), float32]) => %495 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][35], dtype="int32") /* ty=Tensor[(?), int32] */;
    %496 = take(%t512, %495, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    tensor5_float32(%496) /* ty=tensor_float32_t[] */,
    tensor6_float32(%t67: Tensor[(?, ?, ?, ?, ?, ?), float32]) => %497 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][36], dtype="int32") /* ty=Tensor[(?), int32] */;
    %498 = take(%t67, %497, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float32] */;
    tensor6_float32(%498) /* ty=tensor_float32_t[] */,
  }
}

def @tensor_concatenate_float16(%x30: tensor_float16_t[], %y6: tensor_float16_t[]) -> tensor_float16_t[] {
  match? (%x30) {
    tensor1_float16(%t1110: Tensor[(?), float16]) => match? (%y6) {
      tensor1_float16(%t125: Tensor[(?), float16]) => %499 = (%t1110, %t125);
      %500 = concatenate(%499) /* ty=Tensor[(?), float16] */;
      tensor1_float16(%500) /* ty=tensor_float16_t[] */,
    },
    tensor2_float16(%t2110: Tensor[(?, ?), float16]) => match? (%y6) {
      tensor2_float16(%t224: Tensor[(?, ?), float16]) => %501 = (%t2110, %t224);
      %502 = concatenate(%501) /* ty=Tensor[(?, ?), float16] */;
      tensor2_float16(%502) /* ty=tensor_float16_t[] */,
    },
    tensor3_float16(%t3110: Tensor[(?, ?, ?), float16]) => match? (%y6) {
      tensor3_float16(%t324: Tensor[(?, ?, ?), float16]) => %503 = (%t3110, %t324);
      %504 = concatenate(%503) /* ty=Tensor[(?, ?, ?), float16] */;
      tensor3_float16(%504) /* ty=tensor_float16_t[] */,
    },
    tensor4_float16(%t419: Tensor[(?, ?, ?, ?), float16]) => match? (%y6) {
      tensor4_float16(%t424: Tensor[(?, ?, ?, ?), float16]) => %505 = (%t419, %t424);
      %506 = concatenate(%505) /* ty=Tensor[(?, ?, ?, ?), float16] */;
      tensor4_float16(%506) /* ty=tensor_float16_t[] */,
    },
  }
}

def @compose[A, B, C](%f8: fn (B) -> C, %g: fn (A) -> B) -> fn (A) -> C {
  fn (%x31: A) -> C {
    %507 = %g(%x31) /* ty=B */;
    %f8(%507) /* ty=C */
  }
}

def @filter[A](%f9: fn (A) -> bool, %xs12: List[A]) -> List[A] {
  match (%xs12) {
    Cons(%x32: A, %rest5: List[A]) => %508 = %f9(%x32) /* ty=bool */;
    if (%508) {
      %509 = @filter(%f9, %rest5) /* ty=List[A] */;
      Cons(%x32, %509) /* ty=List[A] */
    } else {
      @filter(%f9, %rest5) /* ty=List[A] */
    },
    Nil => Nil /* ty=List[A] */,
  }
}

def @tensor_take_uint16(%tensor35: tensor_uint16_t[], %lower6: int32, %upper6: int32) -> tensor_uint16_t[] {
  match? (%tensor35) {
    tensor1_uint16(%t126: Tensor[(?), uint16]) => %510 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][37], dtype="int32") /* ty=Tensor[(?), int32] */;
    %511 = take(%t126, %510) /* ty=Tensor[(?), uint16] */;
    tensor1_uint16(%511) /* ty=tensor_uint16_t[] */,
    tensor2_uint16(%t225: Tensor[(?, ?), uint16]) => %512 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][38], dtype="int32") /* ty=Tensor[(?), int32] */;
    %513 = take(%t225, %512, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    tensor2_uint16(%513) /* ty=tensor_uint16_t[] */,
    tensor3_uint16(%t320: Tensor[(?, ?, ?), uint16]) => %514 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][39], dtype="int32") /* ty=Tensor[(?), int32] */;
    %515 = take(%t320, %514, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    tensor3_uint16(%515) /* ty=tensor_uint16_t[] */,
    tensor4_uint16(%t420: Tensor[(?, ?, ?, ?), uint16]) => %516 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][40], dtype="int32") /* ty=Tensor[(?), int32] */;
    %517 = take(%t420, %516, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    tensor4_uint16(%517) /* ty=tensor_uint16_t[] */,
    tensor5_uint16(%t513: Tensor[(?, ?, ?, ?, ?), uint16]) => %518 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][41], dtype="int32") /* ty=Tensor[(?), int32] */;
    %519 = take(%t513, %518, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    tensor5_uint16(%519) /* ty=tensor_uint16_t[] */,
    tensor6_uint16(%t68: Tensor[(?, ?, ?, ?, ?, ?), uint16]) => %520 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][42], dtype="int32") /* ty=Tensor[(?), int32] */;
    %521 = take(%t68, %520, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint16] */;
    tensor6_uint16(%521) /* ty=tensor_uint16_t[] */,
  }
}

def @tensor_array_float32(%x33: int32) -> List[tensor_float32_t[]] {
  %522 = equal(%x33, 0 /* ty=int32 */) /* ty=bool */;
  if (%522) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %523 = tensor_nil_float32 /* ty=tensor_float32_t[] */;
    %524 = subtract(%x33, 1 /* ty=int32 */) /* ty=int32 */;
    %525 = @tensor_array_float32(%524) /* ty=List[tensor_float32_t[]] */;
    Cons(%523, %525) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor1_int32(%tensor36: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %526 = shape_of(%tensor36, dtype="int32") /* ty=Tensor[(1), int32] */;
  %527 = take(%526, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int32(0 /* ty=int32 */, %527, %tensor36) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_split_int32(%tensor_array30: List[tensor_int32_t[]], %value5: tensor_int32_t[], %lengths8: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %528 = shape_of(%lengths8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %529 = take(%528, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int32(%tensor_array30, %value5, 0 /* ty=int32 */, 0 /* ty=int32 */, %529, %lengths8) /* ty=List[tensor_int32_t[]] */
}

def @flip[A, B, C](%f10: fn (A, B) -> C) -> fn (B, A) -> C {
  fn (%b: B, %a: A) -> C {
    %f10(%a, %b) /* ty=C */
  }
}

def @tensor_array_unstack_tensor2_helper_int8(%i31: int32, %up31: int32, %t69: Tensor[(?, ?), int8]) -> List[tensor_int8_t[]] {
  %530 = equal(%i31, %up31) /* ty=bool */;
  if (%530) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %531 = take(%t69, %i31, axis=0) /* ty=Tensor[(?), int8] */;
    %532 = tensor1_int8(%531) /* ty=tensor_int8_t[] */;
    %533 = add(%i31, 1 /* ty=int32 */) /* ty=int32 */;
    %534 = @tensor_array_unstack_tensor2_helper_int8(%533, %up31, %t69) /* ty=List[tensor_int8_t[]] */;
    Cons(%532, %534) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_write_float32(%tensor_array31: List[tensor_float32_t[]], %x34: int32, %v6: tensor_float32_t[]) -> List[tensor_float32_t[]] {
  @update(%tensor_array31, %x34, %v6) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_read_uint16(%tensor_array32: List[tensor_uint16_t[]], %x35: int32) -> tensor_uint16_t[] {
  @nth(%tensor_array32, %x35) /* ty=tensor_uint16_t[] */
}

def @tensor_expand_dims_int8(%x36: tensor_int8_t[]) -> tensor_int8_t[] {
  match? (%x36) {
    tensor0_int8(%t05: int8) => %535 = expand_dims(%t05, axis=0) /* ty=Tensor[(?), int8] */;
    tensor1_int8(%535) /* ty=tensor_int8_t[] */,
    tensor1_int8(%t127: Tensor[(?), int8]) => %536 = expand_dims(%t127, axis=0) /* ty=Tensor[(?, ?), int8] */;
    tensor2_int8(%536) /* ty=tensor_int8_t[] */,
    tensor2_int8(%t226: Tensor[(?, ?), int8]) => %537 = expand_dims(%t226, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    tensor3_int8(%537) /* ty=tensor_int8_t[] */,
    tensor3_int8(%t325: Tensor[(?, ?, ?), int8]) => %538 = expand_dims(%t325, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    tensor4_int8(%538) /* ty=tensor_int8_t[] */,
    tensor4_int8(%t425: Tensor[(?, ?, ?, ?), int8]) => %539 = expand_dims(%t425, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    tensor5_int8(%539) /* ty=tensor_int8_t[] */,
    tensor5_int8(%t514: Tensor[(?, ?, ?, ?, ?), int8]) => %540 = expand_dims(%t514, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int8] */;
    tensor6_int8(%540) /* ty=tensor_int8_t[] */,
  }
}

def @tensor_array_unstack_tensor1_helper_uint16(%i32: int32, %up32: int32, %t70: Tensor[(?), uint16]) -> List[tensor_uint16_t[]] {
  %541 = equal(%i32, %up32) /* ty=bool */;
  if (%541) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %542 = take(%t70, %i32) /* ty=uint16 */;
    %543 = tensor0_uint16(%542) /* ty=tensor_uint16_t[] */;
    %544 = add(%i32, 1 /* ty=int32 */) /* ty=int32 */;
    %545 = @tensor_array_unstack_tensor1_helper_uint16(%544, %up32, %t70) /* ty=List[tensor_uint16_t[]] */;
    Cons(%543, %545) /* ty=List[tensor_uint16_t[]] */
  }
}

def @ta_split_helper_float32(%tensor_array33: List[tensor_float32_t[]], %value14: tensor_float32_t[], %offset14: int32, %current14: int32, %limit14: int32, %lengths9: Tensor[(?), int32]) -> List[tensor_float32_t[]] {
  %546 = equal(%current14, %limit14) /* ty=bool */;
  if (%546) {
    %tensor_array33
  } else {
    %547 = take(%lengths9, %current14) /* ty=int32 */;
    %548 = add(%offset14, %547) /* ty=int32 */;
    %549 = add(%current14, 1 /* ty=int32 */) /* ty=int32 */;
    %550 = @ta_split_helper_float32(%tensor_array33, %value14, %548, %549, %limit14, %lengths9) /* ty=List[tensor_float32_t[]] */;
    %551 = take(%lengths9, %current14) /* ty=int32 */;
    %552 = add(%551, %offset14) /* ty=int32 */;
    %553 = @tensor_take_float32(%value14, %offset14, %552) /* ty=tensor_float32_t[] */;
    @tensor_array_write_float32(%550, %current14, %553) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_write_float64(%tensor_array34: List[tensor_float64_t[]], %x37: int32, %v7: tensor_float64_t[]) -> List[tensor_float64_t[]] {
  @update(%tensor_array34, %x37, %v7) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor2_float32(%tensor37: Tensor[(?, ?), float32]) -> List[tensor_float32_t[]] {
  %554 = shape_of(%tensor37, dtype="int32") /* ty=Tensor[(2), int32] */;
  %555 = take(%554, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float32(0 /* ty=int32 */, %555, %tensor37) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_concat_float32(%tensor_array35: List[tensor_float32_t[]]) -> tensor_float32_t[] {
  match? (%tensor_array35) {
    Nil => tensor_nil_float32 /* ty=tensor_float32_t[] */,
    Cons(%hd6: tensor_float32_t[], %tl6: List[tensor_float32_t[]]) => match? (%tl6) {
      Nil => %hd6,
      _ => %556 = @tensor_array_concat_float32(%tl6) /* ty=tensor_float32_t[] */;
      @tensor_concatenate_float32(%hd6, %556) /* ty=tensor_float32_t[] */,
    },
  }
}

def @tensor_array_read_float64(%tensor_array36: List[tensor_float64_t[]], %x38: int32) -> tensor_float64_t[] {
  @nth(%tensor_array36, %x38) /* ty=tensor_float64_t[] */
}

def @tensor_array_split_int8(%tensor_array37: List[tensor_int8_t[]], %value6: tensor_int8_t[], %lengths10: Tensor[(?), int32]) -> List[tensor_int8_t[]] {
  %557 = shape_of(%lengths10, dtype="int32") /* ty=Tensor[(1), int32] */;
  %558 = take(%557, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int8(%tensor_array37, %value6, 0 /* ty=int32 */, 0 /* ty=int32 */, %558, %lengths10) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_scatter_int64(%tensor_array38: List[tensor_int64_t[]], %indices4: Tensor[(?), int32], %values5: List[tensor_int64_t[]]) -> List[tensor_int64_t[]] {
  %559 = shape_of(%indices4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %560 = take(%559, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int64(%tensor_array38, 0 /* ty=int32 */, %560, %indices4, %values5) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_concat_uint16(%tensor_array39: List[tensor_uint16_t[]]) -> tensor_uint16_t[] {
  match? (%tensor_array39) {
    Nil => tensor_nil_uint16 /* ty=tensor_uint16_t[] */,
    Cons(%hd7: tensor_uint16_t[], %tl7: List[tensor_uint16_t[]]) => match? (%tl7) {
      Nil => %hd7,
      _ => %561 = @tensor_array_concat_uint16(%tl7) /* ty=tensor_uint16_t[] */;
      @tensor_concatenate_uint16(%hd7, %561) /* ty=tensor_uint16_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor1_float32(%tensor38: Tensor[(?), float32]) -> List[tensor_float32_t[]] {
  %562 = shape_of(%tensor38, dtype="int32") /* ty=Tensor[(1), int32] */;
  %563 = take(%562, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float32(0 /* ty=int32 */, %563, %tensor38) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor6_int8(%tensor39: Tensor[(?, ?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %564 = shape_of(%tensor39, dtype="int32") /* ty=Tensor[(6), int32] */;
  %565 = take(%564, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int8(0 /* ty=int32 */, %565, %tensor39) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor6_float32(%tensor40: Tensor[(?, ?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %566 = shape_of(%tensor40, dtype="int32") /* ty=Tensor[(6), int32] */;
  %567 = take(%566, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float32(0 /* ty=int32 */, %567, %tensor40) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor5_uint8(%tensor41: Tensor[(?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %568 = shape_of(%tensor41, dtype="int32") /* ty=Tensor[(5), int32] */;
  %569 = take(%568, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_uint8(0 /* ty=int32 */, %569, %tensor41) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_stack_uint16(%tensor_array40: List[tensor_uint16_t[]]) -> tensor_uint16_t[] {
  %570 = @map(@tensor_expand_dims_uint16, %tensor_array40) /* ty=List[tensor_uint16_t[]] */;
  %571 = @hd(%570) /* ty=tensor_uint16_t[] */;
  %572 = @tl(%570) /* ty=List[tensor_uint16_t[]] */;
  @foldl(@tensor_concatenate_uint16, %571, %572) /* ty=tensor_uint16_t[] */
}

def @tensor_array_split_int16(%tensor_array41: List[tensor_int16_t[]], %value7: tensor_int16_t[], %lengths11: Tensor[(?), int32]) -> List[tensor_int16_t[]] {
  %573 = shape_of(%lengths11, dtype="int32") /* ty=Tensor[(1), int32] */;
  %574 = take(%573, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int16(%tensor_array41, %value7, 0 /* ty=int32 */, 0 /* ty=int32 */, %574, %lengths11) /* ty=List[tensor_int16_t[]] */
}

def @tensor_concatenate_int32(%x39: tensor_int32_t[], %y7: tensor_int32_t[]) -> tensor_int32_t[] {
  match? (%x39) {
    tensor1_int32(%t1111: Tensor[(?), int32]) => match? (%y7) {
      tensor1_int32(%t128: Tensor[(?), int32]) => %575 = (%t1111, %t128);
      %576 = concatenate(%575) /* ty=Tensor[(?), int32] */;
      tensor1_int32(%576) /* ty=tensor_int32_t[] */,
    },
    tensor2_int32(%t2111: Tensor[(?, ?), int32]) => match? (%y7) {
      tensor2_int32(%t227: Tensor[(?, ?), int32]) => %577 = (%t2111, %t227);
      %578 = concatenate(%577) /* ty=Tensor[(?, ?), int32] */;
      tensor2_int32(%578) /* ty=tensor_int32_t[] */,
    },
    tensor3_int32(%t3111: Tensor[(?, ?, ?), int32]) => match? (%y7) {
      tensor3_int32(%t326: Tensor[(?, ?, ?), int32]) => %579 = (%t3111, %t326);
      %580 = concatenate(%579) /* ty=Tensor[(?, ?, ?), int32] */;
      tensor3_int32(%580) /* ty=tensor_int32_t[] */,
    },
    tensor4_int32(%t4110: Tensor[(?, ?, ?, ?), int32]) => match? (%y7) {
      tensor4_int32(%t426: Tensor[(?, ?, ?, ?), int32]) => %581 = (%t4110, %t426);
      %582 = concatenate(%581) /* ty=Tensor[(?, ?, ?, ?), int32] */;
      tensor4_int32(%582) /* ty=tensor_int32_t[] */,
    },
  }
}

def @tmap[A, B](%f11: fn (A) -> B, %t71: Tree[A]) -> Tree[B] {
  match (%t71) {
    Rose(%v8: A, %sub_trees1: List[Tree[A]]) => {
      let %list_f: fn (Tree[A]) -> Tree[B] = fn (%tt: Tree[A]) -> Tree[B] {
        @tmap(%f11, %tt) /* ty=Tree[B] */
      };
      %583 = %f11(%v8) /* ty=B */;
      %584 = @map(%list_f, %sub_trees1) /* ty=List[Tree[B]] */;
      Rose(%583, %584) /* ty=Tree[B] */
    },
  }
}

def @tensor_array_unstack_tensor2_uint8(%tensor42: Tensor[(?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %585 = shape_of(%tensor42, dtype="int32") /* ty=Tensor[(2), int32] */;
  %586 = take(%585, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_uint8(0 /* ty=int32 */, %586, %tensor42) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor4_helper_float32(%i33: int32, %up33: int32, %t72: Tensor[(?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %587 = equal(%i33, %up33) /* ty=bool */;
  if (%587) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %588 = take(%t72, %i33, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    %589 = tensor3_float32(%588) /* ty=tensor_float32_t[] */;
    %590 = add(%i33, 1 /* ty=int32 */) /* ty=int32 */;
    %591 = @tensor_array_unstack_tensor4_helper_float32(%590, %up33, %t72) /* ty=List[tensor_float32_t[]] */;
    Cons(%589, %591) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_scatter_helper_float64(%ta4: List[tensor_float64_t[]], %current5: int32, %limit5: int32, %indices_4: Tensor[(?), int32], %values_4: List[tensor_float64_t[]]) -> List[tensor_float64_t[]] {
  %592 = equal(%current5, %limit5) /* ty=bool */;
  if (%592) {
    %ta4
  } else {
    %593 = take(%indices_4, %current5) /* ty=int32 */;
    %594 = @tensor_array_read_float64(%values_4, %current5) /* ty=tensor_float64_t[] */;
    %595 = @tensor_array_write_float64(%ta4, %593, %594) /* ty=List[tensor_float64_t[]] */;
    %596 = add(%current5, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float64(%595, %596, %limit5, %indices_4, %values_4) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_int32(%i34: int32, %up34: int32, %t73: Tensor[(?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %597 = equal(%i34, %up34) /* ty=bool */;
  if (%597) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %598 = take(%t73, %i34, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    %599 = tensor4_int32(%598) /* ty=tensor_int32_t[] */;
    %600 = add(%i34, 1 /* ty=int32 */) /* ty=int32 */;
    %601 = @tensor_array_unstack_tensor5_helper_int32(%600, %up34, %t73) /* ty=List[tensor_int32_t[]] */;
    Cons(%599, %601) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_split_float32(%tensor_array42: List[tensor_float32_t[]], %value8: tensor_float32_t[], %lengths12: Tensor[(?), int32]) -> List[tensor_float32_t[]] {
  %602 = shape_of(%lengths12, dtype="int32") /* ty=Tensor[(1), int32] */;
  %603 = take(%602, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float32(%tensor_array42, %value8, 0 /* ty=int32 */, 0 /* ty=int32 */, %603, %lengths12) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor2_int32(%tensor43: Tensor[(?, ?), int32]) -> List[tensor_int32_t[]] {
  %604 = shape_of(%tensor43, dtype="int32") /* ty=Tensor[(2), int32] */;
  %605 = take(%604, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int32(0 /* ty=int32 */, %605, %tensor43) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int32(%i35: int32, %up35: int32, %t74: Tensor[(?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %606 = equal(%i35, %up35) /* ty=bool */;
  if (%606) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %607 = take(%t74, %i35, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    %608 = tensor3_int32(%607) /* ty=tensor_int32_t[] */;
    %609 = add(%i35, 1 /* ty=int32 */) /* ty=int32 */;
    %610 = @tensor_array_unstack_tensor4_helper_int32(%609, %up35, %t74) /* ty=List[tensor_int32_t[]] */;
    Cons(%608, %610) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_expand_dims_int32(%x40: tensor_int32_t[]) -> tensor_int32_t[] {
  match? (%x40) {
    tensor0_int32(%t06: int32) => %611 = expand_dims(%t06, axis=0) /* ty=Tensor[(?), int32] */;
    tensor1_int32(%611) /* ty=tensor_int32_t[] */,
    tensor1_int32(%t129: Tensor[(?), int32]) => %612 = expand_dims(%t129, axis=0) /* ty=Tensor[(?, ?), int32] */;
    tensor2_int32(%612) /* ty=tensor_int32_t[] */,
    tensor2_int32(%t228: Tensor[(?, ?), int32]) => %613 = expand_dims(%t228, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    tensor3_int32(%613) /* ty=tensor_int32_t[] */,
    tensor3_int32(%t327: Tensor[(?, ?, ?), int32]) => %614 = expand_dims(%t327, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    tensor4_int32(%614) /* ty=tensor_int32_t[] */,
    tensor4_int32(%t427: Tensor[(?, ?, ?, ?), int32]) => %615 = expand_dims(%t427, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    tensor5_int32(%615) /* ty=tensor_int32_t[] */,
    tensor5_int32(%t515: Tensor[(?, ?, ?, ?, ?), int32]) => %616 = expand_dims(%t515, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int32] */;
    tensor6_int32(%616) /* ty=tensor_int32_t[] */,
  }
}

def @tensor_array_stack_float32(%tensor_array43: List[tensor_float32_t[]]) -> tensor_float32_t[] {
  %617 = @map(@tensor_expand_dims_float32, %tensor_array43) /* ty=List[tensor_float32_t[]] */;
  %618 = @hd(%617) /* ty=tensor_float32_t[] */;
  %619 = @tl(%617) /* ty=List[tensor_float32_t[]] */;
  @foldl(@tensor_concatenate_float32, %618, %619) /* ty=tensor_float32_t[] */
}

def @tensor_array_int32(%x41: int32) -> List[tensor_int32_t[]] {
  %620 = equal(%x41, 0 /* ty=int32 */) /* ty=bool */;
  if (%620) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %621 = tensor_nil_int32 /* ty=tensor_int32_t[] */;
    %622 = subtract(%x41, 1 /* ty=int32 */) /* ty=int32 */;
    %623 = @tensor_array_int32(%622) /* ty=List[tensor_int32_t[]] */;
    Cons(%621, %623) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_int32(%i36: int32, %up36: int32, %t75: Tensor[(?, ?), int32]) -> List[tensor_int32_t[]] {
  %624 = equal(%i36, %up36) /* ty=bool */;
  if (%624) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %625 = take(%t75, %i36, axis=0) /* ty=Tensor[(?), int32] */;
    %626 = tensor1_int32(%625) /* ty=tensor_int32_t[] */;
    %627 = add(%i36, 1 /* ty=int32 */) /* ty=int32 */;
    %628 = @tensor_array_unstack_tensor2_helper_int32(%627, %up36, %t75) /* ty=List[tensor_int32_t[]] */;
    Cons(%626, %628) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_int16(%i37: int32, %up37: int32, %t76: Tensor[(?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %629 = equal(%i37, %up37) /* ty=bool */;
  if (%629) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %630 = take(%t76, %i37, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    %631 = tensor4_int16(%630) /* ty=tensor_int16_t[] */;
    %632 = add(%i37, 1 /* ty=int32 */) /* ty=int32 */;
    %633 = @tensor_array_unstack_tensor5_helper_int16(%632, %up37, %t76) /* ty=List[tensor_int16_t[]] */;
    Cons(%631, %633) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_int32(%i38: int32, %up38: int32, %t77: Tensor[(?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %634 = equal(%i38, %up38) /* ty=bool */;
  if (%634) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %635 = take(%t77, %i38, axis=0) /* ty=Tensor[(?, ?), int32] */;
    %636 = tensor2_int32(%635) /* ty=tensor_int32_t[] */;
    %637 = add(%i38, 1 /* ty=int32 */) /* ty=int32 */;
    %638 = @tensor_array_unstack_tensor3_helper_int32(%637, %up38, %t77) /* ty=List[tensor_int32_t[]] */;
    Cons(%636, %638) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_scatter_helper_int8(%ta5: List[tensor_int8_t[]], %current6: int32, %limit6: int32, %indices_5: Tensor[(?), int32], %values_5: List[tensor_int8_t[]]) -> List[tensor_int8_t[]] {
  %639 = equal(%current6, %limit6) /* ty=bool */;
  if (%639) {
    %ta5
  } else {
    %640 = take(%indices_5, %current6) /* ty=int32 */;
    %641 = @tensor_array_read_int8(%values_5, %current6) /* ty=tensor_int8_t[] */;
    %642 = @tensor_array_write_int8(%ta5, %640, %641) /* ty=List[tensor_int8_t[]] */;
    %643 = add(%current6, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int8(%642, %643, %limit6, %indices_5, %values_5) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int32(%tensor44: Tensor[(?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %644 = shape_of(%tensor44, dtype="int32") /* ty=Tensor[(5), int32] */;
  %645 = take(%644, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int32(0 /* ty=int32 */, %645, %tensor44) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor6_int32(%tensor45: Tensor[(?, ?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %646 = shape_of(%tensor45, dtype="int32") /* ty=Tensor[(6), int32] */;
  %647 = take(%646, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int32(0 /* ty=int32 */, %647, %tensor45) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor6_float64(%tensor46: Tensor[(?, ?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %648 = shape_of(%tensor46, dtype="int32") /* ty=Tensor[(6), int32] */;
  %649 = take(%648, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float64(0 /* ty=int32 */, %649, %tensor46) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_read_uint8(%tensor_array44: List[tensor_uint8_t[]], %x42: int32) -> tensor_uint8_t[] {
  @nth(%tensor_array44, %x42) /* ty=tensor_uint8_t[] */
}

def @tensor_array_unstack_tensor4_helper_int16(%i39: int32, %up39: int32, %t78: Tensor[(?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %650 = equal(%i39, %up39) /* ty=bool */;
  if (%650) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %651 = take(%t78, %i39, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    %652 = tensor3_int16(%651) /* ty=tensor_int16_t[] */;
    %653 = add(%i39, 1 /* ty=int32 */) /* ty=int32 */;
    %654 = @tensor_array_unstack_tensor4_helper_int16(%653, %up39, %t78) /* ty=List[tensor_int16_t[]] */;
    Cons(%652, %654) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_expand_dims_int64(%x43: tensor_int64_t[]) -> tensor_int64_t[] {
  match? (%x43) {
    tensor0_int64(%t07: int64) => %655 = expand_dims(%t07, axis=0) /* ty=Tensor[(?), int64] */;
    tensor1_int64(%655) /* ty=tensor_int64_t[] */,
    tensor1_int64(%t130: Tensor[(?), int64]) => %656 = expand_dims(%t130, axis=0) /* ty=Tensor[(?, ?), int64] */;
    tensor2_int64(%656) /* ty=tensor_int64_t[] */,
    tensor2_int64(%t229: Tensor[(?, ?), int64]) => %657 = expand_dims(%t229, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    tensor3_int64(%657) /* ty=tensor_int64_t[] */,
    tensor3_int64(%t328: Tensor[(?, ?, ?), int64]) => %658 = expand_dims(%t328, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    tensor4_int64(%658) /* ty=tensor_int64_t[] */,
    tensor4_int64(%t428: Tensor[(?, ?, ?, ?), int64]) => %659 = expand_dims(%t428, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    tensor5_int64(%659) /* ty=tensor_int64_t[] */,
    tensor5_int64(%t516: Tensor[(?, ?, ?, ?, ?), int64]) => %660 = expand_dims(%t516, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int64] */;
    tensor6_int64(%660) /* ty=tensor_int64_t[] */,
  }
}

def @tensor_array_scatter_helper_int32(%ta6: List[tensor_int32_t[]], %current7: int32, %limit7: int32, %indices_6: Tensor[(?), int32], %values_6: List[tensor_int32_t[]]) -> List[tensor_int32_t[]] {
  %661 = equal(%current7, %limit7) /* ty=bool */;
  if (%661) {
    %ta6
  } else {
    %662 = take(%indices_6, %current7) /* ty=int32 */;
    %663 = @tensor_array_read_int32(%values_6, %current7) /* ty=tensor_int32_t[] */;
    %664 = @tensor_array_write_int32(%ta6, %662, %663) /* ty=List[tensor_int32_t[]] */;
    %665 = add(%current7, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int32(%664, %665, %limit7, %indices_6, %values_6) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_scatter_uint16(%tensor_array45: List[tensor_uint16_t[]], %indices5: Tensor[(?), int32], %values6: List[tensor_uint16_t[]]) -> List[tensor_uint16_t[]] {
  %666 = shape_of(%indices5, dtype="int32") /* ty=Tensor[(1), int32] */;
  %667 = take(%666, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_uint16(%tensor_array45, 0 /* ty=int32 */, %667, %indices5, %values6) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_scatter_int32(%tensor_array46: List[tensor_int32_t[]], %indices6: Tensor[(?), int32], %values7: List[tensor_int32_t[]]) -> List[tensor_int32_t[]] {
  %668 = shape_of(%indices6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %669 = take(%668, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int32(%tensor_array46, 0 /* ty=int32 */, %669, %indices6, %values7) /* ty=List[tensor_int32_t[]] */
}

def @rev[A](%xs13: List[A]) -> List[A] {
  %670 = @flip(Cons) /* ty=fn (List[A], A) -> List[A] */;
  %671 = Nil /* ty=List[A] */;
  @foldl(%670, %671, %xs13) /* ty=List[A] */
}

def @tensor_array_unstack_tensor4_uint8(%tensor47: Tensor[(?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %672 = shape_of(%tensor47, dtype="int32") /* ty=Tensor[(4), int32] */;
  %673 = take(%672, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_uint8(0 /* ty=int32 */, %673, %tensor47) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_expand_dims_uint8(%x44: tensor_uint8_t[]) -> tensor_uint8_t[] {
  match? (%x44) {
    tensor0_uint8(%t08: uint8) => %674 = expand_dims(%t08, axis=0) /* ty=Tensor[(?), uint8] */;
    tensor1_uint8(%674) /* ty=tensor_uint8_t[] */,
    tensor1_uint8(%t131: Tensor[(?), uint8]) => %675 = expand_dims(%t131, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    tensor2_uint8(%675) /* ty=tensor_uint8_t[] */,
    tensor2_uint8(%t230: Tensor[(?, ?), uint8]) => %676 = expand_dims(%t230, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    tensor3_uint8(%676) /* ty=tensor_uint8_t[] */,
    tensor3_uint8(%t329: Tensor[(?, ?, ?), uint8]) => %677 = expand_dims(%t329, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    tensor4_uint8(%677) /* ty=tensor_uint8_t[] */,
    tensor4_uint8(%t429: Tensor[(?, ?, ?, ?), uint8]) => %678 = expand_dims(%t429, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    tensor5_uint8(%678) /* ty=tensor_uint8_t[] */,
    tensor5_uint8(%t517: Tensor[(?, ?, ?, ?, ?), uint8]) => %679 = expand_dims(%t517, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint8] */;
    tensor6_uint8(%679) /* ty=tensor_uint8_t[] */,
  }
}

def @tensor_array_unstack_tensor4_float32(%tensor48: Tensor[(?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %680 = shape_of(%tensor48, dtype="int32") /* ty=Tensor[(4), int32] */;
  %681 = take(%680, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float32(0 /* ty=int32 */, %681, %tensor48) /* ty=List[tensor_float32_t[]] */
}

def @tensor_concatenate_int8(%x45: tensor_int8_t[], %y8: tensor_int8_t[]) -> tensor_int8_t[] {
  match? (%x45) {
    tensor1_int8(%t1112: Tensor[(?), int8]) => match? (%y8) {
      tensor1_int8(%t1210: Tensor[(?), int8]) => %682 = (%t1112, %t1210);
      %683 = concatenate(%682) /* ty=Tensor[(?), int8] */;
      tensor1_int8(%683) /* ty=tensor_int8_t[] */,
    },
    tensor2_int8(%t2112: Tensor[(?, ?), int8]) => match? (%y8) {
      tensor2_int8(%t2210: Tensor[(?, ?), int8]) => %684 = (%t2112, %t2210);
      %685 = concatenate(%684) /* ty=Tensor[(?, ?), int8] */;
      tensor2_int8(%685) /* ty=tensor_int8_t[] */,
    },
    tensor3_int8(%t3112: Tensor[(?, ?, ?), int8]) => match? (%y8) {
      tensor3_int8(%t3210: Tensor[(?, ?, ?), int8]) => %686 = (%t3112, %t3210);
      %687 = concatenate(%686) /* ty=Tensor[(?, ?, ?), int8] */;
      tensor3_int8(%687) /* ty=tensor_int8_t[] */,
    },
    tensor4_int8(%t4111: Tensor[(?, ?, ?, ?), int8]) => match? (%y8) {
      tensor4_int8(%t4210: Tensor[(?, ?, ?, ?), int8]) => %688 = (%t4111, %t4210);
      %689 = concatenate(%688) /* ty=Tensor[(?, ?, ?, ?), int8] */;
      tensor4_int8(%689) /* ty=tensor_int8_t[] */,
    },
  }
}

def @tensor_concatenate_uint8(%x46: tensor_uint8_t[], %y9: tensor_uint8_t[]) -> tensor_uint8_t[] {
  match? (%x46) {
    tensor1_uint8(%t1113: Tensor[(?), uint8]) => match? (%y9) {
      tensor1_uint8(%t1211: Tensor[(?), uint8]) => %690 = (%t1113, %t1211);
      %691 = concatenate(%690) /* ty=Tensor[(?), uint8] */;
      tensor1_uint8(%691) /* ty=tensor_uint8_t[] */,
    },
    tensor2_uint8(%t2113: Tensor[(?, ?), uint8]) => match? (%y9) {
      tensor2_uint8(%t2211: Tensor[(?, ?), uint8]) => %692 = (%t2113, %t2211);
      %693 = concatenate(%692) /* ty=Tensor[(?, ?), uint8] */;
      tensor2_uint8(%693) /* ty=tensor_uint8_t[] */,
    },
    tensor3_uint8(%t3113: Tensor[(?, ?, ?), uint8]) => match? (%y9) {
      tensor3_uint8(%t3211: Tensor[(?, ?, ?), uint8]) => %694 = (%t3113, %t3211);
      %695 = concatenate(%694) /* ty=Tensor[(?, ?, ?), uint8] */;
      tensor3_uint8(%695) /* ty=tensor_uint8_t[] */,
    },
    tensor4_uint8(%t4112: Tensor[(?, ?, ?, ?), uint8]) => match? (%y9) {
      tensor4_uint8(%t4211: Tensor[(?, ?, ?, ?), uint8]) => %696 = (%t4112, %t4211);
      %697 = concatenate(%696) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
      tensor4_uint8(%697) /* ty=tensor_uint8_t[] */,
    },
  }
}

def @tensor_array_write_uint8(%tensor_array47: List[tensor_uint8_t[]], %x47: int32, %v9: tensor_uint8_t[]) -> List[tensor_uint8_t[]] {
  @update(%tensor_array47, %x47, %v9) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_read_int64(%tensor_array48: List[tensor_int64_t[]], %x48: int32) -> tensor_int64_t[] {
  @nth(%tensor_array48, %x48) /* ty=tensor_int64_t[] */
}

def @tensor_array_unstack_tensor2_helper_uint8(%i40: int32, %up40: int32, %t79: Tensor[(?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %698 = equal(%i40, %up40) /* ty=bool */;
  if (%698) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %699 = take(%t79, %i40, axis=0) /* ty=Tensor[(?), uint8] */;
    %700 = tensor1_uint8(%699) /* ty=tensor_uint8_t[] */;
    %701 = add(%i40, 1 /* ty=int32 */) /* ty=int32 */;
    %702 = @tensor_array_unstack_tensor2_helper_uint8(%701, %up40, %t79) /* ty=List[tensor_uint8_t[]] */;
    Cons(%700, %702) /* ty=List[tensor_uint8_t[]] */
  }
}

def @ta_split_helper_uint8(%tensor_array49: List[tensor_uint8_t[]], %value15: tensor_uint8_t[], %offset15: int32, %current15: int32, %limit15: int32, %lengths13: Tensor[(?), int32]) -> List[tensor_uint8_t[]] {
  %703 = equal(%current15, %limit15) /* ty=bool */;
  if (%703) {
    %tensor_array49
  } else {
    %704 = take(%lengths13, %current15) /* ty=int32 */;
    %705 = add(%offset15, %704) /* ty=int32 */;
    %706 = add(%current15, 1 /* ty=int32 */) /* ty=int32 */;
    %707 = @ta_split_helper_uint8(%tensor_array49, %value15, %705, %706, %limit15, %lengths13) /* ty=List[tensor_uint8_t[]] */;
    %708 = take(%lengths13, %current15) /* ty=int32 */;
    %709 = add(%708, %offset15) /* ty=int32 */;
    %710 = @tensor_take_uint8(%value15, %offset15, %709) /* ty=tensor_uint8_t[] */;
    @tensor_array_write_uint8(%707, %current15, %710) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_int32(%i41: int32, %up41: int32, %t80: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %711 = equal(%i41, %up41) /* ty=bool */;
  if (%711) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %712 = take(%t80, %i41) /* ty=int32 */;
    %713 = tensor0_int32(%712) /* ty=tensor_int32_t[] */;
    %714 = add(%i41, 1 /* ty=int32 */) /* ty=int32 */;
    %715 = @tensor_array_unstack_tensor1_helper_int32(%714, %up41, %t80) /* ty=List[tensor_int32_t[]] */;
    Cons(%713, %715) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_uint8(%i42: int32, %up42: int32, %t81: Tensor[(?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %716 = equal(%i42, %up42) /* ty=bool */;
  if (%716) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %717 = take(%t81, %i42, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    %718 = tensor2_uint8(%717) /* ty=tensor_uint8_t[] */;
    %719 = add(%i42, 1 /* ty=int32 */) /* ty=int32 */;
    %720 = @tensor_array_unstack_tensor3_helper_uint8(%719, %up42, %t81) /* ty=List[tensor_uint8_t[]] */;
    Cons(%718, %720) /* ty=List[tensor_uint8_t[]] */
  }
}

def @ta_split_helper_float64(%tensor_array50: List[tensor_float64_t[]], %value16: tensor_float64_t[], %offset16: int32, %current16: int32, %limit16: int32, %lengths14: Tensor[(?), int32]) -> List[tensor_float64_t[]] {
  %721 = equal(%current16, %limit16) /* ty=bool */;
  if (%721) {
    %tensor_array50
  } else {
    %722 = take(%lengths14, %current16) /* ty=int32 */;
    %723 = add(%offset16, %722) /* ty=int32 */;
    %724 = add(%current16, 1 /* ty=int32 */) /* ty=int32 */;
    %725 = @ta_split_helper_float64(%tensor_array50, %value16, %723, %724, %limit16, %lengths14) /* ty=List[tensor_float64_t[]] */;
    %726 = take(%lengths14, %current16) /* ty=int32 */;
    %727 = add(%726, %offset16) /* ty=int32 */;
    %728 = @tensor_take_float64(%value16, %offset16, %727) /* ty=tensor_float64_t[] */;
    @tensor_array_write_float64(%725, %current16, %728) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_int8(%i43: int32, %up43: int32, %t82: Tensor[(?), int8]) -> List[tensor_int8_t[]] {
  %729 = equal(%i43, %up43) /* ty=bool */;
  if (%729) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %730 = take(%t82, %i43) /* ty=int8 */;
    %731 = tensor0_int8(%730) /* ty=tensor_int8_t[] */;
    %732 = add(%i43, 1 /* ty=int32 */) /* ty=int32 */;
    %733 = @tensor_array_unstack_tensor1_helper_int8(%732, %up43, %t82) /* ty=List[tensor_int8_t[]] */;
    Cons(%731, %733) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor3_uint8(%tensor49: Tensor[(?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %734 = shape_of(%tensor49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = take(%734, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_uint8(0 /* ty=int32 */, %735, %tensor49) /* ty=List[tensor_uint8_t[]] */
}

def @ta_split_helper_int8(%tensor_array51: List[tensor_int8_t[]], %value17: tensor_int8_t[], %offset17: int32, %current17: int32, %limit17: int32, %lengths15: Tensor[(?), int32]) -> List[tensor_int8_t[]] {
  %736 = equal(%current17, %limit17) /* ty=bool */;
  if (%736) {
    %tensor_array51
  } else {
    %737 = take(%lengths15, %current17) /* ty=int32 */;
    %738 = add(%offset17, %737) /* ty=int32 */;
    %739 = add(%current17, 1 /* ty=int32 */) /* ty=int32 */;
    %740 = @ta_split_helper_int8(%tensor_array51, %value17, %738, %739, %limit17, %lengths15) /* ty=List[tensor_int8_t[]] */;
    %741 = take(%lengths15, %current17) /* ty=int32 */;
    %742 = add(%741, %offset17) /* ty=int32 */;
    %743 = @tensor_take_int8(%value17, %offset17, %742) /* ty=tensor_int8_t[] */;
    @tensor_array_write_int8(%740, %current17, %743) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_uint8(%i44: int32, %up44: int32, %t83: Tensor[(?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %744 = equal(%i44, %up44) /* ty=bool */;
  if (%744) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %745 = take(%t83, %i44, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    %746 = tensor3_uint8(%745) /* ty=tensor_uint8_t[] */;
    %747 = add(%i44, 1 /* ty=int32 */) /* ty=int32 */;
    %748 = @tensor_array_unstack_tensor4_helper_uint8(%747, %up44, %t83) /* ty=List[tensor_uint8_t[]] */;
    Cons(%746, %748) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_read_float32(%tensor_array52: List[tensor_float32_t[]], %x49: int32) -> tensor_float32_t[] {
  @nth(%tensor_array52, %x49) /* ty=tensor_float32_t[] */
}

def @tensor_array_unstack_tensor5_helper_float16(%i45: int32, %up45: int32, %t84: Tensor[(?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %749 = equal(%i45, %up45) /* ty=bool */;
  if (%749) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %750 = take(%t84, %i45, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    %751 = tensor4_float16(%750) /* ty=tensor_float16_t[] */;
    %752 = add(%i45, 1 /* ty=int32 */) /* ty=int32 */;
    %753 = @tensor_array_unstack_tensor5_helper_float16(%752, %up45, %t84) /* ty=List[tensor_float16_t[]] */;
    Cons(%751, %753) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_uint8(%tensor50: Tensor[(?, ?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %754 = shape_of(%tensor50, dtype="int32") /* ty=Tensor[(6), int32] */;
  %755 = take(%754, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_uint8(0 /* ty=int32 */, %755, %tensor50) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_scatter_helper_uint8(%ta7: List[tensor_uint8_t[]], %current8: int32, %limit8: int32, %indices_7: Tensor[(?), int32], %values_7: List[tensor_uint8_t[]]) -> List[tensor_uint8_t[]] {
  %756 = equal(%current8, %limit8) /* ty=bool */;
  if (%756) {
    %ta7
  } else {
    %757 = take(%indices_7, %current8) /* ty=int32 */;
    %758 = @tensor_array_read_uint8(%values_7, %current8) /* ty=tensor_uint8_t[] */;
    %759 = @tensor_array_write_uint8(%ta7, %757, %758) /* ty=List[tensor_uint8_t[]] */;
    %760 = add(%current8, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_uint8(%759, %760, %limit8, %indices_7, %values_7) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_float32(%i46: int32, %up46: int32, %t85: Tensor[(?), float32]) -> List[tensor_float32_t[]] {
  %761 = equal(%i46, %up46) /* ty=bool */;
  if (%761) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %762 = take(%t85, %i46) /* ty=float32 */;
    %763 = tensor0_float32(%762) /* ty=tensor_float32_t[] */;
    %764 = add(%i46, 1 /* ty=int32 */) /* ty=int32 */;
    %765 = @tensor_array_unstack_tensor1_helper_float32(%764, %up46, %t85) /* ty=List[tensor_float32_t[]] */;
    Cons(%763, %765) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_split_uint8(%tensor_array53: List[tensor_uint8_t[]], %value9: tensor_uint8_t[], %lengths16: Tensor[(?), int32]) -> List[tensor_uint8_t[]] {
  %766 = shape_of(%lengths16, dtype="int32") /* ty=Tensor[(1), int32] */;
  %767 = take(%766, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_uint8(%tensor_array53, %value9, 0 /* ty=int32 */, 0 /* ty=int32 */, %767, %lengths16) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_scatter_int8(%tensor_array54: List[tensor_int8_t[]], %indices7: Tensor[(?), int32], %values8: List[tensor_int8_t[]]) -> List[tensor_int8_t[]] {
  %768 = shape_of(%indices7, dtype="int32") /* ty=Tensor[(1), int32] */;
  %769 = take(%768, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int8(%tensor_array54, 0 /* ty=int32 */, %769, %indices7, %values8) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_read_int32(%tensor_array55: List[tensor_int32_t[]], %x50: int32) -> tensor_int32_t[] {
  @nth(%tensor_array55, %x50) /* ty=tensor_int32_t[] */
}

def @tensor_array_concat_uint8(%tensor_array56: List[tensor_uint8_t[]]) -> tensor_uint8_t[] {
  match? (%tensor_array56) {
    Nil => tensor_nil_uint8 /* ty=tensor_uint8_t[] */,
    Cons(%hd8: tensor_uint8_t[], %tl8: List[tensor_uint8_t[]]) => match? (%tl8) {
      Nil => %hd8,
      _ => %770 = @tensor_array_concat_uint8(%tl8) /* ty=tensor_uint8_t[] */;
      @tensor_concatenate_uint8(%hd8, %770) /* ty=tensor_uint8_t[] */,
    },
  }
}

def @tensor_array_stack_uint8(%tensor_array57: List[tensor_uint8_t[]]) -> tensor_uint8_t[] {
  %771 = @map(@tensor_expand_dims_uint8, %tensor_array57) /* ty=List[tensor_uint8_t[]] */;
  %772 = @hd(%771) /* ty=tensor_uint8_t[] */;
  %773 = @tl(%771) /* ty=List[tensor_uint8_t[]] */;
  @foldl(@tensor_concatenate_uint8, %772, %773) /* ty=tensor_uint8_t[] */
}

def @tensor_array_unstack_tensor6_helper_uint8(%i47: int32, %up47: int32, %t86: Tensor[(?, ?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %774 = equal(%i47, %up47) /* ty=bool */;
  if (%774) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %775 = take(%t86, %i47, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    %776 = tensor5_uint8(%775) /* ty=tensor_uint8_t[] */;
    %777 = add(%i47, 1 /* ty=int32 */) /* ty=int32 */;
    %778 = @tensor_array_unstack_tensor6_helper_uint8(%777, %up47, %t86) /* ty=List[tensor_uint8_t[]] */;
    Cons(%776, %778) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_scatter_helper_int16(%ta8: List[tensor_int16_t[]], %current9: int32, %limit9: int32, %indices_8: Tensor[(?), int32], %values_8: List[tensor_int16_t[]]) -> List[tensor_int16_t[]] {
  %779 = equal(%current9, %limit9) /* ty=bool */;
  if (%779) {
    %ta8
  } else {
    %780 = take(%indices_8, %current9) /* ty=int32 */;
    %781 = @tensor_array_read_int16(%values_8, %current9) /* ty=tensor_int16_t[] */;
    %782 = @tensor_array_write_int16(%ta8, %780, %781) /* ty=List[tensor_int16_t[]] */;
    %783 = add(%current9, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int16(%782, %783, %limit9, %indices_8, %values_8) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_take_int8(%tensor51: tensor_int8_t[], %lower7: int32, %upper7: int32) -> tensor_int8_t[] {
  match? (%tensor51) {
    tensor1_int8(%t132: Tensor[(?), int8]) => %784 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][43], dtype="int32") /* ty=Tensor[(?), int32] */;
    %785 = take(%t132, %784) /* ty=Tensor[(?), int8] */;
    tensor1_int8(%785) /* ty=tensor_int8_t[] */,
    tensor2_int8(%t231: Tensor[(?, ?), int8]) => %786 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][44], dtype="int32") /* ty=Tensor[(?), int32] */;
    %787 = take(%t231, %786, axis=0) /* ty=Tensor[(?, ?), int8] */;
    tensor2_int8(%787) /* ty=tensor_int8_t[] */,
    tensor3_int8(%t330: Tensor[(?, ?, ?), int8]) => %788 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][45], dtype="int32") /* ty=Tensor[(?), int32] */;
    %789 = take(%t330, %788, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    tensor3_int8(%789) /* ty=tensor_int8_t[] */,
    tensor4_int8(%t430: Tensor[(?, ?, ?, ?), int8]) => %790 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][46], dtype="int32") /* ty=Tensor[(?), int32] */;
    %791 = take(%t430, %790, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    tensor4_int8(%791) /* ty=tensor_int8_t[] */,
    tensor5_int8(%t518: Tensor[(?, ?, ?, ?, ?), int8]) => %792 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][47], dtype="int32") /* ty=Tensor[(?), int32] */;
    %793 = take(%t518, %792, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    tensor5_int8(%793) /* ty=tensor_int8_t[] */,
    tensor6_int8(%t610: Tensor[(?, ?, ?, ?, ?, ?), int8]) => %794 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][48], dtype="int32") /* ty=Tensor[(?), int32] */;
    %795 = take(%t610, %794, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int8] */;
    tensor6_int8(%795) /* ty=tensor_int8_t[] */,
  }
}

def @tensor_array_unstack_tensor1_int8(%tensor52: Tensor[(?), int8]) -> List[tensor_int8_t[]] {
  %796 = shape_of(%tensor52, dtype="int32") /* ty=Tensor[(1), int32] */;
  %797 = take(%796, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int8(0 /* ty=int32 */, %797, %tensor52) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor3_helper_int8(%i48: int32, %up48: int32, %t87: Tensor[(?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %798 = equal(%i48, %up48) /* ty=bool */;
  if (%798) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %799 = take(%t87, %i48, axis=0) /* ty=Tensor[(?, ?), int8] */;
    %800 = tensor2_int8(%799) /* ty=tensor_int8_t[] */;
    %801 = add(%i48, 1 /* ty=int32 */) /* ty=int32 */;
    %802 = @tensor_array_unstack_tensor3_helper_int8(%801, %up48, %t87) /* ty=List[tensor_int8_t[]] */;
    Cons(%800, %802) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_int8(%i49: int32, %up49: int32, %t88: Tensor[(?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %803 = equal(%i49, %up49) /* ty=bool */;
  if (%803) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %804 = take(%t88, %i49, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    %805 = tensor3_int8(%804) /* ty=tensor_int8_t[] */;
    %806 = add(%i49, 1 /* ty=int32 */) /* ty=int32 */;
    %807 = @tensor_array_unstack_tensor4_helper_int8(%806, %up49, %t88) /* ty=List[tensor_int8_t[]] */;
    Cons(%805, %807) /* ty=List[tensor_int8_t[]] */
  }
}

def @concat[A](%xs14: List[A], %ys1: List[A]) -> List[A] {
  @foldr(Cons, %ys1, %xs14) /* ty=List[A] */
}

def @tensor_array_unstack_tensor6_helper_int8(%i50: int32, %up50: int32, %t89: Tensor[(?, ?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %808 = equal(%i50, %up50) /* ty=bool */;
  if (%808) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %809 = take(%t89, %i50, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    %810 = tensor5_int8(%809) /* ty=tensor_int8_t[] */;
    %811 = add(%i50, 1 /* ty=int32 */) /* ty=int32 */;
    %812 = @tensor_array_unstack_tensor6_helper_int8(%811, %up50, %t89) /* ty=List[tensor_int8_t[]] */;
    Cons(%810, %812) /* ty=List[tensor_int8_t[]] */
  }
}

def @map[A, B](%f12: fn (A) -> B, %xs15: List[A]) -> List[B] {
  match (%xs15) {
    Cons(%x51: A, %rest6: List[A]) => %813 = %f12(%x51) /* ty=B */;
    %814 = @map(%f12, %rest6) /* ty=List[B] */;
    Cons(%813, %814) /* ty=List[B] */,
    Nil => Nil /* ty=List[B] */,
  }
}

def @tensor_array_unstack_tensor4_int8(%tensor53: Tensor[(?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %815 = shape_of(%tensor53, dtype="int32") /* ty=Tensor[(4), int32] */;
  %816 = take(%815, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int8(0 /* ty=int32 */, %816, %tensor53) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor2_int16(%tensor54: Tensor[(?, ?), int16]) -> List[tensor_int16_t[]] {
  %817 = shape_of(%tensor54, dtype="int32") /* ty=Tensor[(2), int32] */;
  %818 = take(%817, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int16(0 /* ty=int32 */, %818, %tensor54) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor1_uint8(%tensor55: Tensor[(?), uint8]) -> List[tensor_uint8_t[]] {
  %819 = shape_of(%tensor55, dtype="int32") /* ty=Tensor[(1), int32] */;
  %820 = take(%819, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_uint8(0 /* ty=int32 */, %820, %tensor55) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor5_helper_int8(%i51: int32, %up51: int32, %t90: Tensor[(?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %821 = equal(%i51, %up51) /* ty=bool */;
  if (%821) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %822 = take(%t90, %i51, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    %823 = tensor4_int8(%822) /* ty=tensor_int8_t[] */;
    %824 = add(%i51, 1 /* ty=int32 */) /* ty=int32 */;
    %825 = @tensor_array_unstack_tensor5_helper_int8(%824, %up51, %t90) /* ty=List[tensor_int8_t[]] */;
    Cons(%823, %825) /* ty=List[tensor_int8_t[]] */
  }
}

def @ta_split_helper_int32(%tensor_array58: List[tensor_int32_t[]], %value18: tensor_int32_t[], %offset18: int32, %current18: int32, %limit18: int32, %lengths17: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %826 = equal(%current18, %limit18) /* ty=bool */;
  if (%826) {
    %tensor_array58
  } else {
    %827 = take(%lengths17, %current18) /* ty=int32 */;
    %828 = add(%offset18, %827) /* ty=int32 */;
    %829 = add(%current18, 1 /* ty=int32 */) /* ty=int32 */;
    %830 = @ta_split_helper_int32(%tensor_array58, %value18, %828, %829, %limit18, %lengths17) /* ty=List[tensor_int32_t[]] */;
    %831 = take(%lengths17, %current18) /* ty=int32 */;
    %832 = add(%831, %offset18) /* ty=int32 */;
    %833 = @tensor_take_int32(%value18, %offset18, %832) /* ty=tensor_int32_t[] */;
    @tensor_array_write_int32(%830, %current18, %833) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int8(%tensor56: Tensor[(?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %834 = shape_of(%tensor56, dtype="int32") /* ty=Tensor[(5), int32] */;
  %835 = take(%834, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int8(0 /* ty=int32 */, %835, %tensor56) /* ty=List[tensor_int8_t[]] */
}

def @tensor_take_int16(%tensor57: tensor_int16_t[], %lower8: int32, %upper8: int32) -> tensor_int16_t[] {
  match? (%tensor57) {
    tensor1_int16(%t133: Tensor[(?), int16]) => %836 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][49], dtype="int32") /* ty=Tensor[(?), int32] */;
    %837 = take(%t133, %836) /* ty=Tensor[(?), int16] */;
    tensor1_int16(%837) /* ty=tensor_int16_t[] */,
    tensor2_int16(%t232: Tensor[(?, ?), int16]) => %838 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][50], dtype="int32") /* ty=Tensor[(?), int32] */;
    %839 = take(%t232, %838, axis=0) /* ty=Tensor[(?, ?), int16] */;
    tensor2_int16(%839) /* ty=tensor_int16_t[] */,
    tensor3_int16(%t331: Tensor[(?, ?, ?), int16]) => %840 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][51], dtype="int32") /* ty=Tensor[(?), int32] */;
    %841 = take(%t331, %840, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    tensor3_int16(%841) /* ty=tensor_int16_t[] */,
    tensor4_int16(%t431: Tensor[(?, ?, ?, ?), int16]) => %842 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][52], dtype="int32") /* ty=Tensor[(?), int32] */;
    %843 = take(%t431, %842, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    tensor4_int16(%843) /* ty=tensor_int16_t[] */,
    tensor5_int16(%t519: Tensor[(?, ?, ?, ?, ?), int16]) => %844 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][53], dtype="int32") /* ty=Tensor[(?), int32] */;
    %845 = take(%t519, %844, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    tensor5_int16(%845) /* ty=tensor_int16_t[] */,
    tensor6_int16(%t611: Tensor[(?, ?, ?, ?, ?, ?), int16]) => %846 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][54], dtype="int32") /* ty=Tensor[(?), int32] */;
    %847 = take(%t611, %846, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int16] */;
    tensor6_int16(%847) /* ty=tensor_int16_t[] */,
  }
}

def @tensor_array_unstack_tensor6_helper_int64(%i52: int32, %up52: int32, %t91: Tensor[(?, ?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %848 = equal(%i52, %up52) /* ty=bool */;
  if (%848) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %849 = take(%t91, %i52, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    %850 = tensor5_int64(%849) /* ty=tensor_int64_t[] */;
    %851 = add(%i52, 1 /* ty=int32 */) /* ty=int32 */;
    %852 = @tensor_array_unstack_tensor6_helper_int64(%851, %up52, %t91) /* ty=List[tensor_int64_t[]] */;
    Cons(%850, %852) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_int16(%x52: int32) -> List[tensor_int16_t[]] {
  %853 = equal(%x52, 0 /* ty=int32 */) /* ty=bool */;
  if (%853) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %854 = tensor_nil_int16 /* ty=tensor_int16_t[] */;
    %855 = subtract(%x52, 1 /* ty=int32 */) /* ty=int32 */;
    %856 = @tensor_array_int16(%855) /* ty=List[tensor_int16_t[]] */;
    Cons(%854, %856) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_read_int16(%tensor_array59: List[tensor_int16_t[]], %x53: int32) -> tensor_int16_t[] {
  @nth(%tensor_array59, %x53) /* ty=tensor_int16_t[] */
}

def @tensor_array_unstack_tensor2_float64(%tensor58: Tensor[(?, ?), float64]) -> List[tensor_float64_t[]] {
  %857 = shape_of(%tensor58, dtype="int32") /* ty=Tensor[(2), int32] */;
  %858 = take(%857, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float64(0 /* ty=int32 */, %858, %tensor58) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor1_int16(%tensor59: Tensor[(?), int16]) -> List[tensor_int16_t[]] {
  %859 = shape_of(%tensor59, dtype="int32") /* ty=Tensor[(1), int32] */;
  %860 = take(%859, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int16(0 /* ty=int32 */, %860, %tensor59) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor2_helper_int16(%i53: int32, %up53: int32, %t92: Tensor[(?, ?), int16]) -> List[tensor_int16_t[]] {
  %861 = equal(%i53, %up53) /* ty=bool */;
  if (%861) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %862 = take(%t92, %i53, axis=0) /* ty=Tensor[(?), int16] */;
    %863 = tensor1_int16(%862) /* ty=tensor_int16_t[] */;
    %864 = add(%i53, 1 /* ty=int32 */) /* ty=int32 */;
    %865 = @tensor_array_unstack_tensor2_helper_int16(%864, %up53, %t92) /* ty=List[tensor_int16_t[]] */;
    Cons(%863, %865) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int16(%tensor60: Tensor[(?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %866 = shape_of(%tensor60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %867 = take(%866, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int16(0 /* ty=int32 */, %867, %tensor60) /* ty=List[tensor_int16_t[]] */
}

def @tensor_concatenate_uint16(%x54: tensor_uint16_t[], %y10: tensor_uint16_t[]) -> tensor_uint16_t[] {
  match? (%x54) {
    tensor1_uint16(%t1114: Tensor[(?), uint16]) => match? (%y10) {
      tensor1_uint16(%t1212: Tensor[(?), uint16]) => %868 = (%t1114, %t1212);
      %869 = concatenate(%868) /* ty=Tensor[(?), uint16] */;
      tensor1_uint16(%869) /* ty=tensor_uint16_t[] */,
    },
    tensor2_uint16(%t2114: Tensor[(?, ?), uint16]) => match? (%y10) {
      tensor2_uint16(%t2212: Tensor[(?, ?), uint16]) => %870 = (%t2114, %t2212);
      %871 = concatenate(%870) /* ty=Tensor[(?, ?), uint16] */;
      tensor2_uint16(%871) /* ty=tensor_uint16_t[] */,
    },
    tensor3_uint16(%t3114: Tensor[(?, ?, ?), uint16]) => match? (%y10) {
      tensor3_uint16(%t3212: Tensor[(?, ?, ?), uint16]) => %872 = (%t3114, %t3212);
      %873 = concatenate(%872) /* ty=Tensor[(?, ?, ?), uint16] */;
      tensor3_uint16(%873) /* ty=tensor_uint16_t[] */,
    },
    tensor4_uint16(%t4113: Tensor[(?, ?, ?, ?), uint16]) => match? (%y10) {
      tensor4_uint16(%t4212: Tensor[(?, ?, ?, ?), uint16]) => %874 = (%t4113, %t4212);
      %875 = concatenate(%874) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
      tensor4_uint16(%875) /* ty=tensor_uint16_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor4_int16(%tensor61: Tensor[(?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %876 = shape_of(%tensor61, dtype="int32") /* ty=Tensor[(4), int32] */;
  %877 = take(%876, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int16(0 /* ty=int32 */, %877, %tensor61) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor5_int16(%tensor62: Tensor[(?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %878 = shape_of(%tensor62, dtype="int32") /* ty=Tensor[(5), int32] */;
  %879 = take(%878, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int16(0 /* ty=int32 */, %879, %tensor62) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_scatter_int16(%tensor_array60: List[tensor_int16_t[]], %indices8: Tensor[(?), int32], %values9: List[tensor_int16_t[]]) -> List[tensor_int16_t[]] {
  %880 = shape_of(%indices8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %881 = take(%880, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int16(%tensor_array60, 0 /* ty=int32 */, %881, %indices8, %values9) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_uint8(%x55: int32) -> List[tensor_uint8_t[]] {
  %882 = equal(%x55, 0 /* ty=int32 */) /* ty=bool */;
  if (%882) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %883 = tensor_nil_uint8 /* ty=tensor_uint8_t[] */;
    %884 = subtract(%x55, 1 /* ty=int32 */) /* ty=int32 */;
    %885 = @tensor_array_uint8(%884) /* ty=List[tensor_uint8_t[]] */;
    Cons(%883, %885) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_stack_int16(%tensor_array61: List[tensor_int16_t[]]) -> tensor_int16_t[] {
  %886 = @map(@tensor_expand_dims_int16, %tensor_array61) /* ty=List[tensor_int16_t[]] */;
  %887 = @hd(%886) /* ty=tensor_int16_t[] */;
  %888 = @tl(%886) /* ty=List[tensor_int16_t[]] */;
  @foldl(@tensor_concatenate_int16, %887, %888) /* ty=tensor_int16_t[] */
}

def @tensor_array_uint16(%x56: int32) -> List[tensor_uint16_t[]] {
  %889 = equal(%x56, 0 /* ty=int32 */) /* ty=bool */;
  if (%889) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %890 = tensor_nil_uint16 /* ty=tensor_uint16_t[] */;
    %891 = subtract(%x56, 1 /* ty=int32 */) /* ty=int32 */;
    %892 = @tensor_array_uint16(%891) /* ty=List[tensor_uint16_t[]] */;
    Cons(%890, %892) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_write_uint16(%tensor_array62: List[tensor_uint16_t[]], %x57: int32, %v10: tensor_uint16_t[]) -> List[tensor_uint16_t[]] {
  @update(%tensor_array62, %x57, %v10) /* ty=List[tensor_uint16_t[]] */
}

// meta data omitted. you can use show_meta_data=True to include meta data
