v0.0.4
type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type Option[A] {
  Some(A),
  None,
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

def @tensor_array_split_int64(%tensor_array: List[tensor_int64_t[]], %value: tensor_int64_t[], %lengths: Tensor[(?), int32]) -> List[tensor_int64_t[]] {
  %0 = shape_of(%lengths, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1 = take(%0, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int64(%tensor_array, %value, 0 /* ty=int32 */, 0 /* ty=int32 */, %1, %lengths) /* ty=List[tensor_int64_t[]] */
}

def @ta_split_helper_int64(%tensor_array1: List[tensor_int64_t[]], %value1: tensor_int64_t[], %offset1: int32, %current1: int32, %limit1: int32, %lengths1: Tensor[(?), int32]) -> List[tensor_int64_t[]] {
  %2 = equal(%current1, %limit1) /* ty=bool */;
  if (%2) {
    %tensor_array1
  } else {
    %3 = take(%lengths1, %current1) /* ty=int32 */;
    %4 = add(%offset1, %3) /* ty=int32 */;
    %5 = add(%current1, 1 /* ty=int32 */) /* ty=int32 */;
    %6 = @ta_split_helper_int64(%tensor_array1, %value1, %4, %5, %limit1, %lengths1) /* ty=List[tensor_int64_t[]] */;
    %7 = take(%lengths1, %current1) /* ty=int32 */;
    %8 = add(%7, %offset1) /* ty=int32 */;
    %9 = @tensor_take_int64(%value1, %offset1, %8) /* ty=tensor_int64_t[] */;
    @tensor_array_write_int64(%6, %current1, %9) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_scatter_int64(%tensor_array2: List[tensor_int64_t[]], %indices: Tensor[(?), int32], %values: List[tensor_int64_t[]]) -> List[tensor_int64_t[]] {
  %10 = shape_of(%indices, dtype="int32") /* ty=Tensor[(1), int32] */;
  %11 = take(%10, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int64(%tensor_array2, 0 /* ty=int32 */, %11, %indices, %values) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor6_int64(%tensor: Tensor[(?, ?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %12 = shape_of(%tensor, dtype="int32") /* ty=Tensor[(6), int32] */;
  %13 = take(%12, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int64(0 /* ty=int32 */, %13, %tensor) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor6_helper_int64(%i: int32, %up: int32, %t: Tensor[(?, ?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %14 = equal(%i, %up) /* ty=bool */;
  if (%14) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %15 = take(%t, %i, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    %16 = tensor5_int64(%15) /* ty=tensor_int64_t[] */;
    %17 = add(%i, 1 /* ty=int32 */) /* ty=int32 */;
    %18 = @tensor_array_unstack_tensor6_helper_int64(%17, %up, %t) /* ty=List[tensor_int64_t[]] */;
    Cons(%16, %18) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor4_int64(%tensor1: Tensor[(?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %19 = shape_of(%tensor1, dtype="int32") /* ty=Tensor[(4), int32] */;
  %20 = take(%19, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int64(0 /* ty=int32 */, %20, %tensor1) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor3_helper_int64(%i1: int32, %up1: int32, %t1: Tensor[(?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %21 = equal(%i1, %up1) /* ty=bool */;
  if (%21) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %22 = take(%t1, %i1, axis=0) /* ty=Tensor[(?, ?), int64] */;
    %23 = tensor2_int64(%22) /* ty=tensor_int64_t[] */;
    %24 = add(%i1, 1 /* ty=int32 */) /* ty=int32 */;
    %25 = @tensor_array_unstack_tensor3_helper_int64(%24, %up1, %t1) /* ty=List[tensor_int64_t[]] */;
    Cons(%23, %25) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_int64(%i2: int32, %up2: int32, %t2: Tensor[(?, ?), int64]) -> List[tensor_int64_t[]] {
  %26 = equal(%i2, %up2) /* ty=bool */;
  if (%26) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %27 = take(%t2, %i2, axis=0) /* ty=Tensor[(?), int64] */;
    %28 = tensor1_int64(%27) /* ty=tensor_int64_t[] */;
    %29 = add(%i2, 1 /* ty=int32 */) /* ty=int32 */;
    %30 = @tensor_array_unstack_tensor2_helper_int64(%29, %up2, %t2) /* ty=List[tensor_int64_t[]] */;
    Cons(%28, %30) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor1_int64(%tensor2: Tensor[(?), int64]) -> List[tensor_int64_t[]] {
  %31 = shape_of(%tensor2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %32 = take(%31, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int64(0 /* ty=int32 */, %32, %tensor2) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_write_int64(%tensor_array3: List[tensor_int64_t[]], %x: int32, %v: tensor_int64_t[]) -> List[tensor_int64_t[]] {
  @update(%tensor_array3, %x, %v) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_read_int64(%tensor_array4: List[tensor_int64_t[]], %x1: int32) -> tensor_int64_t[] {
  @nth(%tensor_array4, %x1) /* ty=tensor_int64_t[] */
}

def @tensor_concatenate_int64(%x2: tensor_int64_t[], %y: tensor_int64_t[]) -> tensor_int64_t[] {
  match? (%x2) {
    tensor1_int64(%t11: Tensor[(?), int64]) => match? (%y) {
      tensor1_int64(%t12: Tensor[(?), int64]) => %33 = (%t11, %t12);
      %34 = concatenate(%33) /* ty=Tensor[(?), int64] */;
      tensor1_int64(%34) /* ty=tensor_int64_t[] */,
    },
    tensor2_int64(%t21: Tensor[(?, ?), int64]) => match? (%y) {
      tensor2_int64(%t22: Tensor[(?, ?), int64]) => %35 = (%t21, %t22);
      %36 = concatenate(%35) /* ty=Tensor[(?, ?), int64] */;
      tensor2_int64(%36) /* ty=tensor_int64_t[] */,
    },
    tensor3_int64(%t31: Tensor[(?, ?, ?), int64]) => match? (%y) {
      tensor3_int64(%t32: Tensor[(?, ?, ?), int64]) => %37 = (%t31, %t32);
      %38 = concatenate(%37) /* ty=Tensor[(?, ?, ?), int64] */;
      tensor3_int64(%38) /* ty=tensor_int64_t[] */,
    },
    tensor4_int64(%t41: Tensor[(?, ?, ?, ?), int64]) => match? (%y) {
      tensor4_int64(%t42: Tensor[(?, ?, ?, ?), int64]) => %39 = (%t41, %t42);
      %40 = concatenate(%39) /* ty=Tensor[(?, ?, ?, ?), int64] */;
      tensor4_int64(%40) /* ty=tensor_int64_t[] */,
    },
  }
}

def @tensor_expand_dims_int64(%x3: tensor_int64_t[]) -> tensor_int64_t[] {
  match? (%x3) {
    tensor0_int64(%t0: int64) => %41 = expand_dims(%t0, axis=0) /* ty=Tensor[(?), int64] */;
    tensor1_int64(%41) /* ty=tensor_int64_t[] */,
    tensor1_int64(%t13: Tensor[(?), int64]) => %42 = expand_dims(%t13, axis=0) /* ty=Tensor[(?, ?), int64] */;
    tensor2_int64(%42) /* ty=tensor_int64_t[] */,
    tensor2_int64(%t23: Tensor[(?, ?), int64]) => %43 = expand_dims(%t23, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    tensor3_int64(%43) /* ty=tensor_int64_t[] */,
    tensor3_int64(%t3: Tensor[(?, ?, ?), int64]) => %44 = expand_dims(%t3, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    tensor4_int64(%44) /* ty=tensor_int64_t[] */,
    tensor4_int64(%t4: Tensor[(?, ?, ?, ?), int64]) => %45 = expand_dims(%t4, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    tensor5_int64(%45) /* ty=tensor_int64_t[] */,
    tensor5_int64(%t5: Tensor[(?, ?, ?, ?, ?), int64]) => %46 = expand_dims(%t5, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int64] */;
    tensor6_int64(%46) /* ty=tensor_int64_t[] */,
  }
}

def @tensor_array_split_uint16(%tensor_array5: List[tensor_uint16_t[]], %value2: tensor_uint16_t[], %lengths2: Tensor[(?), int32]) -> List[tensor_uint16_t[]] {
  %47 = shape_of(%lengths2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %48 = take(%47, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_uint16(%tensor_array5, %value2, 0 /* ty=int32 */, 0 /* ty=int32 */, %48, %lengths2) /* ty=List[tensor_uint16_t[]] */
}

def @ta_split_helper_uint16(%tensor_array6: List[tensor_uint16_t[]], %value11: tensor_uint16_t[], %offset11: int32, %current11: int32, %limit11: int32, %lengths3: Tensor[(?), int32]) -> List[tensor_uint16_t[]] {
  %49 = equal(%current11, %limit11) /* ty=bool */;
  if (%49) {
    %tensor_array6
  } else {
    %50 = take(%lengths3, %current11) /* ty=int32 */;
    %51 = add(%offset11, %50) /* ty=int32 */;
    %52 = add(%current11, 1 /* ty=int32 */) /* ty=int32 */;
    %53 = @ta_split_helper_uint16(%tensor_array6, %value11, %51, %52, %limit11, %lengths3) /* ty=List[tensor_uint16_t[]] */;
    %54 = take(%lengths3, %current11) /* ty=int32 */;
    %55 = add(%54, %offset11) /* ty=int32 */;
    %56 = @tensor_take_uint16(%value11, %offset11, %55) /* ty=tensor_uint16_t[] */;
    @tensor_array_write_uint16(%53, %current11, %56) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_scatter_uint16(%tensor_array7: List[tensor_uint16_t[]], %indices1: Tensor[(?), int32], %values1: List[tensor_uint16_t[]]) -> List[tensor_uint16_t[]] {
  %57 = shape_of(%indices1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %58 = take(%57, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_uint16(%tensor_array7, 0 /* ty=int32 */, %58, %indices1, %values1) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor6_uint16(%tensor3: Tensor[(?, ?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %59 = shape_of(%tensor3, dtype="int32") /* ty=Tensor[(6), int32] */;
  %60 = take(%59, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_uint16(0 /* ty=int32 */, %60, %tensor3) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor6_helper_uint16(%i3: int32, %up3: int32, %t6: Tensor[(?, ?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %61 = equal(%i3, %up3) /* ty=bool */;
  if (%61) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %62 = take(%t6, %i3, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    %63 = tensor5_uint16(%62) /* ty=tensor_uint16_t[] */;
    %64 = add(%i3, 1 /* ty=int32 */) /* ty=int32 */;
    %65 = @tensor_array_unstack_tensor6_helper_uint16(%64, %up3, %t6) /* ty=List[tensor_uint16_t[]] */;
    Cons(%63, %65) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor5_uint16(%tensor4: Tensor[(?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %66 = shape_of(%tensor4, dtype="int32") /* ty=Tensor[(5), int32] */;
  %67 = take(%66, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_uint16(0 /* ty=int32 */, %67, %tensor4) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor4_helper_uint16(%i4: int32, %up4: int32, %t7: Tensor[(?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %68 = equal(%i4, %up4) /* ty=bool */;
  if (%68) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %69 = take(%t7, %i4, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    %70 = tensor3_uint16(%69) /* ty=tensor_uint16_t[] */;
    %71 = add(%i4, 1 /* ty=int32 */) /* ty=int32 */;
    %72 = @tensor_array_unstack_tensor4_helper_uint16(%71, %up4, %t7) /* ty=List[tensor_uint16_t[]] */;
    Cons(%70, %72) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_uint16(%tensor5: Tensor[(?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %73 = shape_of(%tensor5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = take(%73, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_uint16(0 /* ty=int32 */, %74, %tensor5) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor3_helper_uint16(%i5: int32, %up5: int32, %t8: Tensor[(?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %75 = equal(%i5, %up5) /* ty=bool */;
  if (%75) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %76 = take(%t8, %i5, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    %77 = tensor2_uint16(%76) /* ty=tensor_uint16_t[] */;
    %78 = add(%i5, 1 /* ty=int32 */) /* ty=int32 */;
    %79 = @tensor_array_unstack_tensor3_helper_uint16(%78, %up5, %t8) /* ty=List[tensor_uint16_t[]] */;
    Cons(%77, %79) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_take_int64(%tensor6: tensor_int64_t[], %lower: int32, %upper: int32) -> tensor_int64_t[] {
  match? (%tensor6) {
    tensor1_int64(%t14: Tensor[(?), int64]) => %80 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][0], dtype="int32") /* ty=Tensor[(?), int32] */;
    %81 = take(%t14, %80) /* ty=Tensor[(?), int64] */;
    tensor1_int64(%81) /* ty=tensor_int64_t[] */,
    tensor2_int64(%t24: Tensor[(?, ?), int64]) => %82 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][1], dtype="int32") /* ty=Tensor[(?), int32] */;
    %83 = take(%t24, %82, axis=0) /* ty=Tensor[(?, ?), int64] */;
    tensor2_int64(%83) /* ty=tensor_int64_t[] */,
    tensor3_int64(%t33: Tensor[(?, ?, ?), int64]) => %84 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][2], dtype="int32") /* ty=Tensor[(?), int32] */;
    %85 = take(%t33, %84, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    tensor3_int64(%85) /* ty=tensor_int64_t[] */,
    tensor4_int64(%t43: Tensor[(?, ?, ?, ?), int64]) => %86 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][3], dtype="int32") /* ty=Tensor[(?), int32] */;
    %87 = take(%t43, %86, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    tensor4_int64(%87) /* ty=tensor_int64_t[] */,
    tensor5_int64(%t51: Tensor[(?, ?, ?, ?, ?), int64]) => %88 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][4], dtype="int32") /* ty=Tensor[(?), int32] */;
    %89 = take(%t51, %88, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    tensor5_int64(%89) /* ty=tensor_int64_t[] */,
    tensor6_int64(%t61: Tensor[(?, ?, ?, ?, ?, ?), int64]) => %90 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][5], dtype="int32") /* ty=Tensor[(?), int32] */;
    %91 = take(%t61, %90, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int64] */;
    tensor6_int64(%91) /* ty=tensor_int64_t[] */,
  }
}

def @tensor_array_unstack_tensor2_uint16(%tensor7: Tensor[(?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %92 = shape_of(%tensor7, dtype="int32") /* ty=Tensor[(2), int32] */;
  %93 = take(%92, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_uint16(0 /* ty=int32 */, %93, %tensor7) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor2_helper_uint16(%i6: int32, %up6: int32, %t9: Tensor[(?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %94 = equal(%i6, %up6) /* ty=bool */;
  if (%94) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %95 = take(%t9, %i6, axis=0) /* ty=Tensor[(?), uint16] */;
    %96 = tensor1_uint16(%95) /* ty=tensor_uint16_t[] */;
    %97 = add(%i6, 1 /* ty=int32 */) /* ty=int32 */;
    %98 = @tensor_array_unstack_tensor2_helper_uint16(%97, %up6, %t9) /* ty=List[tensor_uint16_t[]] */;
    Cons(%96, %98) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_uint16(%tensor8: Tensor[(?), uint16]) -> List[tensor_uint16_t[]] {
  %99 = shape_of(%tensor8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %100 = take(%99, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_uint16(0 /* ty=int32 */, %100, %tensor8) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_concat_float64(%tensor_array8: List[tensor_float64_t[]]) -> tensor_float64_t[] {
  match? (%tensor_array8) {
    Nil => tensor_nil_float64 /* ty=tensor_float64_t[] */,
    Cons(%hd: tensor_float64_t[], %tl: List[tensor_float64_t[]]) => match? (%tl) {
      Nil => %hd,
      _ => %101 = @tensor_array_concat_float64(%tl) /* ty=tensor_float64_t[] */;
      @tensor_concatenate_float64(%hd, %101) /* ty=tensor_float64_t[] */,
    },
  }
}

def @tensor_array_scatter_helper_float64(%ta: List[tensor_float64_t[]], %current: int32, %limit: int32, %indices_: Tensor[(?), int32], %values_: List[tensor_float64_t[]]) -> List[tensor_float64_t[]] {
  %102 = equal(%current, %limit) /* ty=bool */;
  if (%102) {
    %ta
  } else {
    %103 = take(%indices_, %current) /* ty=int32 */;
    %104 = @tensor_array_read_float64(%values_, %current) /* ty=tensor_float64_t[] */;
    %105 = @tensor_array_write_float64(%ta, %103, %104) /* ty=List[tensor_float64_t[]] */;
    %106 = add(%current, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float64(%105, %106, %limit, %indices_, %values_) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_int8(%i7: int32, %up7: int32, %t10: Tensor[(?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %107 = equal(%i7, %up7) /* ty=bool */;
  if (%107) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %108 = take(%t10, %i7, axis=0) /* ty=Tensor[(?, ?), int8] */;
    %109 = tensor2_int8(%108) /* ty=tensor_int8_t[] */;
    %110 = add(%i7, 1 /* ty=int32 */) /* ty=int32 */;
    %111 = @tensor_array_unstack_tensor3_helper_int8(%110, %up7, %t10) /* ty=List[tensor_int8_t[]] */;
    Cons(%109, %111) /* ty=List[tensor_int8_t[]] */
  }
}

def @ta_split_helper_float64(%tensor_array9: List[tensor_float64_t[]], %value12: tensor_float64_t[], %offset12: int32, %current12: int32, %limit12: int32, %lengths4: Tensor[(?), int32]) -> List[tensor_float64_t[]] {
  %112 = equal(%current12, %limit12) /* ty=bool */;
  if (%112) {
    %tensor_array9
  } else {
    %113 = take(%lengths4, %current12) /* ty=int32 */;
    %114 = add(%offset12, %113) /* ty=int32 */;
    %115 = add(%current12, 1 /* ty=int32 */) /* ty=int32 */;
    %116 = @ta_split_helper_float64(%tensor_array9, %value12, %114, %115, %limit12, %lengths4) /* ty=List[tensor_float64_t[]] */;
    %117 = take(%lengths4, %current12) /* ty=int32 */;
    %118 = add(%117, %offset12) /* ty=int32 */;
    %119 = @tensor_take_float64(%value12, %offset12, %118) /* ty=tensor_float64_t[] */;
    @tensor_array_write_float64(%116, %current12, %119) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_concatenate_uint16(%x4: tensor_uint16_t[], %y1: tensor_uint16_t[]) -> tensor_uint16_t[] {
  match? (%x4) {
    tensor1_uint16(%t111: Tensor[(?), uint16]) => match? (%y1) {
      tensor1_uint16(%t121: Tensor[(?), uint16]) => %120 = (%t111, %t121);
      %121 = concatenate(%120) /* ty=Tensor[(?), uint16] */;
      tensor1_uint16(%121) /* ty=tensor_uint16_t[] */,
    },
    tensor2_uint16(%t211: Tensor[(?, ?), uint16]) => match? (%y1) {
      tensor2_uint16(%t221: Tensor[(?, ?), uint16]) => %122 = (%t211, %t221);
      %123 = concatenate(%122) /* ty=Tensor[(?, ?), uint16] */;
      tensor2_uint16(%123) /* ty=tensor_uint16_t[] */,
    },
    tensor3_uint16(%t311: Tensor[(?, ?, ?), uint16]) => match? (%y1) {
      tensor3_uint16(%t321: Tensor[(?, ?, ?), uint16]) => %124 = (%t311, %t321);
      %125 = concatenate(%124) /* ty=Tensor[(?, ?, ?), uint16] */;
      tensor3_uint16(%125) /* ty=tensor_uint16_t[] */,
    },
    tensor4_uint16(%t411: Tensor[(?, ?, ?, ?), uint16]) => match? (%y1) {
      tensor4_uint16(%t421: Tensor[(?, ?, ?, ?), uint16]) => %126 = (%t411, %t421);
      %127 = concatenate(%126) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
      tensor4_uint16(%127) /* ty=tensor_uint16_t[] */,
    },
  }
}

def @tensor_take_int32(%tensor9: tensor_int32_t[], %lower1: int32, %upper1: int32) -> tensor_int32_t[] {
  match? (%tensor9) {
    tensor1_int32(%t15: Tensor[(?), int32]) => %128 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][6], dtype="int32") /* ty=Tensor[(?), int32] */;
    %129 = take(%t15, %128) /* ty=Tensor[(?), int32] */;
    tensor1_int32(%129) /* ty=tensor_int32_t[] */,
    tensor2_int32(%t25: Tensor[(?, ?), int32]) => %130 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][7], dtype="int32") /* ty=Tensor[(?), int32] */;
    %131 = take(%t25, %130, axis=0) /* ty=Tensor[(?, ?), int32] */;
    tensor2_int32(%131) /* ty=tensor_int32_t[] */,
    tensor3_int32(%t34: Tensor[(?, ?, ?), int32]) => %132 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][8], dtype="int32") /* ty=Tensor[(?), int32] */;
    %133 = take(%t34, %132, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    tensor3_int32(%133) /* ty=tensor_int32_t[] */,
    tensor4_int32(%t44: Tensor[(?, ?, ?, ?), int32]) => %134 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][9], dtype="int32") /* ty=Tensor[(?), int32] */;
    %135 = take(%t44, %134, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    tensor4_int32(%135) /* ty=tensor_int32_t[] */,
    tensor5_int32(%t52: Tensor[(?, ?, ?, ?, ?), int32]) => %136 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][10], dtype="int32") /* ty=Tensor[(?), int32] */;
    %137 = take(%t52, %136, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    tensor5_int32(%137) /* ty=tensor_int32_t[] */,
    tensor6_int32(%t62: Tensor[(?, ?, ?, ?, ?, ?), int32]) => %138 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][11], dtype="int32") /* ty=Tensor[(?), int32] */;
    %139 = take(%t62, %138, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int32] */;
    tensor6_int32(%139) /* ty=tensor_int32_t[] */,
  }
}

def @tensor_array_unstack_tensor5_helper_int32(%i8: int32, %up8: int32, %t16: Tensor[(?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %140 = equal(%i8, %up8) /* ty=bool */;
  if (%140) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %141 = take(%t16, %i8, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    %142 = tensor4_int32(%141) /* ty=tensor_int32_t[] */;
    %143 = add(%i8, 1 /* ty=int32 */) /* ty=int32 */;
    %144 = @tensor_array_unstack_tensor5_helper_int32(%143, %up8, %t16) /* ty=List[tensor_int32_t[]] */;
    Cons(%142, %144) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_scatter_float64(%tensor_array10: List[tensor_float64_t[]], %indices2: Tensor[(?), int32], %values2: List[tensor_float64_t[]]) -> List[tensor_float64_t[]] {
  %145 = shape_of(%indices2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %146 = take(%145, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float64(%tensor_array10, 0 /* ty=int32 */, %146, %indices2, %values2) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor5_float64(%tensor10: Tensor[(?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %147 = shape_of(%tensor10, dtype="int32") /* ty=Tensor[(5), int32] */;
  %148 = take(%147, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float64(0 /* ty=int32 */, %148, %tensor10) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_float64(%i9: int32, %up9: int32, %t17: Tensor[(?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %149 = equal(%i9, %up9) /* ty=bool */;
  if (%149) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %150 = take(%t17, %i9, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    %151 = tensor3_float64(%150) /* ty=tensor_float64_t[] */;
    %152 = add(%i9, 1 /* ty=int32 */) /* ty=int32 */;
    %153 = @tensor_array_unstack_tensor4_helper_float64(%152, %up9, %t17) /* ty=List[tensor_float64_t[]] */;
    Cons(%151, %153) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_take_int16(%tensor11: tensor_int16_t[], %lower2: int32, %upper2: int32) -> tensor_int16_t[] {
  match? (%tensor11) {
    tensor1_int16(%t18: Tensor[(?), int16]) => %154 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][12], dtype="int32") /* ty=Tensor[(?), int32] */;
    %155 = take(%t18, %154) /* ty=Tensor[(?), int16] */;
    tensor1_int16(%155) /* ty=tensor_int16_t[] */,
    tensor2_int16(%t26: Tensor[(?, ?), int16]) => %156 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][13], dtype="int32") /* ty=Tensor[(?), int32] */;
    %157 = take(%t26, %156, axis=0) /* ty=Tensor[(?, ?), int16] */;
    tensor2_int16(%157) /* ty=tensor_int16_t[] */,
    tensor3_int16(%t35: Tensor[(?, ?, ?), int16]) => %158 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][14], dtype="int32") /* ty=Tensor[(?), int32] */;
    %159 = take(%t35, %158, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    tensor3_int16(%159) /* ty=tensor_int16_t[] */,
    tensor4_int16(%t45: Tensor[(?, ?, ?, ?), int16]) => %160 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][15], dtype="int32") /* ty=Tensor[(?), int32] */;
    %161 = take(%t45, %160, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    tensor4_int16(%161) /* ty=tensor_int16_t[] */,
    tensor5_int16(%t53: Tensor[(?, ?, ?, ?, ?), int16]) => %162 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][16], dtype="int32") /* ty=Tensor[(?), int32] */;
    %163 = take(%t53, %162, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    tensor5_int16(%163) /* ty=tensor_int16_t[] */,
    tensor6_int16(%t63: Tensor[(?, ?, ?, ?, ?, ?), int16]) => %164 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][17], dtype="int32") /* ty=Tensor[(?), int32] */;
    %165 = take(%t63, %164, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int16] */;
    tensor6_int16(%165) /* ty=tensor_int16_t[] */,
  }
}

def @tensor_array_unstack_tensor2_helper_float64(%i10: int32, %up10: int32, %t19: Tensor[(?, ?), float64]) -> List[tensor_float64_t[]] {
  %166 = equal(%i10, %up10) /* ty=bool */;
  if (%166) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %167 = take(%t19, %i10, axis=0) /* ty=Tensor[(?), float64] */;
    %168 = tensor1_float64(%167) /* ty=tensor_float64_t[] */;
    %169 = add(%i10, 1 /* ty=int32 */) /* ty=int32 */;
    %170 = @tensor_array_unstack_tensor2_helper_float64(%169, %up10, %t19) /* ty=List[tensor_float64_t[]] */;
    Cons(%168, %170) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_int32(%i11: int32, %up11: int32, %t20: Tensor[(?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %171 = equal(%i11, %up11) /* ty=bool */;
  if (%171) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %172 = take(%t20, %i11, axis=0) /* ty=Tensor[(?, ?), int32] */;
    %173 = tensor2_int32(%172) /* ty=tensor_int32_t[] */;
    %174 = add(%i11, 1 /* ty=int32 */) /* ty=int32 */;
    %175 = @tensor_array_unstack_tensor3_helper_int32(%174, %up11, %t20) /* ty=List[tensor_int32_t[]] */;
    Cons(%173, %175) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_stack_int64(%tensor_array11: List[tensor_int64_t[]]) -> tensor_int64_t[] {
  %176 = @map(@tensor_expand_dims_int64, %tensor_array11) /* ty=List[tensor_int64_t[]] */;
  %177 = @hd(%176) /* ty=tensor_int64_t[] */;
  %178 = @tl(%176) /* ty=List[tensor_int64_t[]] */;
  @foldl(@tensor_concatenate_int64, %177, %178) /* ty=tensor_int64_t[] */
}

def @tensor_array_unstack_tensor1_helper_float64(%i12: int32, %up12: int32, %t27: Tensor[(?), float64]) -> List[tensor_float64_t[]] {
  %179 = equal(%i12, %up12) /* ty=bool */;
  if (%179) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %180 = take(%t27, %i12) /* ty=float64 */;
    %181 = tensor0_float64(%180) /* ty=tensor_float64_t[] */;
    %182 = add(%i12, 1 /* ty=int32 */) /* ty=int32 */;
    %183 = @tensor_array_unstack_tensor1_helper_float64(%182, %up12, %t27) /* ty=List[tensor_float64_t[]] */;
    Cons(%181, %183) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor2_int64(%tensor12: Tensor[(?, ?), int64]) -> List[tensor_int64_t[]] {
  %184 = shape_of(%tensor12, dtype="int32") /* ty=Tensor[(2), int32] */;
  %185 = take(%184, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int64(0 /* ty=int32 */, %185, %tensor12) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_read_float64(%tensor_array12: List[tensor_float64_t[]], %x5: int32) -> tensor_float64_t[] {
  @nth(%tensor_array12, %x5) /* ty=tensor_float64_t[] */
}

def @tensor_concatenate_float64(%x6: tensor_float64_t[], %y2: tensor_float64_t[]) -> tensor_float64_t[] {
  match? (%x6) {
    tensor1_float64(%t112: Tensor[(?), float64]) => match? (%y2) {
      tensor1_float64(%t122: Tensor[(?), float64]) => %186 = (%t112, %t122);
      %187 = concatenate(%186) /* ty=Tensor[(?), float64] */;
      tensor1_float64(%187) /* ty=tensor_float64_t[] */,
    },
    tensor2_float64(%t212: Tensor[(?, ?), float64]) => match? (%y2) {
      tensor2_float64(%t222: Tensor[(?, ?), float64]) => %188 = (%t212, %t222);
      %189 = concatenate(%188) /* ty=Tensor[(?, ?), float64] */;
      tensor2_float64(%189) /* ty=tensor_float64_t[] */,
    },
    tensor3_float64(%t312: Tensor[(?, ?, ?), float64]) => match? (%y2) {
      tensor3_float64(%t322: Tensor[(?, ?, ?), float64]) => %190 = (%t312, %t322);
      %191 = concatenate(%190) /* ty=Tensor[(?, ?, ?), float64] */;
      tensor3_float64(%191) /* ty=tensor_float64_t[] */,
    },
    tensor4_float64(%t412: Tensor[(?, ?, ?, ?), float64]) => match? (%y2) {
      tensor4_float64(%t422: Tensor[(?, ?, ?, ?), float64]) => %192 = (%t412, %t422);
      %193 = concatenate(%192) /* ty=Tensor[(?, ?, ?, ?), float64] */;
      tensor4_float64(%193) /* ty=tensor_float64_t[] */,
    },
  }
}

def @tensor_array_scatter_float32(%tensor_array13: List[tensor_float32_t[]], %indices3: Tensor[(?), int32], %values3: List[tensor_float32_t[]]) -> List[tensor_float32_t[]] {
  %194 = shape_of(%indices3, dtype="int32") /* ty=Tensor[(1), int32] */;
  %195 = take(%194, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float32(%tensor_array13, 0 /* ty=int32 */, %195, %indices3, %values3) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_write_int8(%tensor_array14: List[tensor_int8_t[]], %x7: int32, %v1: tensor_int8_t[]) -> List[tensor_int8_t[]] {
  @update(%tensor_array14, %x7, %v1) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_stack_float16(%tensor_array15: List[tensor_float16_t[]]) -> tensor_float16_t[] {
  %196 = @map(@tensor_expand_dims_float16, %tensor_array15) /* ty=List[tensor_float16_t[]] */;
  %197 = @hd(%196) /* ty=tensor_float16_t[] */;
  %198 = @tl(%196) /* ty=List[tensor_float16_t[]] */;
  @foldl(@tensor_concatenate_float16, %197, %198) /* ty=tensor_float16_t[] */
}

def @ta_split_helper_float16(%tensor_array16: List[tensor_float16_t[]], %value13: tensor_float16_t[], %offset13: int32, %current13: int32, %limit13: int32, %lengths5: Tensor[(?), int32]) -> List[tensor_float16_t[]] {
  %199 = equal(%current13, %limit13) /* ty=bool */;
  if (%199) {
    %tensor_array16
  } else {
    %200 = take(%lengths5, %current13) /* ty=int32 */;
    %201 = add(%offset13, %200) /* ty=int32 */;
    %202 = add(%current13, 1 /* ty=int32 */) /* ty=int32 */;
    %203 = @ta_split_helper_float16(%tensor_array16, %value13, %201, %202, %limit13, %lengths5) /* ty=List[tensor_float16_t[]] */;
    %204 = take(%lengths5, %current13) /* ty=int32 */;
    %205 = add(%204, %offset13) /* ty=int32 */;
    %206 = @tensor_take_float16(%value13, %offset13, %205) /* ty=tensor_float16_t[] */;
    @tensor_array_write_float16(%203, %current13, %206) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_int64(%i13: int32, %up13: int32, %t28: Tensor[(?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %207 = equal(%i13, %up13) /* ty=bool */;
  if (%207) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %208 = take(%t28, %i13, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    %209 = tensor3_int64(%208) /* ty=tensor_int64_t[] */;
    %210 = add(%i13, 1 /* ty=int32 */) /* ty=int32 */;
    %211 = @tensor_array_unstack_tensor4_helper_int64(%210, %up13, %t28) /* ty=List[tensor_int64_t[]] */;
    Cons(%209, %211) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_int8(%i14: int32, %up14: int32, %t29: Tensor[(?), int8]) -> List[tensor_int8_t[]] {
  %212 = equal(%i14, %up14) /* ty=bool */;
  if (%212) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %213 = take(%t29, %i14) /* ty=int8 */;
    %214 = tensor0_int8(%213) /* ty=tensor_int8_t[] */;
    %215 = add(%i14, 1 /* ty=int32 */) /* ty=int32 */;
    %216 = @tensor_array_unstack_tensor1_helper_int8(%215, %up14, %t29) /* ty=List[tensor_int8_t[]] */;
    Cons(%214, %216) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_split_float16(%tensor_array17: List[tensor_float16_t[]], %value3: tensor_float16_t[], %lengths6: Tensor[(?), int32]) -> List[tensor_float16_t[]] {
  %217 = shape_of(%lengths6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %218 = take(%217, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float16(%tensor_array17, %value3, 0 /* ty=int32 */, 0 /* ty=int32 */, %218, %lengths6) /* ty=List[tensor_float16_t[]] */
}

def @map_accuml[A, B, C](%f: fn (A, B) -> (A, C), %init: A, %xs: List[B]) -> (A, List[C]) {
  let %updater: fn ((A, List[C]), B) -> (A, List[C]) = fn (%acc: (A, List[C]), %x8: B) -> (A, List[C]) {
    %219 = %acc.0;
    let %f_out: (A, C) = %f(%219, %x8) /* ty=(A, C) */;
    %220 = %f_out.0;
    %221 = %f_out.1;
    %222 = %acc.1;
    %223 = Cons(%221, %222) /* ty=List[C] */;
    (%220, %223)
  };
  %224 = Nil /* ty=List[C] */;
  %225 = (%init, %224);
  @foldl(%updater, %225, %xs) /* ty=(A, List[C]) */
}

def @tensor_array_scatter_float16(%tensor_array18: List[tensor_float16_t[]], %indices4: Tensor[(?), int32], %values4: List[tensor_float16_t[]]) -> List[tensor_float16_t[]] {
  %226 = shape_of(%indices4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %227 = take(%226, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float16(%tensor_array18, 0 /* ty=int32 */, %227, %indices4, %values4) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor6_helper_float16(%i15: int32, %up15: int32, %t30: Tensor[(?, ?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %228 = equal(%i15, %up15) /* ty=bool */;
  if (%228) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %229 = take(%t30, %i15, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    %230 = tensor5_float16(%229) /* ty=tensor_float16_t[] */;
    %231 = add(%i15, 1 /* ty=int32 */) /* ty=int32 */;
    %232 = @tensor_array_unstack_tensor6_helper_float16(%231, %up15, %t30) /* ty=List[tensor_float16_t[]] */;
    Cons(%230, %232) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor5_float16(%tensor13: Tensor[(?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %233 = shape_of(%tensor13, dtype="int32") /* ty=Tensor[(5), int32] */;
  %234 = take(%233, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float16(0 /* ty=int32 */, %234, %tensor13) /* ty=List[tensor_float16_t[]] */
}

def @tmap[A, B](%f1: fn (A) -> B, %t36: Tree[A]) -> Tree[B] {
  match (%t36) {
    Rose(%v2: A, %sub_trees: List[Tree[A]]) => {
      let %list_f: fn (Tree[A]) -> Tree[B] = fn (%tt: Tree[A]) -> Tree[B] {
        @tmap(%f1, %tt) /* ty=Tree[B] */
      };
      %235 = %f1(%v2) /* ty=B */;
      %236 = @map(%list_f, %sub_trees) /* ty=List[Tree[B]] */;
      Rose(%235, %236) /* ty=Tree[B] */
    },
  }
}

def @tensor_array_unstack_tensor4_float16(%tensor14: Tensor[(?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %237 = shape_of(%tensor14, dtype="int32") /* ty=Tensor[(4), int32] */;
  %238 = take(%237, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float16(0 /* ty=int32 */, %238, %tensor14) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_concat_int16(%tensor_array19: List[tensor_int16_t[]]) -> tensor_int16_t[] {
  match? (%tensor_array19) {
    Nil => tensor_nil_int16 /* ty=tensor_int16_t[] */,
    Cons(%hd1: tensor_int16_t[], %tl1: List[tensor_int16_t[]]) => match? (%tl1) {
      Nil => %hd1,
      _ => %239 = @tensor_array_concat_int16(%tl1) /* ty=tensor_int16_t[] */;
      @tensor_concatenate_int16(%hd1, %239) /* ty=tensor_int16_t[] */,
    },
  }
}

def @tensor_array_stack_float64(%tensor_array20: List[tensor_float64_t[]]) -> tensor_float64_t[] {
  %240 = @map(@tensor_expand_dims_float64, %tensor_array20) /* ty=List[tensor_float64_t[]] */;
  %241 = @hd(%240) /* ty=tensor_float64_t[] */;
  %242 = @tl(%240) /* ty=List[tensor_float64_t[]] */;
  @foldl(@tensor_concatenate_float64, %241, %242) /* ty=tensor_float64_t[] */
}

def @tensor_array_unstack_tensor4_helper_float16(%i16: int32, %up16: int32, %t37: Tensor[(?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %243 = equal(%i16, %up16) /* ty=bool */;
  if (%243) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %244 = take(%t37, %i16, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    %245 = tensor3_float16(%244) /* ty=tensor_float16_t[] */;
    %246 = add(%i16, 1 /* ty=int32 */) /* ty=int32 */;
    %247 = @tensor_array_unstack_tensor4_helper_float16(%246, %up16, %t37) /* ty=List[tensor_float16_t[]] */;
    Cons(%245, %247) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_float16(%i17: int32, %up17: int32, %t38: Tensor[(?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %248 = equal(%i17, %up17) /* ty=bool */;
  if (%248) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %249 = take(%t38, %i17, axis=0) /* ty=Tensor[(?, ?), float16] */;
    %250 = tensor2_float16(%249) /* ty=tensor_float16_t[] */;
    %251 = add(%i17, 1 /* ty=int32 */) /* ty=int32 */;
    %252 = @tensor_array_unstack_tensor3_helper_float16(%251, %up17, %t38) /* ty=List[tensor_float16_t[]] */;
    Cons(%250, %252) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_float16(%tensor15: Tensor[(?, ?), float16]) -> List[tensor_float16_t[]] {
  %253 = shape_of(%tensor15, dtype="int32") /* ty=Tensor[(2), int32] */;
  %254 = take(%253, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float16(0 /* ty=int32 */, %254, %tensor15) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor2_helper_float16(%i18: int32, %up18: int32, %t39: Tensor[(?, ?), float16]) -> List[tensor_float16_t[]] {
  %255 = equal(%i18, %up18) /* ty=bool */;
  if (%255) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %256 = take(%t39, %i18, axis=0) /* ty=Tensor[(?), float16] */;
    %257 = tensor1_float16(%256) /* ty=tensor_float16_t[] */;
    %258 = add(%i18, 1 /* ty=int32 */) /* ty=int32 */;
    %259 = @tensor_array_unstack_tensor2_helper_float16(%258, %up18, %t39) /* ty=List[tensor_float16_t[]] */;
    Cons(%257, %259) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_scatter_uint8(%tensor_array21: List[tensor_uint8_t[]], %indices5: Tensor[(?), int32], %values5: List[tensor_uint8_t[]]) -> List[tensor_uint8_t[]] {
  %260 = shape_of(%indices5, dtype="int32") /* ty=Tensor[(1), int32] */;
  %261 = take(%260, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_uint8(%tensor_array21, 0 /* ty=int32 */, %261, %indices5, %values5) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor1_float16(%tensor16: Tensor[(?), float16]) -> List[tensor_float16_t[]] {
  %262 = shape_of(%tensor16, dtype="int32") /* ty=Tensor[(1), int32] */;
  %263 = take(%262, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float16(0 /* ty=int32 */, %263, %tensor16) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_scatter_helper_int64(%ta1: List[tensor_int64_t[]], %current2: int32, %limit2: int32, %indices_1: Tensor[(?), int32], %values_1: List[tensor_int64_t[]]) -> List[tensor_int64_t[]] {
  %264 = equal(%current2, %limit2) /* ty=bool */;
  if (%264) {
    %ta1
  } else {
    %265 = take(%indices_1, %current2) /* ty=int32 */;
    %266 = @tensor_array_read_int64(%values_1, %current2) /* ty=tensor_int64_t[] */;
    %267 = @tensor_array_write_int64(%ta1, %265, %266) /* ty=List[tensor_int64_t[]] */;
    %268 = add(%current2, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int64(%267, %268, %limit2, %indices_1, %values_1) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_expand_dims_int8(%x9: tensor_int8_t[]) -> tensor_int8_t[] {
  match? (%x9) {
    tensor0_int8(%t01: int8) => %269 = expand_dims(%t01, axis=0) /* ty=Tensor[(?), int8] */;
    tensor1_int8(%269) /* ty=tensor_int8_t[] */,
    tensor1_int8(%t110: Tensor[(?), int8]) => %270 = expand_dims(%t110, axis=0) /* ty=Tensor[(?, ?), int8] */;
    tensor2_int8(%270) /* ty=tensor_int8_t[] */,
    tensor2_int8(%t210: Tensor[(?, ?), int8]) => %271 = expand_dims(%t210, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    tensor3_int8(%271) /* ty=tensor_int8_t[] */,
    tensor3_int8(%t310: Tensor[(?, ?, ?), int8]) => %272 = expand_dims(%t310, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    tensor4_int8(%272) /* ty=tensor_int8_t[] */,
    tensor4_int8(%t46: Tensor[(?, ?, ?, ?), int8]) => %273 = expand_dims(%t46, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    tensor5_int8(%273) /* ty=tensor_int8_t[] */,
    tensor5_int8(%t54: Tensor[(?, ?, ?, ?, ?), int8]) => %274 = expand_dims(%t54, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int8] */;
    tensor6_int8(%274) /* ty=tensor_int8_t[] */,
  }
}

def @tensor_array_float16(%x10: int32) -> List[tensor_float16_t[]] {
  %275 = equal(%x10, 0 /* ty=int32 */) /* ty=bool */;
  if (%275) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %276 = tensor_nil_float16 /* ty=tensor_float16_t[] */;
    %277 = subtract(%x10, 1 /* ty=int32 */) /* ty=int32 */;
    %278 = @tensor_array_float16(%277) /* ty=List[tensor_float16_t[]] */;
    Cons(%276, %278) /* ty=List[tensor_float16_t[]] */
  }
}

def @main(%input-0: Tensor[(128), int32], %keys: Tensor[(6), int32], %values6: Tensor[(6), int32]) -> (Tensor[(128), int32], Tensor[(1), int32]) {
  %279 = contrib.hash_table(key_dtype="int32", value_dtype="int32", dtype="custom[hashtable]64") /* ty=Tensor[(1), custom[hashtable]64] */;
  %280 = contrib.lookup_table_find(%279, %input-0, meta[relay.Constant][18] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, key_dtype="int32", value_dtype="int32", dtype="int32") /* ty=Tensor[(128), int32] */;
  %281 = contrib.lookup_table_find(%279, %input-0, meta[relay.Constant][18] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, key_dtype="int32", value_dtype="int32", dtype="int32") /* ty=Tensor[(128), int32] */;
  %282 = add(%280, %281) /* ty=Tensor[(128), int32] */;
  %283 = contrib.lookup_table_find(%279, %input-0, meta[relay.Constant][18] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, key_dtype="int32", value_dtype="int32", dtype="int32") /* ty=Tensor[(128), int32] */;
  %284 = add(%282, %283) /* ty=Tensor[(128), int32] */;
  %285 = contrib.lookup_table_import(%279, %keys, %values6, key_dtype="int32", value_dtype="int32") /* ty=Tensor[(1), int32] */;
  (%284, %285)
}

def @tensor_array_int64(%x11: int32) -> List[tensor_int64_t[]] {
  %286 = equal(%x11, 0 /* ty=int32 */) /* ty=bool */;
  if (%286) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %287 = tensor_nil_int64 /* ty=tensor_int64_t[] */;
    %288 = subtract(%x11, 1 /* ty=int32 */) /* ty=int32 */;
    %289 = @tensor_array_int64(%288) /* ty=List[tensor_int64_t[]] */;
    Cons(%287, %289) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_concat_float16(%tensor_array22: List[tensor_float16_t[]]) -> tensor_float16_t[] {
  match? (%tensor_array22) {
    Nil => tensor_nil_float16 /* ty=tensor_float16_t[] */,
    Cons(%hd2: tensor_float16_t[], %tl2: List[tensor_float16_t[]]) => match? (%tl2) {
      Nil => %hd2,
      _ => %290 = @tensor_array_concat_float16(%tl2) /* ty=tensor_float16_t[] */;
      @tensor_concatenate_float16(%hd2, %290) /* ty=tensor_float16_t[] */,
    },
  }
}

def @tensor_expand_dims_int32(%x12: tensor_int32_t[]) -> tensor_int32_t[] {
  match? (%x12) {
    tensor0_int32(%t02: int32) => %291 = expand_dims(%t02, axis=0) /* ty=Tensor[(?), int32] */;
    tensor1_int32(%291) /* ty=tensor_int32_t[] */,
    tensor1_int32(%t113: Tensor[(?), int32]) => %292 = expand_dims(%t113, axis=0) /* ty=Tensor[(?, ?), int32] */;
    tensor2_int32(%292) /* ty=tensor_int32_t[] */,
    tensor2_int32(%t213: Tensor[(?, ?), int32]) => %293 = expand_dims(%t213, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    tensor3_int32(%293) /* ty=tensor_int32_t[] */,
    tensor3_int32(%t313: Tensor[(?, ?, ?), int32]) => %294 = expand_dims(%t313, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    tensor4_int32(%294) /* ty=tensor_int32_t[] */,
    tensor4_int32(%t47: Tensor[(?, ?, ?, ?), int32]) => %295 = expand_dims(%t47, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    tensor5_int32(%295) /* ty=tensor_int32_t[] */,
    tensor5_int32(%t55: Tensor[(?, ?, ?, ?, ?), int32]) => %296 = expand_dims(%t55, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int32] */;
    tensor6_int32(%296) /* ty=tensor_int32_t[] */,
  }
}

def @tensor_array_write_float16(%tensor_array23: List[tensor_float16_t[]], %x13: int32, %v3: tensor_float16_t[]) -> List[tensor_float16_t[]] {
  @update(%tensor_array23, %x13, %v3) /* ty=List[tensor_float16_t[]] */
}

def @tensor_take_float16(%tensor17: tensor_float16_t[], %lower3: int32, %upper3: int32) -> tensor_float16_t[] {
  match? (%tensor17) {
    tensor1_float16(%t114: Tensor[(?), float16]) => %297 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][19], dtype="int32") /* ty=Tensor[(?), int32] */;
    %298 = take(%t114, %297) /* ty=Tensor[(?), float16] */;
    tensor1_float16(%298) /* ty=tensor_float16_t[] */,
    tensor2_float16(%t214: Tensor[(?, ?), float16]) => %299 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][20], dtype="int32") /* ty=Tensor[(?), int32] */;
    %300 = take(%t214, %299, axis=0) /* ty=Tensor[(?, ?), float16] */;
    tensor2_float16(%300) /* ty=tensor_float16_t[] */,
    tensor3_float16(%t314: Tensor[(?, ?, ?), float16]) => %301 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][21], dtype="int32") /* ty=Tensor[(?), int32] */;
    %302 = take(%t314, %301, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    tensor3_float16(%302) /* ty=tensor_float16_t[] */,
    tensor4_float16(%t48: Tensor[(?, ?, ?, ?), float16]) => %303 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][22], dtype="int32") /* ty=Tensor[(?), int32] */;
    %304 = take(%t48, %303, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    tensor4_float16(%304) /* ty=tensor_float16_t[] */,
    tensor5_float16(%t56: Tensor[(?, ?, ?, ?, ?), float16]) => %305 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][23], dtype="int32") /* ty=Tensor[(?), int32] */;
    %306 = take(%t56, %305, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    tensor5_float16(%306) /* ty=tensor_float16_t[] */,
    tensor6_float16(%t64: Tensor[(?, ?, ?, ?, ?, ?), float16]) => %307 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][24], dtype="int32") /* ty=Tensor[(?), int32] */;
    %308 = take(%t64, %307, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float16] */;
    tensor6_float16(%308) /* ty=tensor_float16_t[] */,
  }
}

def @tensor_array_unstack_tensor1_int32(%tensor18: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %309 = shape_of(%tensor18, dtype="int32") /* ty=Tensor[(1), int32] */;
  %310 = take(%309, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int32(0 /* ty=int32 */, %310, %tensor18) /* ty=List[tensor_int32_t[]] */
}

def @tensor_concatenate_float16(%x14: tensor_float16_t[], %y3: tensor_float16_t[]) -> tensor_float16_t[] {
  match? (%x14) {
    tensor1_float16(%t115: Tensor[(?), float16]) => match? (%y3) {
      tensor1_float16(%t123: Tensor[(?), float16]) => %311 = (%t115, %t123);
      %312 = concatenate(%311) /* ty=Tensor[(?), float16] */;
      tensor1_float16(%312) /* ty=tensor_float16_t[] */,
    },
    tensor2_float16(%t215: Tensor[(?, ?), float16]) => match? (%y3) {
      tensor2_float16(%t223: Tensor[(?, ?), float16]) => %313 = (%t215, %t223);
      %314 = concatenate(%313) /* ty=Tensor[(?, ?), float16] */;
      tensor2_float16(%314) /* ty=tensor_float16_t[] */,
    },
    tensor3_float16(%t315: Tensor[(?, ?, ?), float16]) => match? (%y3) {
      tensor3_float16(%t323: Tensor[(?, ?, ?), float16]) => %315 = (%t315, %t323);
      %316 = concatenate(%315) /* ty=Tensor[(?, ?, ?), float16] */;
      tensor3_float16(%316) /* ty=tensor_float16_t[] */,
    },
    tensor4_float16(%t413: Tensor[(?, ?, ?, ?), float16]) => match? (%y3) {
      tensor4_float16(%t423: Tensor[(?, ?, ?, ?), float16]) => %317 = (%t413, %t423);
      %318 = concatenate(%317) /* ty=Tensor[(?, ?, ?, ?), float16] */;
      tensor4_float16(%318) /* ty=tensor_float16_t[] */,
    },
  }
}

def @tensor_array_uint16(%x15: int32) -> List[tensor_uint16_t[]] {
  %319 = equal(%x15, 0 /* ty=int32 */) /* ty=bool */;
  if (%319) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %320 = tensor_nil_uint16 /* ty=tensor_uint16_t[] */;
    %321 = subtract(%x15, 1 /* ty=int32 */) /* ty=int32 */;
    %322 = @tensor_array_uint16(%321) /* ty=List[tensor_uint16_t[]] */;
    Cons(%320, %322) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int64(%tensor19: Tensor[(?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %323 = shape_of(%tensor19, dtype="int32") /* ty=Tensor[(5), int32] */;
  %324 = take(%323, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int64(0 /* ty=int32 */, %324, %tensor19) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor3_helper_float64(%i19: int32, %up19: int32, %t40: Tensor[(?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %325 = equal(%i19, %up19) /* ty=bool */;
  if (%325) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %326 = take(%t40, %i19, axis=0) /* ty=Tensor[(?, ?), float64] */;
    %327 = tensor2_float64(%326) /* ty=tensor_float64_t[] */;
    %328 = add(%i19, 1 /* ty=int32 */) /* ty=int32 */;
    %329 = @tensor_array_unstack_tensor3_helper_float64(%328, %up19, %t40) /* ty=List[tensor_float64_t[]] */;
    Cons(%327, %329) /* ty=List[tensor_float64_t[]] */
  }
}

def @rev[A](%xs1: List[A]) -> List[A] {
  %330 = @flip(Cons) /* ty=fn (List[A], A) -> List[A] */;
  %331 = Nil /* ty=List[A] */;
  @foldl(%330, %331, %xs1) /* ty=List[A] */
}

def @tensor_array_unstack_tensor2_helper_float32(%i20: int32, %up20: int32, %t49: Tensor[(?, ?), float32]) -> List[tensor_float32_t[]] {
  %332 = equal(%i20, %up20) /* ty=bool */;
  if (%332) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %333 = take(%t49, %i20, axis=0) /* ty=Tensor[(?), float32] */;
    %334 = tensor1_float32(%333) /* ty=tensor_float32_t[] */;
    %335 = add(%i20, 1 /* ty=int32 */) /* ty=int32 */;
    %336 = @tensor_array_unstack_tensor2_helper_float32(%335, %up20, %t49) /* ty=List[tensor_float32_t[]] */;
    Cons(%334, %336) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_float32(%tensor20: Tensor[(?, ?), float32]) -> List[tensor_float32_t[]] {
  %337 = shape_of(%tensor20, dtype="int32") /* ty=Tensor[(2), int32] */;
  %338 = take(%337, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float32(0 /* ty=int32 */, %338, %tensor20) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor5_helper_float16(%i21: int32, %up21: int32, %t50: Tensor[(?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %339 = equal(%i21, %up21) /* ty=bool */;
  if (%339) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %340 = take(%t50, %i21, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    %341 = tensor4_float16(%340) /* ty=tensor_float16_t[] */;
    %342 = add(%i21, 1 /* ty=int32 */) /* ty=int32 */;
    %343 = @tensor_array_unstack_tensor5_helper_float16(%342, %up21, %t50) /* ty=List[tensor_float16_t[]] */;
    Cons(%341, %343) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_int8(%i22: int32, %up22: int32, %t57: Tensor[(?, ?), int8]) -> List[tensor_int8_t[]] {
  %344 = equal(%i22, %up22) /* ty=bool */;
  if (%344) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %345 = take(%t57, %i22, axis=0) /* ty=Tensor[(?), int8] */;
    %346 = tensor1_int8(%345) /* ty=tensor_int8_t[] */;
    %347 = add(%i22, 1 /* ty=int32 */) /* ty=int32 */;
    %348 = @tensor_array_unstack_tensor2_helper_int8(%347, %up22, %t57) /* ty=List[tensor_int8_t[]] */;
    Cons(%346, %348) /* ty=List[tensor_int8_t[]] */
  }
}

def @ta_split_helper_int16(%tensor_array24: List[tensor_int16_t[]], %value14: tensor_int16_t[], %offset14: int32, %current14: int32, %limit14: int32, %lengths7: Tensor[(?), int32]) -> List[tensor_int16_t[]] {
  %349 = equal(%current14, %limit14) /* ty=bool */;
  if (%349) {
    %tensor_array24
  } else {
    %350 = take(%lengths7, %current14) /* ty=int32 */;
    %351 = add(%offset14, %350) /* ty=int32 */;
    %352 = add(%current14, 1 /* ty=int32 */) /* ty=int32 */;
    %353 = @ta_split_helper_int16(%tensor_array24, %value14, %351, %352, %limit14, %lengths7) /* ty=List[tensor_int16_t[]] */;
    %354 = take(%lengths7, %current14) /* ty=int32 */;
    %355 = add(%354, %offset14) /* ty=int32 */;
    %356 = @tensor_take_int16(%value14, %offset14, %355) /* ty=tensor_int16_t[] */;
    @tensor_array_write_int16(%353, %current14, %356) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_concatenate_uint8(%x16: tensor_uint8_t[], %y4: tensor_uint8_t[]) -> tensor_uint8_t[] {
  match? (%x16) {
    tensor1_uint8(%t116: Tensor[(?), uint8]) => match? (%y4) {
      tensor1_uint8(%t124: Tensor[(?), uint8]) => %357 = (%t116, %t124);
      %358 = concatenate(%357) /* ty=Tensor[(?), uint8] */;
      tensor1_uint8(%358) /* ty=tensor_uint8_t[] */,
    },
    tensor2_uint8(%t216: Tensor[(?, ?), uint8]) => match? (%y4) {
      tensor2_uint8(%t224: Tensor[(?, ?), uint8]) => %359 = (%t216, %t224);
      %360 = concatenate(%359) /* ty=Tensor[(?, ?), uint8] */;
      tensor2_uint8(%360) /* ty=tensor_uint8_t[] */,
    },
    tensor3_uint8(%t316: Tensor[(?, ?, ?), uint8]) => match? (%y4) {
      tensor3_uint8(%t324: Tensor[(?, ?, ?), uint8]) => %361 = (%t316, %t324);
      %362 = concatenate(%361) /* ty=Tensor[(?, ?, ?), uint8] */;
      tensor3_uint8(%362) /* ty=tensor_uint8_t[] */,
    },
    tensor4_uint8(%t414: Tensor[(?, ?, ?, ?), uint8]) => match? (%y4) {
      tensor4_uint8(%t424: Tensor[(?, ?, ?, ?), uint8]) => %363 = (%t414, %t424);
      %364 = concatenate(%363) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
      tensor4_uint8(%364) /* ty=tensor_uint8_t[] */,
    },
  }
}

def @tensor_array_scatter_helper_float16(%ta2: List[tensor_float16_t[]], %current3: int32, %limit3: int32, %indices_2: Tensor[(?), int32], %values_2: List[tensor_float16_t[]]) -> List[tensor_float16_t[]] {
  %365 = equal(%current3, %limit3) /* ty=bool */;
  if (%365) {
    %ta2
  } else {
    %366 = take(%indices_2, %current3) /* ty=int32 */;
    %367 = @tensor_array_read_float16(%values_2, %current3) /* ty=tensor_float16_t[] */;
    %368 = @tensor_array_write_float16(%ta2, %366, %367) /* ty=List[tensor_float16_t[]] */;
    %369 = add(%current3, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float16(%368, %369, %limit3, %indices_2, %values_2) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_int32(%i23: int32, %up23: int32, %t58: Tensor[(?, ?), int32]) -> List[tensor_int32_t[]] {
  %370 = equal(%i23, %up23) /* ty=bool */;
  if (%370) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %371 = take(%t58, %i23, axis=0) /* ty=Tensor[(?), int32] */;
    %372 = tensor1_int32(%371) /* ty=tensor_int32_t[] */;
    %373 = add(%i23, 1 /* ty=int32 */) /* ty=int32 */;
    %374 = @tensor_array_unstack_tensor2_helper_int32(%373, %up23, %t58) /* ty=List[tensor_int32_t[]] */;
    Cons(%372, %374) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_concatenate_int16(%x17: tensor_int16_t[], %y5: tensor_int16_t[]) -> tensor_int16_t[] {
  match? (%x17) {
    tensor1_int16(%t117: Tensor[(?), int16]) => match? (%y5) {
      tensor1_int16(%t125: Tensor[(?), int16]) => %375 = (%t117, %t125);
      %376 = concatenate(%375) /* ty=Tensor[(?), int16] */;
      tensor1_int16(%376) /* ty=tensor_int16_t[] */,
    },
    tensor2_int16(%t217: Tensor[(?, ?), int16]) => match? (%y5) {
      tensor2_int16(%t225: Tensor[(?, ?), int16]) => %377 = (%t217, %t225);
      %378 = concatenate(%377) /* ty=Tensor[(?, ?), int16] */;
      tensor2_int16(%378) /* ty=tensor_int16_t[] */,
    },
    tensor3_int16(%t317: Tensor[(?, ?, ?), int16]) => match? (%y5) {
      tensor3_int16(%t325: Tensor[(?, ?, ?), int16]) => %379 = (%t317, %t325);
      %380 = concatenate(%379) /* ty=Tensor[(?, ?, ?), int16] */;
      tensor3_int16(%380) /* ty=tensor_int16_t[] */,
    },
    tensor4_int16(%t415: Tensor[(?, ?, ?, ?), int16]) => match? (%y5) {
      tensor4_int16(%t425: Tensor[(?, ?, ?, ?), int16]) => %381 = (%t415, %t425);
      %382 = concatenate(%381) /* ty=Tensor[(?, ?, ?, ?), int16] */;
      tensor4_int16(%382) /* ty=tensor_int16_t[] */,
    },
  }
}

def @tensor_expand_dims_float64(%x18: tensor_float64_t[]) -> tensor_float64_t[] {
  match? (%x18) {
    tensor0_float64(%t03: float64) => %383 = expand_dims(%t03, axis=0) /* ty=Tensor[(?), float64] */;
    tensor1_float64(%383) /* ty=tensor_float64_t[] */,
    tensor1_float64(%t118: Tensor[(?), float64]) => %384 = expand_dims(%t118, axis=0) /* ty=Tensor[(?, ?), float64] */;
    tensor2_float64(%384) /* ty=tensor_float64_t[] */,
    tensor2_float64(%t218: Tensor[(?, ?), float64]) => %385 = expand_dims(%t218, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    tensor3_float64(%385) /* ty=tensor_float64_t[] */,
    tensor3_float64(%t318: Tensor[(?, ?, ?), float64]) => %386 = expand_dims(%t318, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    tensor4_float64(%386) /* ty=tensor_float64_t[] */,
    tensor4_float64(%t410: Tensor[(?, ?, ?, ?), float64]) => %387 = expand_dims(%t410, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    tensor5_float64(%387) /* ty=tensor_float64_t[] */,
    tensor5_float64(%t59: Tensor[(?, ?, ?, ?, ?), float64]) => %388 = expand_dims(%t59, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float64] */;
    tensor6_float64(%388) /* ty=tensor_float64_t[] */,
  }
}

def @tensor_array_unstack_tensor3_helper_uint8(%i24: int32, %up24: int32, %t60: Tensor[(?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %389 = equal(%i24, %up24) /* ty=bool */;
  if (%389) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %390 = take(%t60, %i24, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    %391 = tensor2_uint8(%390) /* ty=tensor_uint8_t[] */;
    %392 = add(%i24, 1 /* ty=int32 */) /* ty=int32 */;
    %393 = @tensor_array_unstack_tensor3_helper_uint8(%392, %up24, %t60) /* ty=List[tensor_uint8_t[]] */;
    Cons(%391, %393) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_int8(%i25: int32, %up25: int32, %t65: Tensor[(?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %394 = equal(%i25, %up25) /* ty=bool */;
  if (%394) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %395 = take(%t65, %i25, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    %396 = tensor4_int8(%395) /* ty=tensor_int8_t[] */;
    %397 = add(%i25, 1 /* ty=int32 */) /* ty=int32 */;
    %398 = @tensor_array_unstack_tensor5_helper_int8(%397, %up25, %t65) /* ty=List[tensor_int8_t[]] */;
    Cons(%396, %398) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor3_float64(%tensor21: Tensor[(?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %399 = shape_of(%tensor21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = take(%399, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float64(0 /* ty=int32 */, %400, %tensor21) /* ty=List[tensor_float64_t[]] */
}

def @sum(%xs2: List[int32]) -> int32 {
  let %add_f: fn (int32, int32) -> int32 = fn (%x19: int32, %y6: int32) -> int32 {
    add(%x19, %y6) /* ty=int32 */
  };
  @foldl(%add_f, 0 /* ty=int32 */, %xs2) /* ty=int32 */
}

def @tensor_array_unstack_tensor3_int32(%tensor22: Tensor[(?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %401 = shape_of(%tensor22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = take(%401, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int32(0 /* ty=int32 */, %402, %tensor22) /* ty=List[tensor_int32_t[]] */
}

def @flip[A, B, C](%f2: fn (A, B) -> C) -> fn (B, A) -> C {
  fn (%b: B, %a: A) -> C {
    %f2(%a, %b) /* ty=C */
  }
}

def @tensor_array_read_int32(%tensor_array25: List[tensor_int32_t[]], %x20: int32) -> tensor_int32_t[] {
  @nth(%tensor_array25, %x20) /* ty=tensor_int32_t[] */
}

def @tensor_array_unstack_tensor6_float16(%tensor23: Tensor[(?, ?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %403 = shape_of(%tensor23, dtype="int32") /* ty=Tensor[(6), int32] */;
  %404 = take(%403, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float16(0 /* ty=int32 */, %404, %tensor23) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor1_float64(%tensor24: Tensor[(?), float64]) -> List[tensor_float64_t[]] {
  %405 = shape_of(%tensor24, dtype="int32") /* ty=Tensor[(1), int32] */;
  %406 = take(%405, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float64(0 /* ty=int32 */, %406, %tensor24) /* ty=List[tensor_float64_t[]] */
}

def @map[A, B](%f3: fn (A) -> B, %xs3: List[A]) -> List[B] {
  match (%xs3) {
    Cons(%x21: A, %rest: List[A]) => %407 = %f3(%x21) /* ty=B */;
    %408 = @map(%f3, %rest) /* ty=List[B] */;
    Cons(%407, %408) /* ty=List[B] */,
    Nil => Nil /* ty=List[B] */,
  }
}

def @nth[A](%xs4: List[A], %n: int32) -> A {
  %409 = equal(%n, 0 /* ty=int32 */) /* ty=bool */;
  if (%409) {
    @hd(%xs4) /* ty=A */
  } else {
    %410 = @tl(%xs4) /* ty=List[A] */;
    %411 = subtract(%n, 1 /* ty=int32 */) /* ty=int32 */;
    @nth(%410, %411) /* ty=A */
  }
}

def @tensor_array_unstack_tensor5_helper_float64(%i26: int32, %up26: int32, %t66: Tensor[(?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %412 = equal(%i26, %up26) /* ty=bool */;
  if (%412) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %413 = take(%t66, %i26, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    %414 = tensor4_float64(%413) /* ty=tensor_float64_t[] */;
    %415 = add(%i26, 1 /* ty=int32 */) /* ty=int32 */;
    %416 = @tensor_array_unstack_tensor5_helper_float64(%415, %up26, %t66) /* ty=List[tensor_float64_t[]] */;
    Cons(%414, %416) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor4_float64(%tensor25: Tensor[(?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %417 = shape_of(%tensor25, dtype="int32") /* ty=Tensor[(4), int32] */;
  %418 = take(%417, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float64(0 /* ty=int32 */, %418, %tensor25) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_float32(%x22: int32) -> List[tensor_float32_t[]] {
  %419 = equal(%x22, 0 /* ty=int32 */) /* ty=bool */;
  if (%419) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %420 = tensor_nil_float32 /* ty=tensor_float32_t[] */;
    %421 = subtract(%x22, 1 /* ty=int32 */) /* ty=int32 */;
    %422 = @tensor_array_float32(%421) /* ty=List[tensor_float32_t[]] */;
    Cons(%420, %422) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int64(%tensor26: Tensor[(?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %423 = shape_of(%tensor26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = take(%423, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int64(0 /* ty=int32 */, %424, %tensor26) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_write_uint16(%tensor_array26: List[tensor_uint16_t[]], %x23: int32, %v4: tensor_uint16_t[]) -> List[tensor_uint16_t[]] {
  @update(%tensor_array26, %x23, %v4) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_split_float32(%tensor_array27: List[tensor_float32_t[]], %value4: tensor_float32_t[], %lengths8: Tensor[(?), int32]) -> List[tensor_float32_t[]] {
  %425 = shape_of(%lengths8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %426 = take(%425, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float32(%tensor_array27, %value4, 0 /* ty=int32 */, 0 /* ty=int32 */, %426, %lengths8) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor1_int8(%tensor27: Tensor[(?), int8]) -> List[tensor_int8_t[]] {
  %427 = shape_of(%tensor27, dtype="int32") /* ty=Tensor[(1), int32] */;
  %428 = take(%427, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int8(0 /* ty=int32 */, %428, %tensor27) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_concat_float32(%tensor_array28: List[tensor_float32_t[]]) -> tensor_float32_t[] {
  match? (%tensor_array28) {
    Nil => tensor_nil_float32 /* ty=tensor_float32_t[] */,
    Cons(%hd3: tensor_float32_t[], %tl3: List[tensor_float32_t[]]) => match? (%tl3) {
      Nil => %hd3,
      _ => %429 = @tensor_array_concat_float32(%tl3) /* ty=tensor_float32_t[] */;
      @tensor_concatenate_float32(%hd3, %429) /* ty=tensor_float32_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor5_int16(%tensor28: Tensor[(?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %430 = shape_of(%tensor28, dtype="int32") /* ty=Tensor[(5), int32] */;
  %431 = take(%430, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int16(0 /* ty=int32 */, %431, %tensor28) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_float64(%x24: int32) -> List[tensor_float64_t[]] {
  %432 = equal(%x24, 0 /* ty=int32 */) /* ty=bool */;
  if (%432) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %433 = tensor_nil_float64 /* ty=tensor_float64_t[] */;
    %434 = subtract(%x24, 1 /* ty=int32 */) /* ty=int32 */;
    %435 = @tensor_array_float64(%434) /* ty=List[tensor_float64_t[]] */;
    Cons(%433, %435) /* ty=List[tensor_float64_t[]] */
  }
}

def @compose[A, B, C](%f4: fn (B) -> C, %g: fn (A) -> B) -> fn (A) -> C {
  fn (%x25: A) -> C {
    %436 = %g(%x25) /* ty=B */;
    %f4(%436) /* ty=C */
  }
}

def @tensor_array_unstack_tensor4_int8(%tensor29: Tensor[(?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %437 = shape_of(%tensor29, dtype="int32") /* ty=Tensor[(4), int32] */;
  %438 = take(%437, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int8(0 /* ty=int32 */, %438, %tensor29) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor5_helper_uint16(%i27: int32, %up27: int32, %t67: Tensor[(?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %439 = equal(%i27, %up27) /* ty=bool */;
  if (%439) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %440 = take(%t67, %i27, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    %441 = tensor4_uint16(%440) /* ty=tensor_uint16_t[] */;
    %442 = add(%i27, 1 /* ty=int32 */) /* ty=int32 */;
    %443 = @tensor_array_unstack_tensor5_helper_uint16(%442, %up27, %t67) /* ty=List[tensor_uint16_t[]] */;
    Cons(%441, %443) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_float32(%i28: int32, %up28: int32, %t68: Tensor[(?), float32]) -> List[tensor_float32_t[]] {
  %444 = equal(%i28, %up28) /* ty=bool */;
  if (%444) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %445 = take(%t68, %i28) /* ty=float32 */;
    %446 = tensor0_float32(%445) /* ty=tensor_float32_t[] */;
    %447 = add(%i28, 1 /* ty=int32 */) /* ty=int32 */;
    %448 = @tensor_array_unstack_tensor1_helper_float32(%447, %up28, %t68) /* ty=List[tensor_float32_t[]] */;
    Cons(%446, %448) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_expand_dims_uint16(%x26: tensor_uint16_t[]) -> tensor_uint16_t[] {
  match? (%x26) {
    tensor0_uint16(%t04: uint16) => %449 = expand_dims(%t04, axis=0) /* ty=Tensor[(?), uint16] */;
    tensor1_uint16(%449) /* ty=tensor_uint16_t[] */,
    tensor1_uint16(%t119: Tensor[(?), uint16]) => %450 = expand_dims(%t119, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    tensor2_uint16(%450) /* ty=tensor_uint16_t[] */,
    tensor2_uint16(%t219: Tensor[(?, ?), uint16]) => %451 = expand_dims(%t219, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    tensor3_uint16(%451) /* ty=tensor_uint16_t[] */,
    tensor3_uint16(%t319: Tensor[(?, ?, ?), uint16]) => %452 = expand_dims(%t319, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    tensor4_uint16(%452) /* ty=tensor_uint16_t[] */,
    tensor4_uint16(%t416: Tensor[(?, ?, ?, ?), uint16]) => %453 = expand_dims(%t416, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    tensor5_uint16(%453) /* ty=tensor_uint16_t[] */,
    tensor5_uint16(%t510: Tensor[(?, ?, ?, ?, ?), uint16]) => %454 = expand_dims(%t510, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint16] */;
    tensor6_uint16(%454) /* ty=tensor_uint16_t[] */,
  }
}

def @tensor_array_scatter_helper_uint16(%ta3: List[tensor_uint16_t[]], %current4: int32, %limit4: int32, %indices_3: Tensor[(?), int32], %values_3: List[tensor_uint16_t[]]) -> List[tensor_uint16_t[]] {
  %455 = equal(%current4, %limit4) /* ty=bool */;
  if (%455) {
    %ta3
  } else {
    %456 = take(%indices_3, %current4) /* ty=int32 */;
    %457 = @tensor_array_read_uint16(%values_3, %current4) /* ty=tensor_uint16_t[] */;
    %458 = @tensor_array_write_uint16(%ta3, %456, %457) /* ty=List[tensor_uint16_t[]] */;
    %459 = add(%current4, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_uint16(%458, %459, %limit4, %indices_3, %values_3) /* ty=List[tensor_uint16_t[]] */
  }
}

def @unfoldr[A, B](%f5: fn (A) -> Option[(A, B)], %seed: A) -> List[B] {
  %460 = %f5(%seed) /* ty=Option[(A, B)] */;
  match (%460) {
    Some(%val: (A, B)) => %461 = %val.1;
    %462 = %val.0;
    %463 = @unfoldr(%f5, %462) /* ty=List[B] */;
    Cons(%461, %463) /* ty=List[B] */,
    None => Nil /* ty=List[B] */,
  }
}

def @tensor_array_unstack_tensor1_helper_uint8(%i29: int32, %up29: int32, %t69: Tensor[(?), uint8]) -> List[tensor_uint8_t[]] {
  %464 = equal(%i29, %up29) /* ty=bool */;
  if (%464) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %465 = take(%t69, %i29) /* ty=uint8 */;
    %466 = tensor0_uint8(%465) /* ty=tensor_uint8_t[] */;
    %467 = add(%i29, 1 /* ty=int32 */) /* ty=int32 */;
    %468 = @tensor_array_unstack_tensor1_helper_uint8(%467, %up29, %t69) /* ty=List[tensor_uint8_t[]] */;
    Cons(%466, %468) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_int8(%i30: int32, %up30: int32, %t70: Tensor[(?, ?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %469 = equal(%i30, %up30) /* ty=bool */;
  if (%469) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %470 = take(%t70, %i30, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    %471 = tensor5_int8(%470) /* ty=tensor_int8_t[] */;
    %472 = add(%i30, 1 /* ty=int32 */) /* ty=int32 */;
    %473 = @tensor_array_unstack_tensor6_helper_int8(%472, %up30, %t70) /* ty=List[tensor_int8_t[]] */;
    Cons(%471, %473) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_concatenate_float32(%x27: tensor_float32_t[], %y7: tensor_float32_t[]) -> tensor_float32_t[] {
  match? (%x27) {
    tensor1_float32(%t1110: Tensor[(?), float32]) => match? (%y7) {
      tensor1_float32(%t126: Tensor[(?), float32]) => %474 = (%t1110, %t126);
      %475 = concatenate(%474) /* ty=Tensor[(?), float32] */;
      tensor1_float32(%475) /* ty=tensor_float32_t[] */,
    },
    tensor2_float32(%t2110: Tensor[(?, ?), float32]) => match? (%y7) {
      tensor2_float32(%t226: Tensor[(?, ?), float32]) => %476 = (%t2110, %t226);
      %477 = concatenate(%476) /* ty=Tensor[(?, ?), float32] */;
      tensor2_float32(%477) /* ty=tensor_float32_t[] */,
    },
    tensor3_float32(%t3110: Tensor[(?, ?, ?), float32]) => match? (%y7) {
      tensor3_float32(%t326: Tensor[(?, ?, ?), float32]) => %478 = (%t3110, %t326);
      %479 = concatenate(%478) /* ty=Tensor[(?, ?, ?), float32] */;
      tensor3_float32(%479) /* ty=tensor_float32_t[] */,
    },
    tensor4_float32(%t417: Tensor[(?, ?, ?, ?), float32]) => match? (%y7) {
      tensor4_float32(%t426: Tensor[(?, ?, ?, ?), float32]) => %480 = (%t417, %t426);
      %481 = concatenate(%480) /* ty=Tensor[(?, ?, ?, ?), float32] */;
      tensor4_float32(%481) /* ty=tensor_float32_t[] */,
    },
  }
}

def @filter[A](%f6: fn (A) -> bool, %xs5: List[A]) -> List[A] {
  match (%xs5) {
    Cons(%x28: A, %rest1: List[A]) => %482 = %f6(%x28) /* ty=bool */;
    if (%482) {
      %483 = @filter(%f6, %rest1) /* ty=List[A] */;
      Cons(%x28, %483) /* ty=List[A] */
    } else {
      @filter(%f6, %rest1) /* ty=List[A] */
    },
    Nil => Nil /* ty=List[A] */,
  }
}

def @tensor_array_read_float32(%tensor_array29: List[tensor_float32_t[]], %x29: int32) -> tensor_float32_t[] {
  @nth(%tensor_array29, %x29) /* ty=tensor_float32_t[] */
}

def @id[A](%x30: A) -> A {
  %x30
}

def @tensor_array_unstack_tensor3_uint8(%tensor30: Tensor[(?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %484 = shape_of(%tensor30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = take(%484, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_uint8(0 /* ty=int32 */, %485, %tensor30) /* ty=List[tensor_uint8_t[]] */
}

def @size[A](%t71: Tree[A]) -> int32 {
  match (%t71) {
    Rose(_, %sub_trees1: List[Tree[A]]) => %486 = @map(@size, %sub_trees1) /* ty=List[int32] */;
    %487 = @sum(%486) /* ty=int32 */;
    add(1 /* ty=int32 */, %487) /* ty=int32 */,
  }
}

def @tensor_take_int8(%tensor31: tensor_int8_t[], %lower4: int32, %upper4: int32) -> tensor_int8_t[] {
  match? (%tensor31) {
    tensor1_int8(%t120: Tensor[(?), int8]) => %488 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][25], dtype="int32") /* ty=Tensor[(?), int32] */;
    %489 = take(%t120, %488) /* ty=Tensor[(?), int8] */;
    tensor1_int8(%489) /* ty=tensor_int8_t[] */,
    tensor2_int8(%t220: Tensor[(?, ?), int8]) => %490 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][26], dtype="int32") /* ty=Tensor[(?), int32] */;
    %491 = take(%t220, %490, axis=0) /* ty=Tensor[(?, ?), int8] */;
    tensor2_int8(%491) /* ty=tensor_int8_t[] */,
    tensor3_int8(%t320: Tensor[(?, ?, ?), int8]) => %492 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][27], dtype="int32") /* ty=Tensor[(?), int32] */;
    %493 = take(%t320, %492, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    tensor3_int8(%493) /* ty=tensor_int8_t[] */,
    tensor4_int8(%t418: Tensor[(?, ?, ?, ?), int8]) => %494 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][28], dtype="int32") /* ty=Tensor[(?), int32] */;
    %495 = take(%t418, %494, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    tensor4_int8(%495) /* ty=tensor_int8_t[] */,
    tensor5_int8(%t511: Tensor[(?, ?, ?, ?, ?), int8]) => %496 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][29], dtype="int32") /* ty=Tensor[(?), int32] */;
    %497 = take(%t511, %496, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    tensor5_int8(%497) /* ty=tensor_int8_t[] */,
    tensor6_int8(%t610: Tensor[(?, ?, ?, ?, ?, ?), int8]) => %498 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][30], dtype="int32") /* ty=Tensor[(?), int32] */;
    %499 = take(%t610, %498, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int8] */;
    tensor6_int8(%499) /* ty=tensor_int8_t[] */,
  }
}

def @tensor_array_write_float64(%tensor_array30: List[tensor_float64_t[]], %x31: int32, %v5: tensor_float64_t[]) -> List[tensor_float64_t[]] {
  @update(%tensor_array30, %x31, %v5) /* ty=List[tensor_float64_t[]] */
}

def @tensor_take_float32(%tensor32: tensor_float32_t[], %lower5: int32, %upper5: int32) -> tensor_float32_t[] {
  match? (%tensor32) {
    tensor1_float32(%t127: Tensor[(?), float32]) => %500 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][31], dtype="int32") /* ty=Tensor[(?), int32] */;
    %501 = take(%t127, %500) /* ty=Tensor[(?), float32] */;
    tensor1_float32(%501) /* ty=tensor_float32_t[] */,
    tensor2_float32(%t227: Tensor[(?, ?), float32]) => %502 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][32], dtype="int32") /* ty=Tensor[(?), int32] */;
    %503 = take(%t227, %502, axis=0) /* ty=Tensor[(?, ?), float32] */;
    tensor2_float32(%503) /* ty=tensor_float32_t[] */,
    tensor3_float32(%t327: Tensor[(?, ?, ?), float32]) => %504 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][33], dtype="int32") /* ty=Tensor[(?), int32] */;
    %505 = take(%t327, %504, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    tensor3_float32(%505) /* ty=tensor_float32_t[] */,
    tensor4_float32(%t419: Tensor[(?, ?, ?, ?), float32]) => %506 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][34], dtype="int32") /* ty=Tensor[(?), int32] */;
    %507 = take(%t419, %506, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    tensor4_float32(%507) /* ty=tensor_float32_t[] */,
    tensor5_float32(%t512: Tensor[(?, ?, ?, ?, ?), float32]) => %508 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][35], dtype="int32") /* ty=Tensor[(?), int32] */;
    %509 = take(%t512, %508, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    tensor5_float32(%509) /* ty=tensor_float32_t[] */,
    tensor6_float32(%t611: Tensor[(?, ?, ?, ?, ?, ?), float32]) => %510 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][36], dtype="int32") /* ty=Tensor[(?), int32] */;
    %511 = take(%t611, %510, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float32] */;
    tensor6_float32(%511) /* ty=tensor_float32_t[] */,
  }
}

def @tensor_expand_dims_float32(%x32: tensor_float32_t[]) -> tensor_float32_t[] {
  match? (%x32) {
    tensor0_float32(%t05: float32) => %512 = expand_dims(%t05, axis=0) /* ty=Tensor[(?), float32] */;
    tensor1_float32(%512) /* ty=tensor_float32_t[] */,
    tensor1_float32(%t128: Tensor[(?), float32]) => %513 = expand_dims(%t128, axis=0) /* ty=Tensor[(?, ?), float32] */;
    tensor2_float32(%513) /* ty=tensor_float32_t[] */,
    tensor2_float32(%t228: Tensor[(?, ?), float32]) => %514 = expand_dims(%t228, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    tensor3_float32(%514) /* ty=tensor_float32_t[] */,
    tensor3_float32(%t328: Tensor[(?, ?, ?), float32]) => %515 = expand_dims(%t328, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    tensor4_float32(%515) /* ty=tensor_float32_t[] */,
    tensor4_float32(%t420: Tensor[(?, ?, ?, ?), float32]) => %516 = expand_dims(%t420, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    tensor5_float32(%516) /* ty=tensor_float32_t[] */,
    tensor5_float32(%t513: Tensor[(?, ?, ?, ?, ?), float32]) => %517 = expand_dims(%t513, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float32] */;
    tensor6_float32(%517) /* ty=tensor_float32_t[] */,
  }
}

def @tensor_array_write_float32(%tensor_array31: List[tensor_float32_t[]], %x33: int32, %v6: tensor_float32_t[]) -> List[tensor_float32_t[]] {
  @update(%tensor_array31, %x33, %v6) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor1_helper_float16(%i31: int32, %up31: int32, %t72: Tensor[(?), float16]) -> List[tensor_float16_t[]] {
  %518 = equal(%i31, %up31) /* ty=bool */;
  if (%518) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %519 = take(%t72, %i31) /* ty=float16 */;
    %520 = tensor0_float16(%519) /* ty=tensor_float16_t[] */;
    %521 = add(%i31, 1 /* ty=int32 */) /* ty=int32 */;
    %522 = @tensor_array_unstack_tensor1_helper_float16(%521, %up31, %t72) /* ty=List[tensor_float16_t[]] */;
    Cons(%520, %522) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_float32(%tensor33: Tensor[(?), float32]) -> List[tensor_float32_t[]] {
  %523 = shape_of(%tensor33, dtype="int32") /* ty=Tensor[(1), int32] */;
  %524 = take(%523, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float32(0 /* ty=int32 */, %524, %tensor33) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor3_helper_float32(%i32: int32, %up32: int32, %t73: Tensor[(?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %525 = equal(%i32, %up32) /* ty=bool */;
  if (%525) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %526 = take(%t73, %i32, axis=0) /* ty=Tensor[(?, ?), float32] */;
    %527 = tensor2_float32(%526) /* ty=tensor_float32_t[] */;
    %528 = add(%i32, 1 /* ty=int32 */) /* ty=int32 */;
    %529 = @tensor_array_unstack_tensor3_helper_float32(%528, %up32, %t73) /* ty=List[tensor_float32_t[]] */;
    Cons(%527, %529) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_float64(%tensor34: Tensor[(?, ?), float64]) -> List[tensor_float64_t[]] {
  %530 = shape_of(%tensor34, dtype="int32") /* ty=Tensor[(2), int32] */;
  %531 = take(%530, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float64(0 /* ty=int32 */, %531, %tensor34) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor4_float32(%tensor35: Tensor[(?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %532 = shape_of(%tensor35, dtype="int32") /* ty=Tensor[(4), int32] */;
  %533 = take(%532, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float32(0 /* ty=int32 */, %533, %tensor35) /* ty=List[tensor_float32_t[]] */
}

def @foldr1[A](%f7: fn (A, A) -> A, %xs6: List[A]) -> A {
  match? (%xs6) {
    Cons(%x34: A, Nil) => %x34,
    Cons(%x35: A, %rest2: List[A]) => %534 = @foldr1(%f7, %rest2) /* ty=A */;
    %f7(%x35, %534) /* ty=A */,
  }
}

def @tensor_array_unstack_tensor5_helper_float32(%i33: int32, %up33: int32, %t74: Tensor[(?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %535 = equal(%i33, %up33) /* ty=bool */;
  if (%535) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %536 = take(%t74, %i33, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    %537 = tensor4_float32(%536) /* ty=tensor_float32_t[] */;
    %538 = add(%i33, 1 /* ty=int32 */) /* ty=int32 */;
    %539 = @tensor_array_unstack_tensor5_helper_float32(%538, %up33, %t74) /* ty=List[tensor_float32_t[]] */;
    Cons(%537, %539) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_int16(%i34: int32, %up34: int32, %t75: Tensor[(?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %540 = equal(%i34, %up34) /* ty=bool */;
  if (%540) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %541 = take(%t75, %i34, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    %542 = tensor4_int16(%541) /* ty=tensor_int16_t[] */;
    %543 = add(%i34, 1 /* ty=int32 */) /* ty=int32 */;
    %544 = @tensor_array_unstack_tensor5_helper_int16(%543, %up34, %t75) /* ty=List[tensor_int16_t[]] */;
    Cons(%542, %544) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_split_float64(%tensor_array32: List[tensor_float64_t[]], %value5: tensor_float64_t[], %lengths9: Tensor[(?), int32]) -> List[tensor_float64_t[]] {
  %545 = shape_of(%lengths9, dtype="int32") /* ty=Tensor[(1), int32] */;
  %546 = take(%545, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float64(%tensor_array32, %value5, 0 /* ty=int32 */, 0 /* ty=int32 */, %546, %lengths9) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor6_float64(%tensor36: Tensor[(?, ?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %547 = shape_of(%tensor36, dtype="int32") /* ty=Tensor[(6), int32] */;
  %548 = take(%547, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float64(0 /* ty=int32 */, %548, %tensor36) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor6_helper_float32(%i35: int32, %up35: int32, %t76: Tensor[(?, ?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %549 = equal(%i35, %up35) /* ty=bool */;
  if (%549) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %550 = take(%t76, %i35, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    %551 = tensor5_float32(%550) /* ty=tensor_float32_t[] */;
    %552 = add(%i35, 1 /* ty=int32 */) /* ty=int32 */;
    %553 = @tensor_array_unstack_tensor6_helper_float32(%552, %up35, %t76) /* ty=List[tensor_float32_t[]] */;
    Cons(%551, %553) /* ty=List[tensor_float32_t[]] */
  }
}

def @length[A](%xs7: List[A]) -> int32 {
  match (%xs7) {
    Cons(_, %rest3: List[A]) => %554 = @length(%rest3) /* ty=int32 */;
    add(1 /* ty=int32 */, %554) /* ty=int32 */,
    Nil => 0 /* ty=int32 */,
  }
}

def @tensor_expand_dims_int16(%x36: tensor_int16_t[]) -> tensor_int16_t[] {
  match? (%x36) {
    tensor0_int16(%t06: int16) => %555 = expand_dims(%t06, axis=0) /* ty=Tensor[(?), int16] */;
    tensor1_int16(%555) /* ty=tensor_int16_t[] */,
    tensor1_int16(%t129: Tensor[(?), int16]) => %556 = expand_dims(%t129, axis=0) /* ty=Tensor[(?, ?), int16] */;
    tensor2_int16(%556) /* ty=tensor_int16_t[] */,
    tensor2_int16(%t229: Tensor[(?, ?), int16]) => %557 = expand_dims(%t229, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    tensor3_int16(%557) /* ty=tensor_int16_t[] */,
    tensor3_int16(%t329: Tensor[(?, ?, ?), int16]) => %558 = expand_dims(%t329, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    tensor4_int16(%558) /* ty=tensor_int16_t[] */,
    tensor4_int16(%t427: Tensor[(?, ?, ?, ?), int16]) => %559 = expand_dims(%t427, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    tensor5_int16(%559) /* ty=tensor_int16_t[] */,
    tensor5_int16(%t514: Tensor[(?, ?, ?, ?, ?), int16]) => %560 = expand_dims(%t514, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int16] */;
    tensor6_int16(%560) /* ty=tensor_int16_t[] */,
  }
}

def @tensor_array_unstack_tensor3_float16(%tensor37: Tensor[(?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %561 = shape_of(%tensor37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = take(%561, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float16(0 /* ty=int32 */, %562, %tensor37) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_scatter_helper_float32(%ta4: List[tensor_float32_t[]], %current5: int32, %limit5: int32, %indices_4: Tensor[(?), int32], %values_4: List[tensor_float32_t[]]) -> List[tensor_float32_t[]] {
  %563 = equal(%current5, %limit5) /* ty=bool */;
  if (%563) {
    %ta4
  } else {
    %564 = take(%indices_4, %current5) /* ty=int32 */;
    %565 = @tensor_array_read_float32(%values_4, %current5) /* ty=tensor_float32_t[] */;
    %566 = @tensor_array_write_float32(%ta4, %564, %565) /* ty=List[tensor_float32_t[]] */;
    %567 = add(%current5, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float32(%566, %567, %limit5, %indices_4, %values_4) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_read_uint16(%tensor_array33: List[tensor_uint16_t[]], %x37: int32) -> tensor_uint16_t[] {
  @nth(%tensor_array33, %x37) /* ty=tensor_uint16_t[] */
}

def @hd[A](%xs8: List[A]) -> A {
  match? (%xs8) {
    Cons(%x38: A, _) => %x38,
  }
}

def @tensor_array_stack_int16(%tensor_array34: List[tensor_int16_t[]]) -> tensor_int16_t[] {
  %568 = @map(@tensor_expand_dims_int16, %tensor_array34) /* ty=List[tensor_int16_t[]] */;
  %569 = @hd(%568) /* ty=tensor_int16_t[] */;
  %570 = @tl(%568) /* ty=List[tensor_int16_t[]] */;
  @foldl(@tensor_concatenate_int16, %569, %570) /* ty=tensor_int16_t[] */
}

def @tensor_array_unstack_tensor4_uint16(%tensor38: Tensor[(?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %571 = shape_of(%tensor38, dtype="int32") /* ty=Tensor[(4), int32] */;
  %572 = take(%571, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_uint16(0 /* ty=int32 */, %572, %tensor38) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_stack_float32(%tensor_array35: List[tensor_float32_t[]]) -> tensor_float32_t[] {
  %573 = @map(@tensor_expand_dims_float32, %tensor_array35) /* ty=List[tensor_float32_t[]] */;
  %574 = @hd(%573) /* ty=tensor_float32_t[] */;
  %575 = @tl(%573) /* ty=List[tensor_float32_t[]] */;
  @foldl(@tensor_concatenate_float32, %574, %575) /* ty=tensor_float32_t[] */
}

def @ta_split_helper_float32(%tensor_array36: List[tensor_float32_t[]], %value15: tensor_float32_t[], %offset15: int32, %current15: int32, %limit15: int32, %lengths10: Tensor[(?), int32]) -> List[tensor_float32_t[]] {
  %576 = equal(%current15, %limit15) /* ty=bool */;
  if (%576) {
    %tensor_array36
  } else {
    %577 = take(%lengths10, %current15) /* ty=int32 */;
    %578 = add(%offset15, %577) /* ty=int32 */;
    %579 = add(%current15, 1 /* ty=int32 */) /* ty=int32 */;
    %580 = @ta_split_helper_float32(%tensor_array36, %value15, %578, %579, %limit15, %lengths10) /* ty=List[tensor_float32_t[]] */;
    %581 = take(%lengths10, %current15) /* ty=int32 */;
    %582 = add(%581, %offset15) /* ty=int32 */;
    %583 = @tensor_take_float32(%value15, %offset15, %582) /* ty=tensor_float32_t[] */;
    @tensor_array_write_float32(%580, %current15, %583) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_concat_int64(%tensor_array37: List[tensor_int64_t[]]) -> tensor_int64_t[] {
  match? (%tensor_array37) {
    Nil => tensor_nil_int64 /* ty=tensor_int64_t[] */,
    Cons(%hd4: tensor_int64_t[], %tl4: List[tensor_int64_t[]]) => match? (%tl4) {
      Nil => %hd4,
      _ => %584 = @tensor_array_concat_int64(%tl4) /* ty=tensor_int64_t[] */;
      @tensor_concatenate_int64(%hd4, %584) /* ty=tensor_int64_t[] */,
    },
  }
}

def @tensor_array_stack_int8(%tensor_array38: List[tensor_int8_t[]]) -> tensor_int8_t[] {
  %585 = @map(@tensor_expand_dims_int8, %tensor_array38) /* ty=List[tensor_int8_t[]] */;
  %586 = @hd(%585) /* ty=tensor_int8_t[] */;
  %587 = @tl(%585) /* ty=List[tensor_int8_t[]] */;
  @foldl(@tensor_concatenate_int8, %586, %587) /* ty=tensor_int8_t[] */
}

def @tl[A](%xs9: List[A]) -> List[A] {
  match? (%xs9) {
    Cons(_, %rest4: List[A]) => %rest4,
  }
}

def @tensor_array_int32(%x39: int32) -> List[tensor_int32_t[]] {
  %588 = equal(%x39, 0 /* ty=int32 */) /* ty=bool */;
  if (%588) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %589 = tensor_nil_int32 /* ty=tensor_int32_t[] */;
    %590 = subtract(%x39, 1 /* ty=int32 */) /* ty=int32 */;
    %591 = @tensor_array_int32(%590) /* ty=List[tensor_int32_t[]] */;
    Cons(%589, %591) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_scatter_helper_int16(%ta5: List[tensor_int16_t[]], %current6: int32, %limit6: int32, %indices_5: Tensor[(?), int32], %values_5: List[tensor_int16_t[]]) -> List[tensor_int16_t[]] {
  %592 = equal(%current6, %limit6) /* ty=bool */;
  if (%592) {
    %ta5
  } else {
    %593 = take(%indices_5, %current6) /* ty=int32 */;
    %594 = @tensor_array_read_int16(%values_5, %current6) /* ty=tensor_int16_t[] */;
    %595 = @tensor_array_write_int16(%ta5, %593, %594) /* ty=List[tensor_int16_t[]] */;
    %596 = add(%current6, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int16(%595, %596, %limit6, %indices_5, %values_5) /* ty=List[tensor_int16_t[]] */
  }
}

def @ta_split_helper_int8(%tensor_array39: List[tensor_int8_t[]], %value16: tensor_int8_t[], %offset16: int32, %current16: int32, %limit16: int32, %lengths11: Tensor[(?), int32]) -> List[tensor_int8_t[]] {
  %597 = equal(%current16, %limit16) /* ty=bool */;
  if (%597) {
    %tensor_array39
  } else {
    %598 = take(%lengths11, %current16) /* ty=int32 */;
    %599 = add(%offset16, %598) /* ty=int32 */;
    %600 = add(%current16, 1 /* ty=int32 */) /* ty=int32 */;
    %601 = @ta_split_helper_int8(%tensor_array39, %value16, %599, %600, %limit16, %lengths11) /* ty=List[tensor_int8_t[]] */;
    %602 = take(%lengths11, %current16) /* ty=int32 */;
    %603 = add(%602, %offset16) /* ty=int32 */;
    %604 = @tensor_take_int8(%value16, %offset16, %603) /* ty=tensor_int8_t[] */;
    @tensor_array_write_int8(%601, %current16, %604) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_concat_uint16(%tensor_array40: List[tensor_uint16_t[]]) -> tensor_uint16_t[] {
  match? (%tensor_array40) {
    Nil => tensor_nil_uint16 /* ty=tensor_uint16_t[] */,
    Cons(%hd5: tensor_uint16_t[], %tl5: List[tensor_uint16_t[]]) => match? (%tl5) {
      Nil => %hd5,
      _ => %605 = @tensor_array_concat_uint16(%tl5) /* ty=tensor_uint16_t[] */;
      @tensor_concatenate_uint16(%hd5, %605) /* ty=tensor_uint16_t[] */,
    },
  }
}

def @tensor_array_write_int32(%tensor_array41: List[tensor_int32_t[]], %x40: int32, %v7: tensor_int32_t[]) -> List[tensor_int32_t[]] {
  @update(%tensor_array41, %x40, %v7) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor1_helper_int32(%i36: int32, %up36: int32, %t77: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %606 = equal(%i36, %up36) /* ty=bool */;
  if (%606) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %607 = take(%t77, %i36) /* ty=int32 */;
    %608 = tensor0_int32(%607) /* ty=tensor_int32_t[] */;
    %609 = add(%i36, 1 /* ty=int32 */) /* ty=int32 */;
    %610 = @tensor_array_unstack_tensor1_helper_int32(%609, %up36, %t77) /* ty=List[tensor_int32_t[]] */;
    Cons(%608, %610) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_int32(%tensor39: Tensor[(?, ?), int32]) -> List[tensor_int32_t[]] {
  %611 = shape_of(%tensor39, dtype="int32") /* ty=Tensor[(2), int32] */;
  %612 = take(%611, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int32(0 /* ty=int32 */, %612, %tensor39) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_scatter_int32(%tensor_array42: List[tensor_int32_t[]], %indices6: Tensor[(?), int32], %values7: List[tensor_int32_t[]]) -> List[tensor_int32_t[]] {
  %613 = shape_of(%indices6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %614 = take(%613, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int32(%tensor_array42, 0 /* ty=int32 */, %614, %indices6, %values7) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor4_int32(%tensor40: Tensor[(?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %615 = shape_of(%tensor40, dtype="int32") /* ty=Tensor[(4), int32] */;
  %616 = take(%615, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int32(0 /* ty=int32 */, %616, %tensor40) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor6_helper_float64(%i37: int32, %up37: int32, %t78: Tensor[(?, ?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %617 = equal(%i37, %up37) /* ty=bool */;
  if (%617) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %618 = take(%t78, %i37, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    %619 = tensor5_float64(%618) /* ty=tensor_float64_t[] */;
    %620 = add(%i37, 1 /* ty=int32 */) /* ty=int32 */;
    %621 = @tensor_array_unstack_tensor6_helper_float64(%620, %up37, %t78) /* ty=List[tensor_float64_t[]] */;
    Cons(%619, %621) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int32(%tensor41: Tensor[(?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %622 = shape_of(%tensor41, dtype="int32") /* ty=Tensor[(5), int32] */;
  %623 = take(%622, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int32(0 /* ty=int32 */, %623, %tensor41) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor6_helper_int32(%i38: int32, %up38: int32, %t79: Tensor[(?, ?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %624 = equal(%i38, %up38) /* ty=bool */;
  if (%624) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %625 = take(%t79, %i38, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    %626 = tensor5_int32(%625) /* ty=tensor_int32_t[] */;
    %627 = add(%i38, 1 /* ty=int32 */) /* ty=int32 */;
    %628 = @tensor_array_unstack_tensor6_helper_int32(%627, %up38, %t79) /* ty=List[tensor_int32_t[]] */;
    Cons(%626, %628) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_read_uint8(%tensor_array43: List[tensor_uint8_t[]], %x41: int32) -> tensor_uint8_t[] {
  @nth(%tensor_array43, %x41) /* ty=tensor_uint8_t[] */
}

def @tensor_array_scatter_helper_int32(%ta6: List[tensor_int32_t[]], %current7: int32, %limit7: int32, %indices_6: Tensor[(?), int32], %values_6: List[tensor_int32_t[]]) -> List[tensor_int32_t[]] {
  %629 = equal(%current7, %limit7) /* ty=bool */;
  if (%629) {
    %ta6
  } else {
    %630 = take(%indices_6, %current7) /* ty=int32 */;
    %631 = @tensor_array_read_int32(%values_6, %current7) /* ty=tensor_int32_t[] */;
    %632 = @tensor_array_write_int32(%ta6, %630, %631) /* ty=List[tensor_int32_t[]] */;
    %633 = add(%current7, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int32(%632, %633, %limit7, %indices_6, %values_6) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor5_float32(%tensor42: Tensor[(?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %634 = shape_of(%tensor42, dtype="int32") /* ty=Tensor[(5), int32] */;
  %635 = take(%634, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float32(0 /* ty=int32 */, %635, %tensor42) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_split_int32(%tensor_array44: List[tensor_int32_t[]], %value6: tensor_int32_t[], %lengths12: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %636 = shape_of(%lengths12, dtype="int32") /* ty=Tensor[(1), int32] */;
  %637 = take(%636, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int32(%tensor_array44, %value6, 0 /* ty=int32 */, 0 /* ty=int32 */, %637, %lengths12) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_stack_uint8(%tensor_array45: List[tensor_uint8_t[]]) -> tensor_uint8_t[] {
  %638 = @map(@tensor_expand_dims_uint8, %tensor_array45) /* ty=List[tensor_uint8_t[]] */;
  %639 = @hd(%638) /* ty=tensor_uint8_t[] */;
  %640 = @tl(%638) /* ty=List[tensor_uint8_t[]] */;
  @foldl(@tensor_concatenate_uint8, %639, %640) /* ty=tensor_uint8_t[] */
}

def @tensor_array_concat_int32(%tensor_array46: List[tensor_int32_t[]]) -> tensor_int32_t[] {
  match? (%tensor_array46) {
    Nil => tensor_nil_int32 /* ty=tensor_int32_t[] */,
    Cons(%hd6: tensor_int32_t[], %tl6: List[tensor_int32_t[]]) => match? (%tl6) {
      Nil => %hd6,
      _ => %641 = @tensor_array_concat_int32(%tl6) /* ty=tensor_int32_t[] */;
      @tensor_concatenate_int32(%hd6, %641) /* ty=tensor_int32_t[] */,
    },
  }
}

def @tensor_array_int8(%x42: int32) -> List[tensor_int8_t[]] {
  %642 = equal(%x42, 0 /* ty=int32 */) /* ty=bool */;
  if (%642) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %643 = tensor_nil_int8 /* ty=tensor_int8_t[] */;
    %644 = subtract(%x42, 1 /* ty=int32 */) /* ty=int32 */;
    %645 = @tensor_array_int8(%644) /* ty=List[tensor_int8_t[]] */;
    Cons(%643, %645) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_stack_int32(%tensor_array47: List[tensor_int32_t[]]) -> tensor_int32_t[] {
  %646 = @map(@tensor_expand_dims_int32, %tensor_array47) /* ty=List[tensor_int32_t[]] */;
  %647 = @hd(%646) /* ty=tensor_int32_t[] */;
  %648 = @tl(%646) /* ty=List[tensor_int32_t[]] */;
  @foldl(@tensor_concatenate_int32, %647, %648) /* ty=tensor_int32_t[] */
}

def @tensor_array_unstack_tensor5_int8(%tensor43: Tensor[(?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %649 = shape_of(%tensor43, dtype="int32") /* ty=Tensor[(5), int32] */;
  %650 = take(%649, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int8(0 /* ty=int32 */, %650, %tensor43) /* ty=List[tensor_int8_t[]] */
}

def @tensor_concatenate_int32(%x43: tensor_int32_t[], %y8: tensor_int32_t[]) -> tensor_int32_t[] {
  match? (%x43) {
    tensor1_int32(%t1111: Tensor[(?), int32]) => match? (%y8) {
      tensor1_int32(%t1210: Tensor[(?), int32]) => %651 = (%t1111, %t1210);
      %652 = concatenate(%651) /* ty=Tensor[(?), int32] */;
      tensor1_int32(%652) /* ty=tensor_int32_t[] */,
    },
    tensor2_int32(%t2111: Tensor[(?, ?), int32]) => match? (%y8) {
      tensor2_int32(%t2210: Tensor[(?, ?), int32]) => %653 = (%t2111, %t2210);
      %654 = concatenate(%653) /* ty=Tensor[(?, ?), int32] */;
      tensor2_int32(%654) /* ty=tensor_int32_t[] */,
    },
    tensor3_int32(%t3111: Tensor[(?, ?, ?), int32]) => match? (%y8) {
      tensor3_int32(%t3210: Tensor[(?, ?, ?), int32]) => %655 = (%t3111, %t3210);
      %656 = concatenate(%655) /* ty=Tensor[(?, ?, ?), int32] */;
      tensor3_int32(%656) /* ty=tensor_int32_t[] */,
    },
    tensor4_int32(%t4110: Tensor[(?, ?, ?, ?), int32]) => match? (%y8) {
      tensor4_int32(%t428: Tensor[(?, ?, ?, ?), int32]) => %657 = (%t4110, %t428);
      %658 = concatenate(%657) /* ty=Tensor[(?, ?, ?, ?), int32] */;
      tensor4_int32(%658) /* ty=tensor_int32_t[] */,
    },
  }
}

def @tensor_take_uint8(%tensor44: tensor_uint8_t[], %lower6: int32, %upper6: int32) -> tensor_uint8_t[] {
  match? (%tensor44) {
    tensor1_uint8(%t130: Tensor[(?), uint8]) => %659 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][37], dtype="int32") /* ty=Tensor[(?), int32] */;
    %660 = take(%t130, %659) /* ty=Tensor[(?), uint8] */;
    tensor1_uint8(%660) /* ty=tensor_uint8_t[] */,
    tensor2_uint8(%t230: Tensor[(?, ?), uint8]) => %661 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][38], dtype="int32") /* ty=Tensor[(?), int32] */;
    %662 = take(%t230, %661, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    tensor2_uint8(%662) /* ty=tensor_uint8_t[] */,
    tensor3_uint8(%t330: Tensor[(?, ?, ?), uint8]) => %663 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][39], dtype="int32") /* ty=Tensor[(?), int32] */;
    %664 = take(%t330, %663, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    tensor3_uint8(%664) /* ty=tensor_uint8_t[] */,
    tensor4_uint8(%t429: Tensor[(?, ?, ?, ?), uint8]) => %665 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][40], dtype="int32") /* ty=Tensor[(?), int32] */;
    %666 = take(%t429, %665, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    tensor4_uint8(%666) /* ty=tensor_uint8_t[] */,
    tensor5_uint8(%t515: Tensor[(?, ?, ?, ?, ?), uint8]) => %667 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][41], dtype="int32") /* ty=Tensor[(?), int32] */;
    %668 = take(%t515, %667, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    tensor5_uint8(%668) /* ty=tensor_uint8_t[] */,
    tensor6_uint8(%t612: Tensor[(?, ?, ?, ?, ?, ?), uint8]) => %669 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][42], dtype="int32") /* ty=Tensor[(?), int32] */;
    %670 = take(%t612, %669, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint8] */;
    tensor6_uint8(%670) /* ty=tensor_uint8_t[] */,
  }
}

def @tensor_expand_dims_uint8(%x44: tensor_uint8_t[]) -> tensor_uint8_t[] {
  match? (%x44) {
    tensor0_uint8(%t07: uint8) => %671 = expand_dims(%t07, axis=0) /* ty=Tensor[(?), uint8] */;
    tensor1_uint8(%671) /* ty=tensor_uint8_t[] */,
    tensor1_uint8(%t131: Tensor[(?), uint8]) => %672 = expand_dims(%t131, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    tensor2_uint8(%672) /* ty=tensor_uint8_t[] */,
    tensor2_uint8(%t231: Tensor[(?, ?), uint8]) => %673 = expand_dims(%t231, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    tensor3_uint8(%673) /* ty=tensor_uint8_t[] */,
    tensor3_uint8(%t331: Tensor[(?, ?, ?), uint8]) => %674 = expand_dims(%t331, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    tensor4_uint8(%674) /* ty=tensor_uint8_t[] */,
    tensor4_uint8(%t430: Tensor[(?, ?, ?, ?), uint8]) => %675 = expand_dims(%t430, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    tensor5_uint8(%675) /* ty=tensor_uint8_t[] */,
    tensor5_uint8(%t516: Tensor[(?, ?, ?, ?, ?), uint8]) => %676 = expand_dims(%t516, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint8] */;
    tensor6_uint8(%676) /* ty=tensor_uint8_t[] */,
  }
}

def @tensor_take_uint16(%tensor45: tensor_uint16_t[], %lower7: int32, %upper7: int32) -> tensor_uint16_t[] {
  match? (%tensor45) {
    tensor1_uint16(%t132: Tensor[(?), uint16]) => %677 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][43], dtype="int32") /* ty=Tensor[(?), int32] */;
    %678 = take(%t132, %677) /* ty=Tensor[(?), uint16] */;
    tensor1_uint16(%678) /* ty=tensor_uint16_t[] */,
    tensor2_uint16(%t232: Tensor[(?, ?), uint16]) => %679 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][44], dtype="int32") /* ty=Tensor[(?), int32] */;
    %680 = take(%t232, %679, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    tensor2_uint16(%680) /* ty=tensor_uint16_t[] */,
    tensor3_uint16(%t332: Tensor[(?, ?, ?), uint16]) => %681 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][45], dtype="int32") /* ty=Tensor[(?), int32] */;
    %682 = take(%t332, %681, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    tensor3_uint16(%682) /* ty=tensor_uint16_t[] */,
    tensor4_uint16(%t431: Tensor[(?, ?, ?, ?), uint16]) => %683 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][46], dtype="int32") /* ty=Tensor[(?), int32] */;
    %684 = take(%t431, %683, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    tensor4_uint16(%684) /* ty=tensor_uint16_t[] */,
    tensor5_uint16(%t517: Tensor[(?, ?, ?, ?, ?), uint16]) => %685 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][47], dtype="int32") /* ty=Tensor[(?), int32] */;
    %686 = take(%t517, %685, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    tensor5_uint16(%686) /* ty=tensor_uint16_t[] */,
    tensor6_uint16(%t613: Tensor[(?, ?, ?, ?, ?, ?), uint16]) => %687 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][48], dtype="int32") /* ty=Tensor[(?), int32] */;
    %688 = take(%t613, %687, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint16] */;
    tensor6_uint16(%688) /* ty=tensor_uint16_t[] */,
  }
}

def @tensor_array_uint8(%x45: int32) -> List[tensor_uint8_t[]] {
  %689 = equal(%x45, 0 /* ty=int32 */) /* ty=bool */;
  if (%689) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %690 = tensor_nil_uint8 /* ty=tensor_uint8_t[] */;
    %691 = subtract(%x45, 1 /* ty=int32 */) /* ty=int32 */;
    %692 = @tensor_array_uint8(%691) /* ty=List[tensor_uint8_t[]] */;
    Cons(%690, %692) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int16(%tensor46: Tensor[(?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %693 = shape_of(%tensor46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = take(%693, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int16(0 /* ty=int32 */, %694, %tensor46) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor5_helper_int64(%i39: int32, %up39: int32, %t80: Tensor[(?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %695 = equal(%i39, %up39) /* ty=bool */;
  if (%695) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %696 = take(%t80, %i39, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    %697 = tensor4_int64(%696) /* ty=tensor_int64_t[] */;
    %698 = add(%i39, 1 /* ty=int32 */) /* ty=int32 */;
    %699 = @tensor_array_unstack_tensor5_helper_int64(%698, %up39, %t80) /* ty=List[tensor_int64_t[]] */;
    Cons(%697, %699) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_int8(%i40: int32, %up40: int32, %t81: Tensor[(?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %700 = equal(%i40, %up40) /* ty=bool */;
  if (%700) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %701 = take(%t81, %i40, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    %702 = tensor3_int8(%701) /* ty=tensor_int8_t[] */;
    %703 = add(%i40, 1 /* ty=int32 */) /* ty=int32 */;
    %704 = @tensor_array_unstack_tensor4_helper_int8(%703, %up40, %t81) /* ty=List[tensor_int8_t[]] */;
    Cons(%702, %704) /* ty=List[tensor_int8_t[]] */
  }
}

def @ta_split_helper_int32(%tensor_array48: List[tensor_int32_t[]], %value17: tensor_int32_t[], %offset17: int32, %current17: int32, %limit17: int32, %lengths13: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %705 = equal(%current17, %limit17) /* ty=bool */;
  if (%705) {
    %tensor_array48
  } else {
    %706 = take(%lengths13, %current17) /* ty=int32 */;
    %707 = add(%offset17, %706) /* ty=int32 */;
    %708 = add(%current17, 1 /* ty=int32 */) /* ty=int32 */;
    %709 = @ta_split_helper_int32(%tensor_array48, %value17, %707, %708, %limit17, %lengths13) /* ty=List[tensor_int32_t[]] */;
    %710 = take(%lengths13, %current17) /* ty=int32 */;
    %711 = add(%710, %offset17) /* ty=int32 */;
    %712 = @tensor_take_int32(%value17, %offset17, %711) /* ty=tensor_int32_t[] */;
    @tensor_array_write_int32(%709, %current17, %712) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor1_uint8(%tensor47: Tensor[(?), uint8]) -> List[tensor_uint8_t[]] {
  %713 = shape_of(%tensor47, dtype="int32") /* ty=Tensor[(1), int32] */;
  %714 = take(%713, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_uint8(0 /* ty=int32 */, %714, %tensor47) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor6_int32(%tensor48: Tensor[(?, ?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %715 = shape_of(%tensor48, dtype="int32") /* ty=Tensor[(6), int32] */;
  %716 = take(%715, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int32(0 /* ty=int32 */, %716, %tensor48) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor2_helper_uint8(%i41: int32, %up41: int32, %t82: Tensor[(?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %717 = equal(%i41, %up41) /* ty=bool */;
  if (%717) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %718 = take(%t82, %i41, axis=0) /* ty=Tensor[(?), uint8] */;
    %719 = tensor1_uint8(%718) /* ty=tensor_uint8_t[] */;
    %720 = add(%i41, 1 /* ty=int32 */) /* ty=int32 */;
    %721 = @tensor_array_unstack_tensor2_helper_uint8(%720, %up41, %t82) /* ty=List[tensor_uint8_t[]] */;
    Cons(%719, %721) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor2_uint8(%tensor49: Tensor[(?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %722 = shape_of(%tensor49, dtype="int32") /* ty=Tensor[(2), int32] */;
  %723 = take(%722, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_uint8(0 /* ty=int32 */, %723, %tensor49) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor4_helper_uint8(%i42: int32, %up42: int32, %t83: Tensor[(?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %724 = equal(%i42, %up42) /* ty=bool */;
  if (%724) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %725 = take(%t83, %i42, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    %726 = tensor3_uint8(%725) /* ty=tensor_uint8_t[] */;
    %727 = add(%i42, 1 /* ty=int32 */) /* ty=int32 */;
    %728 = @tensor_array_unstack_tensor4_helper_uint8(%727, %up42, %t83) /* ty=List[tensor_uint8_t[]] */;
    Cons(%726, %728) /* ty=List[tensor_uint8_t[]] */
  }
}

def @update[A](%xs10: List[A], %n1: int32, %v8: A) -> List[A] {
  %729 = equal(%n1, 0 /* ty=int32 */) /* ty=bool */;
  if (%729) {
    %730 = @tl(%xs10) /* ty=List[A] */;
    Cons(%v8, %730) /* ty=List[A] */
  } else {
    %731 = @hd(%xs10) /* ty=A */;
    %732 = @tl(%xs10) /* ty=List[A] */;
    %733 = subtract(%n1, 1 /* ty=int32 */) /* ty=int32 */;
    %734 = @update(%732, %733, %v8) /* ty=List[A] */;
    Cons(%731, %734) /* ty=List[A] */
  }
}

def @tensor_array_unstack_tensor5_helper_uint8(%i43: int32, %up43: int32, %t84: Tensor[(?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %735 = equal(%i43, %up43) /* ty=bool */;
  if (%735) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %736 = take(%t84, %i43, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    %737 = tensor4_uint8(%736) /* ty=tensor_uint8_t[] */;
    %738 = add(%i43, 1 /* ty=int32 */) /* ty=int32 */;
    %739 = @tensor_array_unstack_tensor5_helper_uint8(%738, %up43, %t84) /* ty=List[tensor_uint8_t[]] */;
    Cons(%737, %739) /* ty=List[tensor_uint8_t[]] */
  }
}

def @unfoldl[A, B](%f8: fn (A) -> Option[(A, B)], %seed1: A) -> List[B] {
  %740 = @unfoldr(%f8, %seed1) /* ty=List[B] */;
  @rev(%740) /* ty=List[B] */
}

def @tensor_array_unstack_tensor2_helper_int16(%i44: int32, %up44: int32, %t85: Tensor[(?, ?), int16]) -> List[tensor_int16_t[]] {
  %741 = equal(%i44, %up44) /* ty=bool */;
  if (%741) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %742 = take(%t85, %i44, axis=0) /* ty=Tensor[(?), int16] */;
    %743 = tensor1_int16(%742) /* ty=tensor_int16_t[] */;
    %744 = add(%i44, 1 /* ty=int32 */) /* ty=int32 */;
    %745 = @tensor_array_unstack_tensor2_helper_int16(%744, %up44, %t85) /* ty=List[tensor_int16_t[]] */;
    Cons(%743, %745) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_expand_dims_float16(%x46: tensor_float16_t[]) -> tensor_float16_t[] {
  match? (%x46) {
    tensor0_float16(%t08: float16) => %746 = expand_dims(%t08, axis=0) /* ty=Tensor[(?), float16] */;
    tensor1_float16(%746) /* ty=tensor_float16_t[] */,
    tensor1_float16(%t133: Tensor[(?), float16]) => %747 = expand_dims(%t133, axis=0) /* ty=Tensor[(?, ?), float16] */;
    tensor2_float16(%747) /* ty=tensor_float16_t[] */,
    tensor2_float16(%t233: Tensor[(?, ?), float16]) => %748 = expand_dims(%t233, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    tensor3_float16(%748) /* ty=tensor_float16_t[] */,
    tensor3_float16(%t333: Tensor[(?, ?, ?), float16]) => %749 = expand_dims(%t333, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    tensor4_float16(%749) /* ty=tensor_float16_t[] */,
    tensor4_float16(%t432: Tensor[(?, ?, ?, ?), float16]) => %750 = expand_dims(%t432, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    tensor5_float16(%750) /* ty=tensor_float16_t[] */,
    tensor5_float16(%t518: Tensor[(?, ?, ?, ?, ?), float16]) => %751 = expand_dims(%t518, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float16] */;
    tensor6_float16(%751) /* ty=tensor_float16_t[] */,
  }
}

def @tensor_array_unstack_tensor5_uint8(%tensor50: Tensor[(?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %752 = shape_of(%tensor50, dtype="int32") /* ty=Tensor[(5), int32] */;
  %753 = take(%752, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_uint8(0 /* ty=int32 */, %753, %tensor50) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_stack_uint16(%tensor_array49: List[tensor_uint16_t[]]) -> tensor_uint16_t[] {
  %754 = @map(@tensor_expand_dims_uint16, %tensor_array49) /* ty=List[tensor_uint16_t[]] */;
  %755 = @hd(%754) /* ty=tensor_uint16_t[] */;
  %756 = @tl(%754) /* ty=List[tensor_uint16_t[]] */;
  @foldl(@tensor_concatenate_uint16, %755, %756) /* ty=tensor_uint16_t[] */
}

def @tensor_array_unstack_tensor6_helper_uint8(%i45: int32, %up45: int32, %t86: Tensor[(?, ?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %757 = equal(%i45, %up45) /* ty=bool */;
  if (%757) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %758 = take(%t86, %i45, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    %759 = tensor5_uint8(%758) /* ty=tensor_uint8_t[] */;
    %760 = add(%i45, 1 /* ty=int32 */) /* ty=int32 */;
    %761 = @tensor_array_unstack_tensor6_helper_uint8(%760, %up45, %t86) /* ty=List[tensor_uint8_t[]] */;
    Cons(%759, %761) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor6_uint8(%tensor51: Tensor[(?, ?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %762 = shape_of(%tensor51, dtype="int32") /* ty=Tensor[(6), int32] */;
  %763 = take(%762, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_uint8(0 /* ty=int32 */, %763, %tensor51) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_concat_int8(%tensor_array50: List[tensor_int8_t[]]) -> tensor_int8_t[] {
  match? (%tensor_array50) {
    Nil => tensor_nil_int8 /* ty=tensor_int8_t[] */,
    Cons(%hd7: tensor_int8_t[], %tl7: List[tensor_int8_t[]]) => match? (%tl7) {
      Nil => %hd7,
      _ => %764 = @tensor_array_concat_int8(%tl7) /* ty=tensor_int8_t[] */;
      @tensor_concatenate_int8(%hd7, %764) /* ty=tensor_int8_t[] */,
    },
  }
}

def @tensor_array_scatter_helper_uint8(%ta7: List[tensor_uint8_t[]], %current8: int32, %limit8: int32, %indices_7: Tensor[(?), int32], %values_7: List[tensor_uint8_t[]]) -> List[tensor_uint8_t[]] {
  %765 = equal(%current8, %limit8) /* ty=bool */;
  if (%765) {
    %ta7
  } else {
    %766 = take(%indices_7, %current8) /* ty=int32 */;
    %767 = @tensor_array_read_uint8(%values_7, %current8) /* ty=tensor_uint8_t[] */;
    %768 = @tensor_array_write_uint8(%ta7, %766, %767) /* ty=List[tensor_uint8_t[]] */;
    %769 = add(%current8, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_uint8(%768, %769, %limit8, %indices_7, %values_7) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor6_float32(%tensor52: Tensor[(?, ?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %770 = shape_of(%tensor52, dtype="int32") /* ty=Tensor[(6), int32] */;
  %771 = take(%770, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float32(0 /* ty=int32 */, %771, %tensor52) /* ty=List[tensor_float32_t[]] */
}

def @ta_split_helper_uint8(%tensor_array51: List[tensor_uint8_t[]], %value18: tensor_uint8_t[], %offset18: int32, %current18: int32, %limit18: int32, %lengths14: Tensor[(?), int32]) -> List[tensor_uint8_t[]] {
  %772 = equal(%current18, %limit18) /* ty=bool */;
  if (%772) {
    %tensor_array51
  } else {
    %773 = take(%lengths14, %current18) /* ty=int32 */;
    %774 = add(%offset18, %773) /* ty=int32 */;
    %775 = add(%current18, 1 /* ty=int32 */) /* ty=int32 */;
    %776 = @ta_split_helper_uint8(%tensor_array51, %value18, %774, %775, %limit18, %lengths14) /* ty=List[tensor_uint8_t[]] */;
    %777 = take(%lengths14, %current18) /* ty=int32 */;
    %778 = add(%777, %offset18) /* ty=int32 */;
    %779 = @tensor_take_uint8(%value18, %offset18, %778) /* ty=tensor_uint8_t[] */;
    @tensor_array_write_uint8(%776, %current18, %779) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_split_uint8(%tensor_array52: List[tensor_uint8_t[]], %value7: tensor_uint8_t[], %lengths15: Tensor[(?), int32]) -> List[tensor_uint8_t[]] {
  %780 = shape_of(%lengths15, dtype="int32") /* ty=Tensor[(1), int32] */;
  %781 = take(%780, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_uint8(%tensor_array52, %value7, 0 /* ty=int32 */, 0 /* ty=int32 */, %781, %lengths15) /* ty=List[tensor_uint8_t[]] */
}

def @foldl[A, B](%f9: fn (A, B) -> A, %acc1: A, %xs11: List[B]) -> A {
  match (%xs11) {
    Cons(%x47: B, %rest5: List[B]) => %782 = %f9(%acc1, %x47) /* ty=A */;
    @foldl(%f9, %782, %rest5) /* ty=A */,
    Nil => %acc1,
  }
}

def @tensor_array_unstack_tensor3_helper_int16(%i46: int32, %up46: int32, %t87: Tensor[(?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %783 = equal(%i46, %up46) /* ty=bool */;
  if (%783) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %784 = take(%t87, %i46, axis=0) /* ty=Tensor[(?, ?), int16] */;
    %785 = tensor2_int16(%784) /* ty=tensor_int16_t[] */;
    %786 = add(%i46, 1 /* ty=int32 */) /* ty=int32 */;
    %787 = @tensor_array_unstack_tensor3_helper_int16(%786, %up46, %t87) /* ty=List[tensor_int16_t[]] */;
    Cons(%785, %787) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_concat_uint8(%tensor_array53: List[tensor_uint8_t[]]) -> tensor_uint8_t[] {
  match? (%tensor_array53) {
    Nil => tensor_nil_uint8 /* ty=tensor_uint8_t[] */,
    Cons(%hd8: tensor_uint8_t[], %tl8: List[tensor_uint8_t[]]) => match? (%tl8) {
      Nil => %hd8,
      _ => %788 = @tensor_array_concat_uint8(%tl8) /* ty=tensor_uint8_t[] */;
      @tensor_concatenate_uint8(%hd8, %788) /* ty=tensor_uint8_t[] */,
    },
  }
}

def @tensor_array_read_float16(%tensor_array54: List[tensor_float16_t[]], %x48: int32) -> tensor_float16_t[] {
  @nth(%tensor_array54, %x48) /* ty=tensor_float16_t[] */
}

def @tensor_concatenate_int8(%x49: tensor_int8_t[], %y9: tensor_int8_t[]) -> tensor_int8_t[] {
  match? (%x49) {
    tensor1_int8(%t1112: Tensor[(?), int8]) => match? (%y9) {
      tensor1_int8(%t1211: Tensor[(?), int8]) => %789 = (%t1112, %t1211);
      %790 = concatenate(%789) /* ty=Tensor[(?), int8] */;
      tensor1_int8(%790) /* ty=tensor_int8_t[] */,
    },
    tensor2_int8(%t2112: Tensor[(?, ?), int8]) => match? (%y9) {
      tensor2_int8(%t2211: Tensor[(?, ?), int8]) => %791 = (%t2112, %t2211);
      %792 = concatenate(%791) /* ty=Tensor[(?, ?), int8] */;
      tensor2_int8(%792) /* ty=tensor_int8_t[] */,
    },
    tensor3_int8(%t3112: Tensor[(?, ?, ?), int8]) => match? (%y9) {
      tensor3_int8(%t3211: Tensor[(?, ?, ?), int8]) => %793 = (%t3112, %t3211);
      %794 = concatenate(%793) /* ty=Tensor[(?, ?, ?), int8] */;
      tensor3_int8(%794) /* ty=tensor_int8_t[] */,
    },
    tensor4_int8(%t4111: Tensor[(?, ?, ?, ?), int8]) => match? (%y9) {
      tensor4_int8(%t4210: Tensor[(?, ?, ?, ?), int8]) => %795 = (%t4111, %t4210);
      %796 = concatenate(%795) /* ty=Tensor[(?, ?, ?, ?), int8] */;
      tensor4_int8(%796) /* ty=tensor_int8_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor4_helper_int32(%i47: int32, %up47: int32, %t88: Tensor[(?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %797 = equal(%i47, %up47) /* ty=bool */;
  if (%797) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %798 = take(%t88, %i47, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    %799 = tensor3_int32(%798) /* ty=tensor_int32_t[] */;
    %800 = add(%i47, 1 /* ty=int32 */) /* ty=int32 */;
    %801 = @tensor_array_unstack_tensor4_helper_int32(%800, %up47, %t88) /* ty=List[tensor_int32_t[]] */;
    Cons(%799, %801) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_int16(%tensor53: Tensor[(?, ?), int16]) -> List[tensor_int16_t[]] {
  %802 = shape_of(%tensor53, dtype="int32") /* ty=Tensor[(2), int32] */;
  %803 = take(%802, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int16(0 /* ty=int32 */, %803, %tensor53) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_read_int8(%tensor_array55: List[tensor_int8_t[]], %x50: int32) -> tensor_int8_t[] {
  @nth(%tensor_array55, %x50) /* ty=tensor_int8_t[] */
}

def @iterate[A](%f10: fn (A) -> A, %n2: int32) -> fn (A) -> A {
  %804 = equal(%n2, 0 /* ty=int32 */) /* ty=bool */;
  if (%804) {
    @id
  } else {
    %805 = subtract(%n2, 1 /* ty=int32 */) /* ty=int32 */;
    %806 = @iterate(%f10, %805) /* ty=fn (A) -> A */;
    @compose(%f10, %806) /* ty=fn (A) -> A */
  }
}

def @tensor_array_unstack_tensor2_int8(%tensor54: Tensor[(?, ?), int8]) -> List[tensor_int8_t[]] {
  %807 = shape_of(%tensor54, dtype="int32") /* ty=Tensor[(2), int32] */;
  %808 = take(%807, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int8(0 /* ty=int32 */, %808, %tensor54) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_int16(%x51: int32) -> List[tensor_int16_t[]] {
  %809 = equal(%x51, 0 /* ty=int32 */) /* ty=bool */;
  if (%809) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %810 = tensor_nil_int16 /* ty=tensor_int16_t[] */;
    %811 = subtract(%x51, 1 /* ty=int32 */) /* ty=int32 */;
    %812 = @tensor_array_int16(%811) /* ty=List[tensor_int16_t[]] */;
    Cons(%810, %812) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_int16(%i48: int32, %up48: int32, %t89: Tensor[(?, ?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %813 = equal(%i48, %up48) /* ty=bool */;
  if (%813) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %814 = take(%t89, %i48, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    %815 = tensor5_int16(%814) /* ty=tensor_int16_t[] */;
    %816 = add(%i48, 1 /* ty=int32 */) /* ty=int32 */;
    %817 = @tensor_array_unstack_tensor6_helper_int16(%816, %up48, %t89) /* ty=List[tensor_int16_t[]] */;
    Cons(%815, %817) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_float32(%i49: int32, %up49: int32, %t90: Tensor[(?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %818 = equal(%i49, %up49) /* ty=bool */;
  if (%818) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %819 = take(%t90, %i49, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    %820 = tensor3_float32(%819) /* ty=tensor_float32_t[] */;
    %821 = add(%i49, 1 /* ty=int32 */) /* ty=int32 */;
    %822 = @tensor_array_unstack_tensor4_helper_float32(%821, %up49, %t90) /* ty=List[tensor_float32_t[]] */;
    Cons(%820, %822) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor3_float32(%tensor55: Tensor[(?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %823 = shape_of(%tensor55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = take(%823, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float32(0 /* ty=int32 */, %824, %tensor55) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor3_int8(%tensor56: Tensor[(?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %825 = shape_of(%tensor56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = take(%825, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int8(0 /* ty=int32 */, %826, %tensor56) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor6_int8(%tensor57: Tensor[(?, ?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %827 = shape_of(%tensor57, dtype="int32") /* ty=Tensor[(6), int32] */;
  %828 = take(%827, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int8(0 /* ty=int32 */, %828, %tensor57) /* ty=List[tensor_int8_t[]] */
}

def @zip[A, B](%xs12: List[A], %ys: List[B]) -> List[(A, B)] {
  %829 = (%xs12, %ys);
  match (%829) {
    (Cons(%x52: A, %x_rest: List[A]), Cons(%y10: B, %y_rest: List[B])) => %830 = (%x52, %y10);
    %831 = @zip(%x_rest, %y_rest) /* ty=List[(A, B)] */;
    Cons(%830, %831) /* ty=List[(A, B)] */,
    _ => Nil /* ty=List[(A, B)] */,
  }
}

def @tensor_array_scatter_helper_int8(%ta8: List[tensor_int8_t[]], %current9: int32, %limit9: int32, %indices_8: Tensor[(?), int32], %values_8: List[tensor_int8_t[]]) -> List[tensor_int8_t[]] {
  %832 = equal(%current9, %limit9) /* ty=bool */;
  if (%832) {
    %ta8
  } else {
    %833 = take(%indices_8, %current9) /* ty=int32 */;
    %834 = @tensor_array_read_int8(%values_8, %current9) /* ty=tensor_int8_t[] */;
    %835 = @tensor_array_write_int8(%ta8, %833, %834) /* ty=List[tensor_int8_t[]] */;
    %836 = add(%current9, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int8(%835, %836, %limit9, %indices_8, %values_8) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_int64(%i50: int32, %up50: int32, %t91: Tensor[(?), int64]) -> List[tensor_int64_t[]] {
  %837 = equal(%i50, %up50) /* ty=bool */;
  if (%837) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %838 = take(%t91, %i50) /* ty=int64 */;
    %839 = tensor0_int64(%838) /* ty=tensor_int64_t[] */;
    %840 = add(%i50, 1 /* ty=int32 */) /* ty=int32 */;
    %841 = @tensor_array_unstack_tensor1_helper_int64(%840, %up50, %t91) /* ty=List[tensor_int64_t[]] */;
    Cons(%839, %841) /* ty=List[tensor_int64_t[]] */
  }
}

def @foldr[A, B](%f11: fn (A, B) -> B, %acc2: B, %xs13: List[A]) -> B {
  match (%xs13) {
    Cons(%x53: A, %rest6: List[A]) => %842 = @foldr(%f11, %acc2, %rest6) /* ty=B */;
    %f11(%x53, %842) /* ty=B */,
    Nil => %acc2,
  }
}

def @tensor_take_float64(%tensor58: tensor_float64_t[], %lower8: int32, %upper8: int32) -> tensor_float64_t[] {
  match? (%tensor58) {
    tensor1_float64(%t134: Tensor[(?), float64]) => %843 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][49], dtype="int32") /* ty=Tensor[(?), int32] */;
    %844 = take(%t134, %843) /* ty=Tensor[(?), float64] */;
    tensor1_float64(%844) /* ty=tensor_float64_t[] */,
    tensor2_float64(%t234: Tensor[(?, ?), float64]) => %845 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][50], dtype="int32") /* ty=Tensor[(?), int32] */;
    %846 = take(%t234, %845, axis=0) /* ty=Tensor[(?, ?), float64] */;
    tensor2_float64(%846) /* ty=tensor_float64_t[] */,
    tensor3_float64(%t334: Tensor[(?, ?, ?), float64]) => %847 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][51], dtype="int32") /* ty=Tensor[(?), int32] */;
    %848 = take(%t334, %847, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    tensor3_float64(%848) /* ty=tensor_float64_t[] */,
    tensor4_float64(%t433: Tensor[(?, ?, ?, ?), float64]) => %849 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][52], dtype="int32") /* ty=Tensor[(?), int32] */;
    %850 = take(%t433, %849, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    tensor4_float64(%850) /* ty=tensor_float64_t[] */,
    tensor5_float64(%t519: Tensor[(?, ?, ?, ?, ?), float64]) => %851 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][53], dtype="int32") /* ty=Tensor[(?), int32] */;
    %852 = take(%t519, %851, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    tensor5_float64(%852) /* ty=tensor_float64_t[] */,
    tensor6_float64(%t614: Tensor[(?, ?, ?, ?, ?, ?), float64]) => %853 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][54], dtype="int32") /* ty=Tensor[(?), int32] */;
    %854 = take(%t614, %853, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float64] */;
    tensor6_float64(%854) /* ty=tensor_float64_t[] */,
  }
}

def @tensor_array_scatter_int8(%tensor_array56: List[tensor_int8_t[]], %indices7: Tensor[(?), int32], %values8: List[tensor_int8_t[]]) -> List[tensor_int8_t[]] {
  %855 = shape_of(%indices7, dtype="int32") /* ty=Tensor[(1), int32] */;
  %856 = take(%855, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int8(%tensor_array56, 0 /* ty=int32 */, %856, %indices7, %values8) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor4_uint8(%tensor59: Tensor[(?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %857 = shape_of(%tensor59, dtype="int32") /* ty=Tensor[(4), int32] */;
  %858 = take(%857, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_uint8(0 /* ty=int32 */, %858, %tensor59) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor6_int16(%tensor60: Tensor[(?, ?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %859 = shape_of(%tensor60, dtype="int32") /* ty=Tensor[(6), int32] */;
  %860 = take(%859, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int16(0 /* ty=int32 */, %860, %tensor60) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_split_int8(%tensor_array57: List[tensor_int8_t[]], %value8: tensor_int8_t[], %lengths16: Tensor[(?), int32]) -> List[tensor_int8_t[]] {
  %861 = shape_of(%lengths16, dtype="int32") /* ty=Tensor[(1), int32] */;
  %862 = take(%861, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int8(%tensor_array57, %value8, 0 /* ty=int32 */, 0 /* ty=int32 */, %862, %lengths16) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_read_int16(%tensor_array58: List[tensor_int16_t[]], %x54: int32) -> tensor_int16_t[] {
  @nth(%tensor_array58, %x54) /* ty=tensor_int16_t[] */
}

def @tensor_array_write_int16(%tensor_array59: List[tensor_int16_t[]], %x55: int32, %v9: tensor_int16_t[]) -> List[tensor_int16_t[]] {
  @update(%tensor_array59, %x55, %v9) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor1_helper_int16(%i51: int32, %up51: int32, %t92: Tensor[(?), int16]) -> List[tensor_int16_t[]] {
  %863 = equal(%i51, %up51) /* ty=bool */;
  if (%863) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %864 = take(%t92, %i51) /* ty=int16 */;
    %865 = tensor0_int16(%864) /* ty=tensor_int16_t[] */;
    %866 = add(%i51, 1 /* ty=int32 */) /* ty=int32 */;
    %867 = @tensor_array_unstack_tensor1_helper_int16(%866, %up51, %t92) /* ty=List[tensor_int16_t[]] */;
    Cons(%865, %867) /* ty=List[tensor_int16_t[]] */
  }
}

def @concat[A](%xs14: List[A], %ys1: List[A]) -> List[A] {
  @foldr(Cons, %ys1, %xs14) /* ty=List[A] */
}

def @tensor_array_scatter_int16(%tensor_array60: List[tensor_int16_t[]], %indices8: Tensor[(?), int32], %values9: List[tensor_int16_t[]]) -> List[tensor_int16_t[]] {
  %868 = shape_of(%indices8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %869 = take(%868, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int16(%tensor_array60, 0 /* ty=int32 */, %869, %indices8, %values9) /* ty=List[tensor_int16_t[]] */
}

def @map_accumr[A, B, C](%f12: fn (A, B) -> (A, C), %init1: A, %xs15: List[B]) -> (A, List[C]) {
  let %updater1: fn (B, (A, List[C])) -> (A, List[C]) = fn (%x56: B, %acc3: (A, List[C])) -> (A, List[C]) {
    %870 = %acc3.0;
    let %f_out1: (A, C) = %f12(%870, %x56) /* ty=(A, C) */;
    %871 = %f_out1.0;
    %872 = %f_out1.1;
    %873 = %acc3.1;
    %874 = Cons(%872, %873) /* ty=List[C] */;
    (%871, %874)
  };
  %875 = Nil /* ty=List[C] */;
  %876 = (%init1, %875);
  @foldr(%updater1, %876, %xs15) /* ty=(A, List[C]) */
}

def @tensor_array_unstack_tensor1_int16(%tensor61: Tensor[(?), int16]) -> List[tensor_int16_t[]] {
  %877 = shape_of(%tensor61, dtype="int32") /* ty=Tensor[(1), int32] */;
  %878 = take(%877, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int16(0 /* ty=int32 */, %878, %tensor61) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int16(%i52: int32, %up52: int32, %t93: Tensor[(?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %879 = equal(%i52, %up52) /* ty=bool */;
  if (%879) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %880 = take(%t93, %i52, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    %881 = tensor3_int16(%880) /* ty=tensor_int16_t[] */;
    %882 = add(%i52, 1 /* ty=int32 */) /* ty=int32 */;
    %883 = @tensor_array_unstack_tensor4_helper_int16(%882, %up52, %t93) /* ty=List[tensor_int16_t[]] */;
    Cons(%881, %883) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_write_uint8(%tensor_array61: List[tensor_uint8_t[]], %x57: int32, %v10: tensor_uint8_t[]) -> List[tensor_uint8_t[]] {
  @update(%tensor_array61, %x57, %v10) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor4_int16(%tensor62: Tensor[(?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %884 = shape_of(%tensor62, dtype="int32") /* ty=Tensor[(4), int32] */;
  %885 = take(%884, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int16(0 /* ty=int32 */, %885, %tensor62) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_split_int16(%tensor_array62: List[tensor_int16_t[]], %value9: tensor_int16_t[], %lengths17: Tensor[(?), int32]) -> List[tensor_int16_t[]] {
  %886 = shape_of(%lengths17, dtype="int32") /* ty=Tensor[(1), int32] */;
  %887 = take(%886, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int16(%tensor_array62, %value9, 0 /* ty=int32 */, 0 /* ty=int32 */, %887, %lengths17) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor1_helper_uint16(%i53: int32, %up53: int32, %t94: Tensor[(?), uint16]) -> List[tensor_uint16_t[]] {
  %888 = equal(%i53, %up53) /* ty=bool */;
  if (%888) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %889 = take(%t94, %i53) /* ty=uint16 */;
    %890 = tensor0_uint16(%889) /* ty=tensor_uint16_t[] */;
    %891 = add(%i53, 1 /* ty=int32 */) /* ty=int32 */;
    %892 = @tensor_array_unstack_tensor1_helper_uint16(%891, %up53, %t94) /* ty=List[tensor_uint16_t[]] */;
    Cons(%890, %892) /* ty=List[tensor_uint16_t[]] */
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
