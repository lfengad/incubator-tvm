v0.0.4
type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type Option[A] {
  Some(A),
  None,
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

def @main(%input-0: Tensor[(5), custom[string]64], %keys: Tensor[(6), custom[string]64], %values: Tensor[(6), int32]) -> (Tensor[(5), int32], Tensor[(1), int32]) {
  %0 = contrib.hash_table(key_dtype="custom[string]64", value_dtype="int32", dtype="custom[hashtable]64") /* ty=Tensor[(1), custom[hashtable]64] */;
  %1 = contrib.lookup_table_find(%0, %input-0, meta[relay.Constant][0] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, key_dtype="custom[string]64", value_dtype="int32", dtype="int32") /* ty=Tensor[(5), int32] */;
  %2 = contrib.lookup_table_import(%0, %keys, %values, key_dtype="custom[string]64", value_dtype="int32") /* ty=Tensor[(1), int32] */;
  (%1, %2)
}

def @tensor_array_concat_int64(%tensor_array: List[tensor_int64_t[]]) -> tensor_int64_t[] {
  match? (%tensor_array) {
    Nil => tensor_nil_int64 /* ty=tensor_int64_t[] */,
    Cons(%hd: tensor_int64_t[], %tl: List[tensor_int64_t[]]) => match? (%tl) {
      Nil => %hd,
      _ => %3 = @tensor_array_concat_int64(%tl) /* ty=tensor_int64_t[] */;
      @tensor_concatenate_int64(%hd, %3) /* ty=tensor_int64_t[] */,
    },
  }
}

def @tensor_array_scatter_int64(%tensor_array1: List[tensor_int64_t[]], %indices: Tensor[(?), int32], %values1: List[tensor_int64_t[]]) -> List[tensor_int64_t[]] {
  %4 = shape_of(%indices, dtype="int32") /* ty=Tensor[(1), int32] */;
  %5 = take(%4, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int64(%tensor_array1, 0 /* ty=int32 */, %5, %indices, %values1) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_scatter_helper_int64(%ta: List[tensor_int64_t[]], %current: int32, %limit: int32, %indices_: Tensor[(?), int32], %values_: List[tensor_int64_t[]]) -> List[tensor_int64_t[]] {
  %6 = equal(%current, %limit) /* ty=bool */;
  if (%6) {
    %ta
  } else {
    %7 = take(%indices_, %current) /* ty=int32 */;
    %8 = @tensor_array_read_int64(%values_, %current) /* ty=tensor_int64_t[] */;
    %9 = @tensor_array_write_int64(%ta, %7, %8) /* ty=List[tensor_int64_t[]] */;
    %10 = add(%current, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int64(%9, %10, %limit, %indices_, %values_) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor6_int64(%tensor: Tensor[(?, ?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %11 = shape_of(%tensor, dtype="int32") /* ty=Tensor[(6), int32] */;
  %12 = take(%11, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int64(0 /* ty=int32 */, %12, %tensor) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor6_helper_int64(%i: int32, %up: int32, %t: Tensor[(?, ?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %13 = equal(%i, %up) /* ty=bool */;
  if (%13) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %14 = take(%t, %i, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    %15 = tensor5_int64(%14) /* ty=tensor_int64_t[] */;
    %16 = add(%i, 1 /* ty=int32 */) /* ty=int32 */;
    %17 = @tensor_array_unstack_tensor6_helper_int64(%16, %up, %t) /* ty=List[tensor_int64_t[]] */;
    Cons(%15, %17) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int64(%tensor1: Tensor[(?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %18 = shape_of(%tensor1, dtype="int32") /* ty=Tensor[(5), int32] */;
  %19 = take(%18, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int64(0 /* ty=int32 */, %19, %tensor1) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int64(%i1: int32, %up1: int32, %t1: Tensor[(?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %20 = equal(%i1, %up1) /* ty=bool */;
  if (%20) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %21 = take(%t1, %i1, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    %22 = tensor3_int64(%21) /* ty=tensor_int64_t[] */;
    %23 = add(%i1, 1 /* ty=int32 */) /* ty=int32 */;
    %24 = @tensor_array_unstack_tensor4_helper_int64(%23, %up1, %t1) /* ty=List[tensor_int64_t[]] */;
    Cons(%22, %24) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_int64(%i2: int32, %up2: int32, %t2: Tensor[(?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %25 = equal(%i2, %up2) /* ty=bool */;
  if (%25) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %26 = take(%t2, %i2, axis=0) /* ty=Tensor[(?, ?), int64] */;
    %27 = tensor2_int64(%26) /* ty=tensor_int64_t[] */;
    %28 = add(%i2, 1 /* ty=int32 */) /* ty=int32 */;
    %29 = @tensor_array_unstack_tensor3_helper_int64(%28, %up2, %t2) /* ty=List[tensor_int64_t[]] */;
    Cons(%27, %29) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_int64(%i3: int32, %up3: int32, %t3: Tensor[(?), int64]) -> List[tensor_int64_t[]] {
  %30 = equal(%i3, %up3) /* ty=bool */;
  if (%30) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %31 = take(%t3, %i3) /* ty=int64 */;
    %32 = tensor0_int64(%31) /* ty=tensor_int64_t[] */;
    %33 = add(%i3, 1 /* ty=int32 */) /* ty=int32 */;
    %34 = @tensor_array_unstack_tensor1_helper_int64(%33, %up3, %t3) /* ty=List[tensor_int64_t[]] */;
    Cons(%32, %34) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_read_int64(%tensor_array2: List[tensor_int64_t[]], %x: int32) -> tensor_int64_t[] {
  @nth(%tensor_array2, %x) /* ty=tensor_int64_t[] */
}

def @tensor_concatenate_int64(%x1: tensor_int64_t[], %y: tensor_int64_t[]) -> tensor_int64_t[] {
  match? (%x1) {
    tensor1_int64(%t11: Tensor[(?), int64]) => match? (%y) {
      tensor1_int64(%t12: Tensor[(?), int64]) => %35 = (%t11, %t12);
      %36 = concatenate(%35) /* ty=Tensor[(?), int64] */;
      tensor1_int64(%36) /* ty=tensor_int64_t[] */,
    },
    tensor2_int64(%t21: Tensor[(?, ?), int64]) => match? (%y) {
      tensor2_int64(%t22: Tensor[(?, ?), int64]) => %37 = (%t21, %t22);
      %38 = concatenate(%37) /* ty=Tensor[(?, ?), int64] */;
      tensor2_int64(%38) /* ty=tensor_int64_t[] */,
    },
    tensor3_int64(%t31: Tensor[(?, ?, ?), int64]) => match? (%y) {
      tensor3_int64(%t32: Tensor[(?, ?, ?), int64]) => %39 = (%t31, %t32);
      %40 = concatenate(%39) /* ty=Tensor[(?, ?, ?), int64] */;
      tensor3_int64(%40) /* ty=tensor_int64_t[] */,
    },
    tensor4_int64(%t41: Tensor[(?, ?, ?, ?), int64]) => match? (%y) {
      tensor4_int64(%t42: Tensor[(?, ?, ?, ?), int64]) => %41 = (%t41, %t42);
      %42 = concatenate(%41) /* ty=Tensor[(?, ?, ?, ?), int64] */;
      tensor4_int64(%42) /* ty=tensor_int64_t[] */,
    },
  }
}

def @tensor_expand_dims_int64(%x2: tensor_int64_t[]) -> tensor_int64_t[] {
  match? (%x2) {
    tensor0_int64(%t0: int64) => %43 = expand_dims(%t0, axis=0) /* ty=Tensor[(?), int64] */;
    tensor1_int64(%43) /* ty=tensor_int64_t[] */,
    tensor1_int64(%t13: Tensor[(?), int64]) => %44 = expand_dims(%t13, axis=0) /* ty=Tensor[(?, ?), int64] */;
    tensor2_int64(%44) /* ty=tensor_int64_t[] */,
    tensor2_int64(%t23: Tensor[(?, ?), int64]) => %45 = expand_dims(%t23, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    tensor3_int64(%45) /* ty=tensor_int64_t[] */,
    tensor3_int64(%t33: Tensor[(?, ?, ?), int64]) => %46 = expand_dims(%t33, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    tensor4_int64(%46) /* ty=tensor_int64_t[] */,
    tensor4_int64(%t4: Tensor[(?, ?, ?, ?), int64]) => %47 = expand_dims(%t4, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    tensor5_int64(%47) /* ty=tensor_int64_t[] */,
    tensor5_int64(%t5: Tensor[(?, ?, ?, ?, ?), int64]) => %48 = expand_dims(%t5, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int64] */;
    tensor6_int64(%48) /* ty=tensor_int64_t[] */,
  }
}

def @tensor_array_stack_uint16(%tensor_array3: List[tensor_uint16_t[]]) -> tensor_uint16_t[] {
  %49 = @map(@tensor_expand_dims_uint16, %tensor_array3) /* ty=List[tensor_uint16_t[]] */;
  %50 = @hd(%49) /* ty=tensor_uint16_t[] */;
  %51 = @tl(%49) /* ty=List[tensor_uint16_t[]] */;
  @foldl(@tensor_concatenate_uint16, %50, %51) /* ty=tensor_uint16_t[] */
}

def @tensor_array_split_uint16(%tensor_array4: List[tensor_uint16_t[]], %value: tensor_uint16_t[], %lengths: Tensor[(?), int32]) -> List[tensor_uint16_t[]] {
  %52 = shape_of(%lengths, dtype="int32") /* ty=Tensor[(1), int32] */;
  %53 = take(%52, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_uint16(%tensor_array4, %value, 0 /* ty=int32 */, 0 /* ty=int32 */, %53, %lengths) /* ty=List[tensor_uint16_t[]] */
}

def @ta_split_helper_uint16(%tensor_array5: List[tensor_uint16_t[]], %value1: tensor_uint16_t[], %offset1: int32, %current1: int32, %limit1: int32, %lengths1: Tensor[(?), int32]) -> List[tensor_uint16_t[]] {
  %54 = equal(%current1, %limit1) /* ty=bool */;
  if (%54) {
    %tensor_array5
  } else {
    %55 = take(%lengths1, %current1) /* ty=int32 */;
    %56 = add(%offset1, %55) /* ty=int32 */;
    %57 = add(%current1, 1 /* ty=int32 */) /* ty=int32 */;
    %58 = @ta_split_helper_uint16(%tensor_array5, %value1, %56, %57, %limit1, %lengths1) /* ty=List[tensor_uint16_t[]] */;
    %59 = take(%lengths1, %current1) /* ty=int32 */;
    %60 = add(%59, %offset1) /* ty=int32 */;
    %61 = @tensor_take_uint16(%value1, %offset1, %60) /* ty=tensor_uint16_t[] */;
    @tensor_array_write_uint16(%58, %current1, %61) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_scatter_helper_uint16(%ta1: List[tensor_uint16_t[]], %current2: int32, %limit2: int32, %indices_1: Tensor[(?), int32], %values_1: List[tensor_uint16_t[]]) -> List[tensor_uint16_t[]] {
  %62 = equal(%current2, %limit2) /* ty=bool */;
  if (%62) {
    %ta1
  } else {
    %63 = take(%indices_1, %current2) /* ty=int32 */;
    %64 = @tensor_array_read_uint16(%values_1, %current2) /* ty=tensor_uint16_t[] */;
    %65 = @tensor_array_write_uint16(%ta1, %63, %64) /* ty=List[tensor_uint16_t[]] */;
    %66 = add(%current2, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_uint16(%65, %66, %limit2, %indices_1, %values_1) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_uint16(%tensor2: Tensor[(?, ?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %67 = shape_of(%tensor2, dtype="int32") /* ty=Tensor[(6), int32] */;
  %68 = take(%67, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_uint16(0 /* ty=int32 */, %68, %tensor2) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor6_helper_uint16(%i4: int32, %up4: int32, %t6: Tensor[(?, ?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %69 = equal(%i4, %up4) /* ty=bool */;
  if (%69) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %70 = take(%t6, %i4, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    %71 = tensor5_uint16(%70) /* ty=tensor_uint16_t[] */;
    %72 = add(%i4, 1 /* ty=int32 */) /* ty=int32 */;
    %73 = @tensor_array_unstack_tensor6_helper_uint16(%72, %up4, %t6) /* ty=List[tensor_uint16_t[]] */;
    Cons(%71, %73) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor5_helper_uint16(%i5: int32, %up5: int32, %t7: Tensor[(?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %74 = equal(%i5, %up5) /* ty=bool */;
  if (%74) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %75 = take(%t7, %i5, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    %76 = tensor4_uint16(%75) /* ty=tensor_uint16_t[] */;
    %77 = add(%i5, 1 /* ty=int32 */) /* ty=int32 */;
    %78 = @tensor_array_unstack_tensor5_helper_uint16(%77, %up5, %t7) /* ty=List[tensor_uint16_t[]] */;
    Cons(%76, %78) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_uint16(%i6: int32, %up6: int32, %t8: Tensor[(?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %79 = equal(%i6, %up6) /* ty=bool */;
  if (%79) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %80 = take(%t8, %i6, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    %81 = tensor3_uint16(%80) /* ty=tensor_uint16_t[] */;
    %82 = add(%i6, 1 /* ty=int32 */) /* ty=int32 */;
    %83 = @tensor_array_unstack_tensor4_helper_uint16(%82, %up6, %t8) /* ty=List[tensor_uint16_t[]] */;
    Cons(%81, %83) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_uint16(%tensor3: Tensor[(?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %84 = shape_of(%tensor3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = take(%84, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_uint16(0 /* ty=int32 */, %85, %tensor3) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_unstack_tensor3_helper_uint16(%i7: int32, %up7: int32, %t9: Tensor[(?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %86 = equal(%i7, %up7) /* ty=bool */;
  if (%86) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %87 = take(%t9, %i7, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    %88 = tensor2_uint16(%87) /* ty=tensor_uint16_t[] */;
    %89 = add(%i7, 1 /* ty=int32 */) /* ty=int32 */;
    %90 = @tensor_array_unstack_tensor3_helper_uint16(%89, %up7, %t9) /* ty=List[tensor_uint16_t[]] */;
    Cons(%88, %90) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_uint16(%i8: int32, %up8: int32, %t10: Tensor[(?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %91 = equal(%i8, %up8) /* ty=bool */;
  if (%91) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %92 = take(%t10, %i8, axis=0) /* ty=Tensor[(?), uint16] */;
    %93 = tensor1_uint16(%92) /* ty=tensor_uint16_t[] */;
    %94 = add(%i8, 1 /* ty=int32 */) /* ty=int32 */;
    %95 = @tensor_array_unstack_tensor2_helper_uint16(%94, %up8, %t10) /* ty=List[tensor_uint16_t[]] */;
    Cons(%93, %95) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_uint16(%tensor4: Tensor[(?), uint16]) -> List[tensor_uint16_t[]] {
  %96 = shape_of(%tensor4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %97 = take(%96, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_uint16(0 /* ty=int32 */, %97, %tensor4) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_take_int32(%tensor5: tensor_int32_t[], %lower: int32, %upper: int32) -> tensor_int32_t[] {
  match? (%tensor5) {
    tensor1_int32(%t14: Tensor[(?), int32]) => %98 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][1], dtype="int32") /* ty=Tensor[(?), int32] */;
    %99 = take(%t14, %98) /* ty=Tensor[(?), int32] */;
    tensor1_int32(%99) /* ty=tensor_int32_t[] */,
    tensor2_int32(%t24: Tensor[(?, ?), int32]) => %100 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][2], dtype="int32") /* ty=Tensor[(?), int32] */;
    %101 = take(%t24, %100, axis=0) /* ty=Tensor[(?, ?), int32] */;
    tensor2_int32(%101) /* ty=tensor_int32_t[] */,
    tensor3_int32(%t34: Tensor[(?, ?, ?), int32]) => %102 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][3], dtype="int32") /* ty=Tensor[(?), int32] */;
    %103 = take(%t34, %102, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    tensor3_int32(%103) /* ty=tensor_int32_t[] */,
    tensor4_int32(%t43: Tensor[(?, ?, ?, ?), int32]) => %104 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][4], dtype="int32") /* ty=Tensor[(?), int32] */;
    %105 = take(%t43, %104, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    tensor4_int32(%105) /* ty=tensor_int32_t[] */,
    tensor5_int32(%t51: Tensor[(?, ?, ?, ?, ?), int32]) => %106 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][5], dtype="int32") /* ty=Tensor[(?), int32] */;
    %107 = take(%t51, %106, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    tensor5_int32(%107) /* ty=tensor_int32_t[] */,
    tensor6_int32(%t61: Tensor[(?, ?, ?, ?, ?, ?), int32]) => %108 = arange(%lower, %upper, 1 /* ty=int32 */, start=meta[relay.Var][0], stop=meta[relay.Var][1], step=meta[relay.Constant][6], dtype="int32") /* ty=Tensor[(?), int32] */;
    %109 = take(%t61, %108, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int32] */;
    tensor6_int32(%109) /* ty=tensor_int32_t[] */,
  }
}

def @tensor_take_int16(%tensor6: tensor_int16_t[], %lower1: int32, %upper1: int32) -> tensor_int16_t[] {
  match? (%tensor6) {
    tensor1_int16(%t15: Tensor[(?), int16]) => %110 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][7], dtype="int32") /* ty=Tensor[(?), int32] */;
    %111 = take(%t15, %110) /* ty=Tensor[(?), int16] */;
    tensor1_int16(%111) /* ty=tensor_int16_t[] */,
    tensor2_int16(%t25: Tensor[(?, ?), int16]) => %112 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][8], dtype="int32") /* ty=Tensor[(?), int32] */;
    %113 = take(%t25, %112, axis=0) /* ty=Tensor[(?, ?), int16] */;
    tensor2_int16(%113) /* ty=tensor_int16_t[] */,
    tensor3_int16(%t35: Tensor[(?, ?, ?), int16]) => %114 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][9], dtype="int32") /* ty=Tensor[(?), int32] */;
    %115 = take(%t35, %114, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    tensor3_int16(%115) /* ty=tensor_int16_t[] */,
    tensor4_int16(%t44: Tensor[(?, ?, ?, ?), int16]) => %116 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][10], dtype="int32") /* ty=Tensor[(?), int32] */;
    %117 = take(%t44, %116, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    tensor4_int16(%117) /* ty=tensor_int16_t[] */,
    tensor5_int16(%t52: Tensor[(?, ?, ?, ?, ?), int16]) => %118 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][11], dtype="int32") /* ty=Tensor[(?), int32] */;
    %119 = take(%t52, %118, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    tensor5_int16(%119) /* ty=tensor_int16_t[] */,
    tensor6_int16(%t62: Tensor[(?, ?, ?, ?, ?, ?), int16]) => %120 = arange(%lower1, %upper1, 1 /* ty=int32 */, start=meta[relay.Var][2], stop=meta[relay.Var][3], step=meta[relay.Constant][12], dtype="int32") /* ty=Tensor[(?), int32] */;
    %121 = take(%t62, %120, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int16] */;
    tensor6_int16(%121) /* ty=tensor_int16_t[] */,
  }
}

def @tensor_array_concat_float64(%tensor_array6: List[tensor_float64_t[]]) -> tensor_float64_t[] {
  match? (%tensor_array6) {
    Nil => tensor_nil_float64 /* ty=tensor_float64_t[] */,
    Cons(%hd1: tensor_float64_t[], %tl1: List[tensor_float64_t[]]) => match? (%tl1) {
      Nil => %hd1,
      _ => %122 = @tensor_array_concat_float64(%tl1) /* ty=tensor_float64_t[] */;
      @tensor_concatenate_float64(%hd1, %122) /* ty=tensor_float64_t[] */,
    },
  }
}

def @tensor_array_scatter_float64(%tensor_array7: List[tensor_float64_t[]], %indices1: Tensor[(?), int32], %values2: List[tensor_float64_t[]]) -> List[tensor_float64_t[]] {
  %123 = shape_of(%indices1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %124 = take(%123, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float64(%tensor_array7, 0 /* ty=int32 */, %124, %indices1, %values2) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor4_uint16(%tensor7: Tensor[(?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %125 = shape_of(%tensor7, dtype="int32") /* ty=Tensor[(4), int32] */;
  %126 = take(%125, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_uint16(0 /* ty=int32 */, %126, %tensor7) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_concat_int16(%tensor_array8: List[tensor_int16_t[]]) -> tensor_int16_t[] {
  match? (%tensor_array8) {
    Nil => tensor_nil_int16 /* ty=tensor_int16_t[] */,
    Cons(%hd2: tensor_int16_t[], %tl2: List[tensor_int16_t[]]) => match? (%tl2) {
      Nil => %hd2,
      _ => %127 = @tensor_array_concat_int16(%tl2) /* ty=tensor_int16_t[] */;
      @tensor_concatenate_int16(%hd2, %127) /* ty=tensor_int16_t[] */,
    },
  }
}

def @tensor_array_write_int64(%tensor_array9: List[tensor_int64_t[]], %x3: int32, %v: tensor_int64_t[]) -> List[tensor_int64_t[]] {
  @update(%tensor_array9, %x3, %v) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_float64(%i9: int32, %up9: int32, %t16: Tensor[(?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %128 = equal(%i9, %up9) /* ty=bool */;
  if (%128) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %129 = take(%t16, %i9, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    %130 = tensor3_float64(%129) /* ty=tensor_float64_t[] */;
    %131 = add(%i9, 1 /* ty=int32 */) /* ty=int32 */;
    %132 = @tensor_array_unstack_tensor4_helper_float64(%131, %up9, %t16) /* ty=List[tensor_float64_t[]] */;
    Cons(%130, %132) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor3_float64(%tensor8: Tensor[(?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %133 = shape_of(%tensor8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = take(%133, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float64(0 /* ty=int32 */, %134, %tensor8) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_concat_int8(%tensor_array10: List[tensor_int8_t[]]) -> tensor_int8_t[] {
  match? (%tensor_array10) {
    Nil => tensor_nil_int8 /* ty=tensor_int8_t[] */,
    Cons(%hd3: tensor_int8_t[], %tl3: List[tensor_int8_t[]]) => match? (%tl3) {
      Nil => %hd3,
      _ => %135 = @tensor_array_concat_int8(%tl3) /* ty=tensor_int8_t[] */;
      @tensor_concatenate_int8(%hd3, %135) /* ty=tensor_int8_t[] */,
    },
  }
}

def @tensor_array_concat_uint8(%tensor_array11: List[tensor_uint8_t[]]) -> tensor_uint8_t[] {
  match? (%tensor_array11) {
    Nil => tensor_nil_uint8 /* ty=tensor_uint8_t[] */,
    Cons(%hd4: tensor_uint8_t[], %tl4: List[tensor_uint8_t[]]) => match? (%tl4) {
      Nil => %hd4,
      _ => %136 = @tensor_array_concat_uint8(%tl4) /* ty=tensor_uint8_t[] */;
      @tensor_concatenate_uint8(%hd4, %136) /* ty=tensor_uint8_t[] */,
    },
  }
}

def @tensor_array_write_float64(%tensor_array12: List[tensor_float64_t[]], %x4: int32, %v1: tensor_float64_t[]) -> List[tensor_float64_t[]] {
  @update(%tensor_array12, %x4, %v1) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor4_int16(%tensor9: Tensor[(?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %137 = shape_of(%tensor9, dtype="int32") /* ty=Tensor[(4), int32] */;
  %138 = take(%137, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int16(0 /* ty=int32 */, %138, %tensor9) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor5_helper_float64(%i10: int32, %up10: int32, %t17: Tensor[(?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %139 = equal(%i10, %up10) /* ty=bool */;
  if (%139) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %140 = take(%t17, %i10, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    %141 = tensor4_float64(%140) /* ty=tensor_float64_t[] */;
    %142 = add(%i10, 1 /* ty=int32 */) /* ty=int32 */;
    %143 = @tensor_array_unstack_tensor5_helper_float64(%142, %up10, %t17) /* ty=List[tensor_float64_t[]] */;
    Cons(%141, %143) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_float64(%i11: int32, %up11: int32, %t18: Tensor[(?, ?), float64]) -> List[tensor_float64_t[]] {
  %144 = equal(%i11, %up11) /* ty=bool */;
  if (%144) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %145 = take(%t18, %i11, axis=0) /* ty=Tensor[(?), float64] */;
    %146 = tensor1_float64(%145) /* ty=tensor_float64_t[] */;
    %147 = add(%i11, 1 /* ty=int32 */) /* ty=int32 */;
    %148 = @tensor_array_unstack_tensor2_helper_float64(%147, %up11, %t18) /* ty=List[tensor_float64_t[]] */;
    Cons(%146, %148) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_stack_float64(%tensor_array13: List[tensor_float64_t[]]) -> tensor_float64_t[] {
  %149 = @map(@tensor_expand_dims_float64, %tensor_array13) /* ty=List[tensor_float64_t[]] */;
  %150 = @hd(%149) /* ty=tensor_float64_t[] */;
  %151 = @tl(%149) /* ty=List[tensor_float64_t[]] */;
  @foldl(@tensor_concatenate_float64, %150, %151) /* ty=tensor_float64_t[] */
}

def @rev[A](%xs: List[A]) -> List[A] {
  %152 = @flip(Cons) /* ty=fn (List[A], A) -> List[A] */;
  %153 = Nil /* ty=List[A] */;
  @foldl(%152, %153, %xs) /* ty=List[A] */
}

def @tensor_array_stack_int32(%tensor_array14: List[tensor_int32_t[]]) -> tensor_int32_t[] {
  %154 = @map(@tensor_expand_dims_int32, %tensor_array14) /* ty=List[tensor_int32_t[]] */;
  %155 = @hd(%154) /* ty=tensor_int32_t[] */;
  %156 = @tl(%154) /* ty=List[tensor_int32_t[]] */;
  @foldl(@tensor_concatenate_int32, %155, %156) /* ty=tensor_int32_t[] */
}

def @tensor_array_unstack_tensor1_uint8(%tensor10: Tensor[(?), uint8]) -> List[tensor_uint8_t[]] {
  %157 = shape_of(%tensor10, dtype="int32") /* ty=Tensor[(1), int32] */;
  %158 = take(%157, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_uint8(0 /* ty=int32 */, %158, %tensor10) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_scatter_float16(%tensor_array15: List[tensor_float16_t[]], %indices2: Tensor[(?), int32], %values3: List[tensor_float16_t[]]) -> List[tensor_float16_t[]] {
  %159 = shape_of(%indices2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %160 = take(%159, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float16(%tensor_array15, 0 /* ty=int32 */, %160, %indices2, %values3) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor6_helper_float64(%i12: int32, %up12: int32, %t19: Tensor[(?, ?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %161 = equal(%i12, %up12) /* ty=bool */;
  if (%161) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %162 = take(%t19, %i12, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    %163 = tensor5_float64(%162) /* ty=tensor_float64_t[] */;
    %164 = add(%i12, 1 /* ty=int32 */) /* ty=int32 */;
    %165 = @tensor_array_unstack_tensor6_helper_float64(%164, %up12, %t19) /* ty=List[tensor_float64_t[]] */;
    Cons(%163, %165) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_split_float16(%tensor_array16: List[tensor_float16_t[]], %value2: tensor_float16_t[], %lengths2: Tensor[(?), int32]) -> List[tensor_float16_t[]] {
  %166 = shape_of(%lengths2, dtype="int32") /* ty=Tensor[(1), int32] */;
  %167 = take(%166, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float16(%tensor_array16, %value2, 0 /* ty=int32 */, 0 /* ty=int32 */, %167, %lengths2) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor3_uint8(%tensor11: Tensor[(?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %168 = shape_of(%tensor11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = take(%168, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_uint8(0 /* ty=int32 */, %169, %tensor11) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor5_helper_float16(%i13: int32, %up13: int32, %t20: Tensor[(?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %170 = equal(%i13, %up13) /* ty=bool */;
  if (%170) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %171 = take(%t20, %i13, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    %172 = tensor4_float16(%171) /* ty=tensor_float16_t[] */;
    %173 = add(%i13, 1 /* ty=int32 */) /* ty=int32 */;
    %174 = @tensor_array_unstack_tensor5_helper_float16(%173, %up13, %t20) /* ty=List[tensor_float16_t[]] */;
    Cons(%172, %174) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor4_helper_float16(%i14: int32, %up14: int32, %t26: Tensor[(?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %175 = equal(%i14, %up14) /* ty=bool */;
  if (%175) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %176 = take(%t26, %i14, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    %177 = tensor3_float16(%176) /* ty=tensor_float16_t[] */;
    %178 = add(%i14, 1 /* ty=int32 */) /* ty=int32 */;
    %179 = @tensor_array_unstack_tensor4_helper_float16(%178, %up14, %t26) /* ty=List[tensor_float16_t[]] */;
    Cons(%177, %179) /* ty=List[tensor_float16_t[]] */
  }
}

def @ta_split_helper_float16(%tensor_array17: List[tensor_float16_t[]], %value11: tensor_float16_t[], %offset11: int32, %current11: int32, %limit11: int32, %lengths3: Tensor[(?), int32]) -> List[tensor_float16_t[]] {
  %180 = equal(%current11, %limit11) /* ty=bool */;
  if (%180) {
    %tensor_array17
  } else {
    %181 = take(%lengths3, %current11) /* ty=int32 */;
    %182 = add(%offset11, %181) /* ty=int32 */;
    %183 = add(%current11, 1 /* ty=int32 */) /* ty=int32 */;
    %184 = @ta_split_helper_float16(%tensor_array17, %value11, %182, %183, %limit11, %lengths3) /* ty=List[tensor_float16_t[]] */;
    %185 = take(%lengths3, %current11) /* ty=int32 */;
    %186 = add(%185, %offset11) /* ty=int32 */;
    %187 = @tensor_take_float16(%value11, %offset11, %186) /* ty=tensor_float16_t[] */;
    @tensor_array_write_float16(%184, %current11, %187) /* ty=List[tensor_float16_t[]] */
  }
}

def @ta_split_helper_int64(%tensor_array18: List[tensor_int64_t[]], %value12: tensor_int64_t[], %offset12: int32, %current12: int32, %limit12: int32, %lengths4: Tensor[(?), int32]) -> List[tensor_int64_t[]] {
  %188 = equal(%current12, %limit12) /* ty=bool */;
  if (%188) {
    %tensor_array18
  } else {
    %189 = take(%lengths4, %current12) /* ty=int32 */;
    %190 = add(%offset12, %189) /* ty=int32 */;
    %191 = add(%current12, 1 /* ty=int32 */) /* ty=int32 */;
    %192 = @ta_split_helper_int64(%tensor_array18, %value12, %190, %191, %limit12, %lengths4) /* ty=List[tensor_int64_t[]] */;
    %193 = take(%lengths4, %current12) /* ty=int32 */;
    %194 = add(%193, %offset12) /* ty=int32 */;
    %195 = @tensor_take_int64(%value12, %offset12, %194) /* ty=tensor_int64_t[] */;
    @tensor_array_write_int64(%192, %current12, %195) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_write_float16(%tensor_array19: List[tensor_float16_t[]], %x5: int32, %v2: tensor_float16_t[]) -> List[tensor_float16_t[]] {
  @update(%tensor_array19, %x5, %v2) /* ty=List[tensor_float16_t[]] */
}

def @length[A](%xs1: List[A]) -> int32 {
  match (%xs1) {
    Cons(_, %rest: List[A]) => %196 = @length(%rest) /* ty=int32 */;
    add(1 /* ty=int32 */, %196) /* ty=int32 */,
    Nil => 0 /* ty=int32 */,
  }
}

def @tensor_array_unstack_tensor4_int8(%tensor12: Tensor[(?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %197 = shape_of(%tensor12, dtype="int32") /* ty=Tensor[(4), int32] */;
  %198 = take(%197, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int8(0 /* ty=int32 */, %198, %tensor12) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor5_helper_int64(%i15: int32, %up15: int32, %t27: Tensor[(?, ?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %199 = equal(%i15, %up15) /* ty=bool */;
  if (%199) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %200 = take(%t27, %i15, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    %201 = tensor4_int64(%200) /* ty=tensor_int64_t[] */;
    %202 = add(%i15, 1 /* ty=int32 */) /* ty=int32 */;
    %203 = @tensor_array_unstack_tensor5_helper_int64(%202, %up15, %t27) /* ty=List[tensor_int64_t[]] */;
    Cons(%201, %203) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_scatter_helper_float64(%ta2: List[tensor_float64_t[]], %current3: int32, %limit3: int32, %indices_2: Tensor[(?), int32], %values_2: List[tensor_float64_t[]]) -> List[tensor_float64_t[]] {
  %204 = equal(%current3, %limit3) /* ty=bool */;
  if (%204) {
    %ta2
  } else {
    %205 = take(%indices_2, %current3) /* ty=int32 */;
    %206 = @tensor_array_read_float64(%values_2, %current3) /* ty=tensor_float64_t[] */;
    %207 = @tensor_array_write_float64(%ta2, %205, %206) /* ty=List[tensor_float64_t[]] */;
    %208 = add(%current3, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float64(%207, %208, %limit3, %indices_2, %values_2) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_stack_int64(%tensor_array20: List[tensor_int64_t[]]) -> tensor_int64_t[] {
  %209 = @map(@tensor_expand_dims_int64, %tensor_array20) /* ty=List[tensor_int64_t[]] */;
  %210 = @hd(%209) /* ty=tensor_int64_t[] */;
  %211 = @tl(%209) /* ty=List[tensor_int64_t[]] */;
  @foldl(@tensor_concatenate_int64, %210, %211) /* ty=tensor_int64_t[] */
}

def @tensor_array_unstack_tensor6_helper_int8(%i16: int32, %up16: int32, %t28: Tensor[(?, ?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %212 = equal(%i16, %up16) /* ty=bool */;
  if (%212) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %213 = take(%t28, %i16, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    %214 = tensor5_int8(%213) /* ty=tensor_int8_t[] */;
    %215 = add(%i16, 1 /* ty=int32 */) /* ty=int32 */;
    %216 = @tensor_array_unstack_tensor6_helper_int8(%215, %up16, %t28) /* ty=List[tensor_int8_t[]] */;
    Cons(%214, %216) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor5_float64(%tensor13: Tensor[(?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %217 = shape_of(%tensor13, dtype="int32") /* ty=Tensor[(5), int32] */;
  %218 = take(%217, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float64(0 /* ty=int32 */, %218, %tensor13) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_uint8(%i17: int32, %up17: int32, %t29: Tensor[(?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %219 = equal(%i17, %up17) /* ty=bool */;
  if (%219) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %220 = take(%t29, %i17, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    %221 = tensor3_uint8(%220) /* ty=tensor_uint8_t[] */;
    %222 = add(%i17, 1 /* ty=int32 */) /* ty=int32 */;
    %223 = @tensor_array_unstack_tensor4_helper_uint8(%222, %up17, %t29) /* ty=List[tensor_uint8_t[]] */;
    Cons(%221, %223) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_uint8(%i18: int32, %up18: int32, %t30: Tensor[(?, ?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %224 = equal(%i18, %up18) /* ty=bool */;
  if (%224) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %225 = take(%t30, %i18, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    %226 = tensor5_uint8(%225) /* ty=tensor_uint8_t[] */;
    %227 = add(%i18, 1 /* ty=int32 */) /* ty=int32 */;
    %228 = @tensor_array_unstack_tensor6_helper_uint8(%227, %up18, %t30) /* ty=List[tensor_uint8_t[]] */;
    Cons(%226, %228) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_expand_dims_float16(%x6: tensor_float16_t[]) -> tensor_float16_t[] {
  match? (%x6) {
    tensor0_float16(%t01: float16) => %229 = expand_dims(%t01, axis=0) /* ty=Tensor[(?), float16] */;
    tensor1_float16(%229) /* ty=tensor_float16_t[] */,
    tensor1_float16(%t110: Tensor[(?), float16]) => %230 = expand_dims(%t110, axis=0) /* ty=Tensor[(?, ?), float16] */;
    tensor2_float16(%230) /* ty=tensor_float16_t[] */,
    tensor2_float16(%t210: Tensor[(?, ?), float16]) => %231 = expand_dims(%t210, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    tensor3_float16(%231) /* ty=tensor_float16_t[] */,
    tensor3_float16(%t36: Tensor[(?, ?, ?), float16]) => %232 = expand_dims(%t36, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    tensor4_float16(%232) /* ty=tensor_float16_t[] */,
    tensor4_float16(%t45: Tensor[(?, ?, ?, ?), float16]) => %233 = expand_dims(%t45, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    tensor5_float16(%233) /* ty=tensor_float16_t[] */,
    tensor5_float16(%t53: Tensor[(?, ?, ?, ?, ?), float16]) => %234 = expand_dims(%t53, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float16] */;
    tensor6_float16(%234) /* ty=tensor_float16_t[] */,
  }
}

def @tensor_take_float16(%tensor14: tensor_float16_t[], %lower2: int32, %upper2: int32) -> tensor_float16_t[] {
  match? (%tensor14) {
    tensor1_float16(%t111: Tensor[(?), float16]) => %235 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][13], dtype="int32") /* ty=Tensor[(?), int32] */;
    %236 = take(%t111, %235) /* ty=Tensor[(?), float16] */;
    tensor1_float16(%236) /* ty=tensor_float16_t[] */,
    tensor2_float16(%t211: Tensor[(?, ?), float16]) => %237 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][14], dtype="int32") /* ty=Tensor[(?), int32] */;
    %238 = take(%t211, %237, axis=0) /* ty=Tensor[(?, ?), float16] */;
    tensor2_float16(%238) /* ty=tensor_float16_t[] */,
    tensor3_float16(%t37: Tensor[(?, ?, ?), float16]) => %239 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][15], dtype="int32") /* ty=Tensor[(?), int32] */;
    %240 = take(%t37, %239, axis=0) /* ty=Tensor[(?, ?, ?), float16] */;
    tensor3_float16(%240) /* ty=tensor_float16_t[] */,
    tensor4_float16(%t46: Tensor[(?, ?, ?, ?), float16]) => %241 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][16], dtype="int32") /* ty=Tensor[(?), int32] */;
    %242 = take(%t46, %241, axis=0) /* ty=Tensor[(?, ?, ?, ?), float16] */;
    tensor4_float16(%242) /* ty=tensor_float16_t[] */,
    tensor5_float16(%t54: Tensor[(?, ?, ?, ?, ?), float16]) => %243 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][17], dtype="int32") /* ty=Tensor[(?), int32] */;
    %244 = take(%t54, %243, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    tensor5_float16(%244) /* ty=tensor_float16_t[] */,
    tensor6_float16(%t63: Tensor[(?, ?, ?, ?, ?, ?), float16]) => %245 = arange(%lower2, %upper2, 1 /* ty=int32 */, start=meta[relay.Var][4], stop=meta[relay.Var][5], step=meta[relay.Constant][18], dtype="int32") /* ty=Tensor[(?), int32] */;
    %246 = take(%t63, %245, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float16] */;
    tensor6_float16(%246) /* ty=tensor_float16_t[] */,
  }
}

def @tensor_array_unstack_tensor3_int64(%tensor15: Tensor[(?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %247 = shape_of(%tensor15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = take(%247, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int64(0 /* ty=int32 */, %248, %tensor15) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor5_helper_int8(%i19: int32, %up19: int32, %t38: Tensor[(?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %249 = equal(%i19, %up19) /* ty=bool */;
  if (%249) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %250 = take(%t38, %i19, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    %251 = tensor4_int8(%250) /* ty=tensor_int8_t[] */;
    %252 = add(%i19, 1 /* ty=int32 */) /* ty=int32 */;
    %253 = @tensor_array_unstack_tensor5_helper_int8(%252, %up19, %t38) /* ty=List[tensor_int8_t[]] */;
    Cons(%251, %253) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_int64(%i20: int32, %up20: int32, %t39: Tensor[(?, ?), int64]) -> List[tensor_int64_t[]] {
  %254 = equal(%i20, %up20) /* ty=bool */;
  if (%254) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %255 = take(%t39, %i20, axis=0) /* ty=Tensor[(?), int64] */;
    %256 = tensor1_int64(%255) /* ty=tensor_int64_t[] */;
    %257 = add(%i20, 1 /* ty=int32 */) /* ty=int32 */;
    %258 = @tensor_array_unstack_tensor2_helper_int64(%257, %up20, %t39) /* ty=List[tensor_int64_t[]] */;
    Cons(%256, %258) /* ty=List[tensor_int64_t[]] */
  }
}

def @map_accuml[A, B, C](%f: fn (A, B) -> (A, C), %init: A, %xs2: List[B]) -> (A, List[C]) {
  let %updater: fn ((A, List[C]), B) -> (A, List[C]) = fn (%acc: (A, List[C]), %x7: B) -> (A, List[C]) {
    %259 = %acc.0;
    let %f_out: (A, C) = %f(%259, %x7) /* ty=(A, C) */;
    %260 = %f_out.0;
    %261 = %f_out.1;
    %262 = %acc.1;
    %263 = Cons(%261, %262) /* ty=List[C] */;
    (%260, %263)
  };
  %264 = Nil /* ty=List[C] */;
  %265 = (%init, %264);
  @foldl(%updater, %265, %xs2) /* ty=(A, List[C]) */
}

def @tmap[A, B](%f1: fn (A) -> B, %t40: Tree[A]) -> Tree[B] {
  match (%t40) {
    Rose(%v3: A, %sub_trees: List[Tree[A]]) => {
      let %list_f: fn (Tree[A]) -> Tree[B] = fn (%tt: Tree[A]) -> Tree[B] {
        @tmap(%f1, %tt) /* ty=Tree[B] */
      };
      %266 = %f1(%v3) /* ty=B */;
      %267 = @map(%list_f, %sub_trees) /* ty=List[Tree[B]] */;
      Rose(%266, %267) /* ty=Tree[B] */
    },
  }
}

def @filter[A](%f2: fn (A) -> bool, %xs3: List[A]) -> List[A] {
  match (%xs3) {
    Cons(%x8: A, %rest1: List[A]) => %268 = %f2(%x8) /* ty=bool */;
    if (%268) {
      %269 = @filter(%f2, %rest1) /* ty=List[A] */;
      Cons(%x8, %269) /* ty=List[A] */
    } else {
      @filter(%f2, %rest1) /* ty=List[A] */
    },
    Nil => Nil /* ty=List[A] */,
  }
}

def @tensor_array_stack_float32(%tensor_array21: List[tensor_float32_t[]]) -> tensor_float32_t[] {
  %270 = @map(@tensor_expand_dims_float32, %tensor_array21) /* ty=List[tensor_float32_t[]] */;
  %271 = @hd(%270) /* ty=tensor_float32_t[] */;
  %272 = @tl(%270) /* ty=List[tensor_float32_t[]] */;
  @foldl(@tensor_concatenate_float32, %271, %272) /* ty=tensor_float32_t[] */
}

def @id[A](%x9: A) -> A {
  %x9
}

def @tensor_array_unstack_tensor5_int8(%tensor16: Tensor[(?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %273 = shape_of(%tensor16, dtype="int32") /* ty=Tensor[(5), int32] */;
  %274 = take(%273, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int8(0 /* ty=int32 */, %274, %tensor16) /* ty=List[tensor_int8_t[]] */
}

def @tensor_concatenate_float64(%x10: tensor_float64_t[], %y1: tensor_float64_t[]) -> tensor_float64_t[] {
  match? (%x10) {
    tensor1_float64(%t112: Tensor[(?), float64]) => match? (%y1) {
      tensor1_float64(%t121: Tensor[(?), float64]) => %275 = (%t112, %t121);
      %276 = concatenate(%275) /* ty=Tensor[(?), float64] */;
      tensor1_float64(%276) /* ty=tensor_float64_t[] */,
    },
    tensor2_float64(%t212: Tensor[(?, ?), float64]) => match? (%y1) {
      tensor2_float64(%t221: Tensor[(?, ?), float64]) => %277 = (%t212, %t221);
      %278 = concatenate(%277) /* ty=Tensor[(?, ?), float64] */;
      tensor2_float64(%278) /* ty=tensor_float64_t[] */,
    },
    tensor3_float64(%t311: Tensor[(?, ?, ?), float64]) => match? (%y1) {
      tensor3_float64(%t321: Tensor[(?, ?, ?), float64]) => %279 = (%t311, %t321);
      %280 = concatenate(%279) /* ty=Tensor[(?, ?, ?), float64] */;
      tensor3_float64(%280) /* ty=tensor_float64_t[] */,
    },
    tensor4_float64(%t411: Tensor[(?, ?, ?, ?), float64]) => match? (%y1) {
      tensor4_float64(%t421: Tensor[(?, ?, ?, ?), float64]) => %281 = (%t411, %t421);
      %282 = concatenate(%281) /* ty=Tensor[(?, ?, ?, ?), float64] */;
      tensor4_float64(%282) /* ty=tensor_float64_t[] */,
    },
  }
}

def @hd[A](%xs4: List[A]) -> A {
  match? (%xs4) {
    Cons(%x11: A, _) => %x11,
  }
}

def @tensor_array_unstack_tensor2_helper_float16(%i21: int32, %up21: int32, %t47: Tensor[(?, ?), float16]) -> List[tensor_float16_t[]] {
  %283 = equal(%i21, %up21) /* ty=bool */;
  if (%283) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %284 = take(%t47, %i21, axis=0) /* ty=Tensor[(?), float16] */;
    %285 = tensor1_float16(%284) /* ty=tensor_float16_t[] */;
    %286 = add(%i21, 1 /* ty=int32 */) /* ty=int32 */;
    %287 = @tensor_array_unstack_tensor2_helper_float16(%286, %up21, %t47) /* ty=List[tensor_float16_t[]] */;
    Cons(%285, %287) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_concat_float32(%tensor_array22: List[tensor_float32_t[]]) -> tensor_float32_t[] {
  match? (%tensor_array22) {
    Nil => tensor_nil_float32 /* ty=tensor_float32_t[] */,
    Cons(%hd5: tensor_float32_t[], %tl5: List[tensor_float32_t[]]) => match? (%tl5) {
      Nil => %hd5,
      _ => %288 = @tensor_array_concat_float32(%tl5) /* ty=tensor_float32_t[] */;
      @tensor_concatenate_float32(%hd5, %288) /* ty=tensor_float32_t[] */,
    },
  }
}

def @unfoldr[A, B](%f3: fn (A) -> Option[(A, B)], %seed: A) -> List[B] {
  %289 = %f3(%seed) /* ty=Option[(A, B)] */;
  match (%289) {
    Some(%val: (A, B)) => %290 = %val.1;
    %291 = %val.0;
    %292 = @unfoldr(%f3, %291) /* ty=List[B] */;
    Cons(%290, %292) /* ty=List[B] */,
    None => Nil /* ty=List[B] */,
  }
}

def @foldr[A, B](%f4: fn (A, B) -> B, %acc1: B, %xs5: List[A]) -> B {
  match (%xs5) {
    Cons(%x12: A, %rest2: List[A]) => %293 = @foldr(%f4, %acc1, %rest2) /* ty=B */;
    %f4(%x12, %293) /* ty=B */,
    Nil => %acc1,
  }
}

def @tensor_array_unstack_tensor4_float16(%tensor17: Tensor[(?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %294 = shape_of(%tensor17, dtype="int32") /* ty=Tensor[(4), int32] */;
  %295 = take(%294, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float16(0 /* ty=int32 */, %295, %tensor17) /* ty=List[tensor_float16_t[]] */
}

def @ta_split_helper_float64(%tensor_array23: List[tensor_float64_t[]], %value13: tensor_float64_t[], %offset13: int32, %current13: int32, %limit13: int32, %lengths5: Tensor[(?), int32]) -> List[tensor_float64_t[]] {
  %296 = equal(%current13, %limit13) /* ty=bool */;
  if (%296) {
    %tensor_array23
  } else {
    %297 = take(%lengths5, %current13) /* ty=int32 */;
    %298 = add(%offset13, %297) /* ty=int32 */;
    %299 = add(%current13, 1 /* ty=int32 */) /* ty=int32 */;
    %300 = @ta_split_helper_float64(%tensor_array23, %value13, %298, %299, %limit13, %lengths5) /* ty=List[tensor_float64_t[]] */;
    %301 = take(%lengths5, %current13) /* ty=int32 */;
    %302 = add(%301, %offset13) /* ty=int32 */;
    %303 = @tensor_take_float64(%value13, %offset13, %302) /* ty=tensor_float64_t[] */;
    @tensor_array_write_float64(%300, %current13, %303) /* ty=List[tensor_float64_t[]] */
  }
}

def @iterate[A](%f5: fn (A) -> A, %n: int32) -> fn (A) -> A {
  %304 = equal(%n, 0 /* ty=int32 */) /* ty=bool */;
  if (%304) {
    @id
  } else {
    %305 = subtract(%n, 1 /* ty=int32 */) /* ty=int32 */;
    %306 = @iterate(%f5, %305) /* ty=fn (A) -> A */;
    @compose(%f5, %306) /* ty=fn (A) -> A */
  }
}

def @tensor_take_uint16(%tensor18: tensor_uint16_t[], %lower3: int32, %upper3: int32) -> tensor_uint16_t[] {
  match? (%tensor18) {
    tensor1_uint16(%t113: Tensor[(?), uint16]) => %307 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][19], dtype="int32") /* ty=Tensor[(?), int32] */;
    %308 = take(%t113, %307) /* ty=Tensor[(?), uint16] */;
    tensor1_uint16(%308) /* ty=tensor_uint16_t[] */,
    tensor2_uint16(%t213: Tensor[(?, ?), uint16]) => %309 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][20], dtype="int32") /* ty=Tensor[(?), int32] */;
    %310 = take(%t213, %309, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    tensor2_uint16(%310) /* ty=tensor_uint16_t[] */,
    tensor3_uint16(%t310: Tensor[(?, ?, ?), uint16]) => %311 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][21], dtype="int32") /* ty=Tensor[(?), int32] */;
    %312 = take(%t310, %311, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    tensor3_uint16(%312) /* ty=tensor_uint16_t[] */,
    tensor4_uint16(%t48: Tensor[(?, ?, ?, ?), uint16]) => %313 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][22], dtype="int32") /* ty=Tensor[(?), int32] */;
    %314 = take(%t48, %313, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    tensor4_uint16(%314) /* ty=tensor_uint16_t[] */,
    tensor5_uint16(%t55: Tensor[(?, ?, ?, ?, ?), uint16]) => %315 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][23], dtype="int32") /* ty=Tensor[(?), int32] */;
    %316 = take(%t55, %315, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    tensor5_uint16(%316) /* ty=tensor_uint16_t[] */,
    tensor6_uint16(%t64: Tensor[(?, ?, ?, ?, ?, ?), uint16]) => %317 = arange(%lower3, %upper3, 1 /* ty=int32 */, start=meta[relay.Var][6], stop=meta[relay.Var][7], step=meta[relay.Constant][24], dtype="int32") /* ty=Tensor[(?), int32] */;
    %318 = take(%t64, %317, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint16] */;
    tensor6_uint16(%318) /* ty=tensor_uint16_t[] */,
  }
}

def @tensor_array_unstack_tensor1_helper_uint16(%i22: int32, %up22: int32, %t49: Tensor[(?), uint16]) -> List[tensor_uint16_t[]] {
  %319 = equal(%i22, %up22) /* ty=bool */;
  if (%319) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %320 = take(%t49, %i22) /* ty=uint16 */;
    %321 = tensor0_uint16(%320) /* ty=tensor_uint16_t[] */;
    %322 = add(%i22, 1 /* ty=int32 */) /* ty=int32 */;
    %323 = @tensor_array_unstack_tensor1_helper_uint16(%322, %up22, %t49) /* ty=List[tensor_uint16_t[]] */;
    Cons(%321, %323) /* ty=List[tensor_uint16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_float64(%i23: int32, %up23: int32, %t50: Tensor[(?), float64]) -> List[tensor_float64_t[]] {
  %324 = equal(%i23, %up23) /* ty=bool */;
  if (%324) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %325 = take(%t50, %i23) /* ty=float64 */;
    %326 = tensor0_float64(%325) /* ty=tensor_float64_t[] */;
    %327 = add(%i23, 1 /* ty=int32 */) /* ty=int32 */;
    %328 = @tensor_array_unstack_tensor1_helper_float64(%327, %up23, %t50) /* ty=List[tensor_float64_t[]] */;
    Cons(%326, %328) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_unstack_tensor6_float32(%tensor19: Tensor[(?, ?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %329 = shape_of(%tensor19, dtype="int32") /* ty=Tensor[(6), int32] */;
  %330 = take(%329, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float32(0 /* ty=int32 */, %330, %tensor19) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_read_uint16(%tensor_array24: List[tensor_uint16_t[]], %x13: int32) -> tensor_uint16_t[] {
  @nth(%tensor_array24, %x13) /* ty=tensor_uint16_t[] */
}

def @tensor_array_split_float64(%tensor_array25: List[tensor_float64_t[]], %value3: tensor_float64_t[], %lengths6: Tensor[(?), int32]) -> List[tensor_float64_t[]] {
  %331 = shape_of(%lengths6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %332 = take(%331, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float64(%tensor_array25, %value3, 0 /* ty=int32 */, 0 /* ty=int32 */, %332, %lengths6) /* ty=List[tensor_float64_t[]] */
}

def @foldl[A, B](%f6: fn (A, B) -> A, %acc2: A, %xs6: List[B]) -> A {
  match (%xs6) {
    Cons(%x14: B, %rest3: List[B]) => %333 = %f6(%acc2, %x14) /* ty=A */;
    @foldl(%f6, %333, %rest3) /* ty=A */,
    Nil => %acc2,
  }
}

def @tensor_array_float32(%x15: int32) -> List[tensor_float32_t[]] {
  %334 = equal(%x15, 0 /* ty=int32 */) /* ty=bool */;
  if (%334) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %335 = tensor_nil_float32 /* ty=tensor_float32_t[] */;
    %336 = subtract(%x15, 1 /* ty=int32 */) /* ty=int32 */;
    %337 = @tensor_array_float32(%336) /* ty=List[tensor_float32_t[]] */;
    Cons(%335, %337) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_read_uint8(%tensor_array26: List[tensor_uint8_t[]], %x16: int32) -> tensor_uint8_t[] {
  @nth(%tensor_array26, %x16) /* ty=tensor_uint8_t[] */
}

def @tensor_expand_dims_float64(%x17: tensor_float64_t[]) -> tensor_float64_t[] {
  match? (%x17) {
    tensor0_float64(%t02: float64) => %338 = expand_dims(%t02, axis=0) /* ty=Tensor[(?), float64] */;
    tensor1_float64(%338) /* ty=tensor_float64_t[] */,
    tensor1_float64(%t114: Tensor[(?), float64]) => %339 = expand_dims(%t114, axis=0) /* ty=Tensor[(?, ?), float64] */;
    tensor2_float64(%339) /* ty=tensor_float64_t[] */,
    tensor2_float64(%t214: Tensor[(?, ?), float64]) => %340 = expand_dims(%t214, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    tensor3_float64(%340) /* ty=tensor_float64_t[] */,
    tensor3_float64(%t312: Tensor[(?, ?, ?), float64]) => %341 = expand_dims(%t312, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    tensor4_float64(%341) /* ty=tensor_float64_t[] */,
    tensor4_float64(%t410: Tensor[(?, ?, ?, ?), float64]) => %342 = expand_dims(%t410, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    tensor5_float64(%342) /* ty=tensor_float64_t[] */,
    tensor5_float64(%t56: Tensor[(?, ?, ?, ?, ?), float64]) => %343 = expand_dims(%t56, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float64] */;
    tensor6_float64(%343) /* ty=tensor_float64_t[] */,
  }
}

def @sum(%xs7: List[int32]) -> int32 {
  let %add_f: fn (int32, int32) -> int32 = fn (%x18: int32, %y2: int32) -> int32 {
    add(%x18, %y2) /* ty=int32 */
  };
  @foldl(%add_f, 0 /* ty=int32 */, %xs7) /* ty=int32 */
}

def @tl[A](%xs8: List[A]) -> List[A] {
  match? (%xs8) {
    Cons(_, %rest4: List[A]) => %rest4,
  }
}

def @zip[A, B](%xs9: List[A], %ys: List[B]) -> List[(A, B)] {
  %344 = (%xs9, %ys);
  match (%344) {
    (Cons(%x19: A, %x_rest: List[A]), Cons(%y3: B, %y_rest: List[B])) => %345 = (%x19, %y3);
    %346 = @zip(%x_rest, %y_rest) /* ty=List[(A, B)] */;
    Cons(%345, %346) /* ty=List[(A, B)] */,
    _ => Nil /* ty=List[(A, B)] */,
  }
}

def @tensor_concatenate_int32(%x20: tensor_int32_t[], %y4: tensor_int32_t[]) -> tensor_int32_t[] {
  match? (%x20) {
    tensor1_int32(%t115: Tensor[(?), int32]) => match? (%y4) {
      tensor1_int32(%t122: Tensor[(?), int32]) => %347 = (%t115, %t122);
      %348 = concatenate(%347) /* ty=Tensor[(?), int32] */;
      tensor1_int32(%348) /* ty=tensor_int32_t[] */,
    },
    tensor2_int32(%t215: Tensor[(?, ?), int32]) => match? (%y4) {
      tensor2_int32(%t222: Tensor[(?, ?), int32]) => %349 = (%t215, %t222);
      %350 = concatenate(%349) /* ty=Tensor[(?, ?), int32] */;
      tensor2_int32(%350) /* ty=tensor_int32_t[] */,
    },
    tensor3_int32(%t313: Tensor[(?, ?, ?), int32]) => match? (%y4) {
      tensor3_int32(%t322: Tensor[(?, ?, ?), int32]) => %351 = (%t313, %t322);
      %352 = concatenate(%351) /* ty=Tensor[(?, ?, ?), int32] */;
      tensor3_int32(%352) /* ty=tensor_int32_t[] */,
    },
    tensor4_int32(%t412: Tensor[(?, ?, ?, ?), int32]) => match? (%y4) {
      tensor4_int32(%t422: Tensor[(?, ?, ?, ?), int32]) => %353 = (%t412, %t422);
      %354 = concatenate(%353) /* ty=Tensor[(?, ?, ?, ?), int32] */;
      tensor4_int32(%354) /* ty=tensor_int32_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor5_helper_float32(%i24: int32, %up24: int32, %t57: Tensor[(?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %355 = equal(%i24, %up24) /* ty=bool */;
  if (%355) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %356 = take(%t57, %i24, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    %357 = tensor4_float32(%356) /* ty=tensor_float32_t[] */;
    %358 = add(%i24, 1 /* ty=int32 */) /* ty=int32 */;
    %359 = @tensor_array_unstack_tensor5_helper_float32(%358, %up24, %t57) /* ty=List[tensor_float32_t[]] */;
    Cons(%357, %359) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor1_float64(%tensor20: Tensor[(?), float64]) -> List[tensor_float64_t[]] {
  %360 = shape_of(%tensor20, dtype="int32") /* ty=Tensor[(1), int32] */;
  %361 = take(%360, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float64(0 /* ty=int32 */, %361, %tensor20) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_concat_int32(%tensor_array27: List[tensor_int32_t[]]) -> tensor_int32_t[] {
  match? (%tensor_array27) {
    Nil => tensor_nil_int32 /* ty=tensor_int32_t[] */,
    Cons(%hd6: tensor_int32_t[], %tl6: List[tensor_int32_t[]]) => match? (%tl6) {
      Nil => %hd6,
      _ => %362 = @tensor_array_concat_int32(%tl6) /* ty=tensor_int32_t[] */;
      @tensor_concatenate_int32(%hd6, %362) /* ty=tensor_int32_t[] */,
    },
  }
}

def @size[A](%t58: Tree[A]) -> int32 {
  match (%t58) {
    Rose(_, %sub_trees1: List[Tree[A]]) => %363 = @map(@size, %sub_trees1) /* ty=List[int32] */;
    %364 = @sum(%363) /* ty=int32 */;
    add(1 /* ty=int32 */, %364) /* ty=int32 */,
  }
}

def @tensor_take_float64(%tensor21: tensor_float64_t[], %lower4: int32, %upper4: int32) -> tensor_float64_t[] {
  match? (%tensor21) {
    tensor1_float64(%t116: Tensor[(?), float64]) => %365 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][25], dtype="int32") /* ty=Tensor[(?), int32] */;
    %366 = take(%t116, %365) /* ty=Tensor[(?), float64] */;
    tensor1_float64(%366) /* ty=tensor_float64_t[] */,
    tensor2_float64(%t216: Tensor[(?, ?), float64]) => %367 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][26], dtype="int32") /* ty=Tensor[(?), int32] */;
    %368 = take(%t216, %367, axis=0) /* ty=Tensor[(?, ?), float64] */;
    tensor2_float64(%368) /* ty=tensor_float64_t[] */,
    tensor3_float64(%t314: Tensor[(?, ?, ?), float64]) => %369 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][27], dtype="int32") /* ty=Tensor[(?), int32] */;
    %370 = take(%t314, %369, axis=0) /* ty=Tensor[(?, ?, ?), float64] */;
    tensor3_float64(%370) /* ty=tensor_float64_t[] */,
    tensor4_float64(%t413: Tensor[(?, ?, ?, ?), float64]) => %371 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][28], dtype="int32") /* ty=Tensor[(?), int32] */;
    %372 = take(%t413, %371, axis=0) /* ty=Tensor[(?, ?, ?, ?), float64] */;
    tensor4_float64(%372) /* ty=tensor_float64_t[] */,
    tensor5_float64(%t59: Tensor[(?, ?, ?, ?, ?), float64]) => %373 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][29], dtype="int32") /* ty=Tensor[(?), int32] */;
    %374 = take(%t59, %373, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float64] */;
    tensor5_float64(%374) /* ty=tensor_float64_t[] */,
    tensor6_float64(%t65: Tensor[(?, ?, ?, ?, ?, ?), float64]) => %375 = arange(%lower4, %upper4, 1 /* ty=int32 */, start=meta[relay.Var][8], stop=meta[relay.Var][9], step=meta[relay.Constant][30], dtype="int32") /* ty=Tensor[(?), int32] */;
    %376 = take(%t65, %375, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float64] */;
    tensor6_float64(%376) /* ty=tensor_float64_t[] */,
  }
}

def @tensor_array_unstack_tensor3_float32(%tensor22: Tensor[(?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %377 = shape_of(%tensor22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = take(%377, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float32(0 /* ty=int32 */, %378, %tensor22) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor1_float16(%tensor23: Tensor[(?), float16]) -> List[tensor_float16_t[]] {
  %379 = shape_of(%tensor23, dtype="int32") /* ty=Tensor[(1), int32] */;
  %380 = take(%379, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float16(0 /* ty=int32 */, %380, %tensor23) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor4_helper_float32(%i25: int32, %up25: int32, %t60: Tensor[(?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %381 = equal(%i25, %up25) /* ty=bool */;
  if (%381) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %382 = take(%t60, %i25, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    %383 = tensor3_float32(%382) /* ty=tensor_float32_t[] */;
    %384 = add(%i25, 1 /* ty=int32 */) /* ty=int32 */;
    %385 = @tensor_array_unstack_tensor4_helper_float32(%384, %up25, %t60) /* ty=List[tensor_float32_t[]] */;
    Cons(%383, %385) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_uint8(%x21: int32) -> List[tensor_uint8_t[]] {
  %386 = equal(%x21, 0 /* ty=int32 */) /* ty=bool */;
  if (%386) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %387 = tensor_nil_uint8 /* ty=tensor_uint8_t[] */;
    %388 = subtract(%x21, 1 /* ty=int32 */) /* ty=int32 */;
    %389 = @tensor_array_uint8(%388) /* ty=List[tensor_uint8_t[]] */;
    Cons(%387, %389) /* ty=List[tensor_uint8_t[]] */
  }
}

def @compose[A, B, C](%f7: fn (B) -> C, %g: fn (A) -> B) -> fn (A) -> C {
  fn (%x22: A) -> C {
    %390 = %g(%x22) /* ty=B */;
    %f7(%390) /* ty=C */
  }
}

def @tensor_array_unstack_tensor5_int32(%tensor24: Tensor[(?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %391 = shape_of(%tensor24, dtype="int32") /* ty=Tensor[(5), int32] */;
  %392 = take(%391, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int32(0 /* ty=int32 */, %392, %tensor24) /* ty=List[tensor_int32_t[]] */
}

def @ta_split_helper_float32(%tensor_array28: List[tensor_float32_t[]], %value14: tensor_float32_t[], %offset14: int32, %current14: int32, %limit14: int32, %lengths7: Tensor[(?), int32]) -> List[tensor_float32_t[]] {
  %393 = equal(%current14, %limit14) /* ty=bool */;
  if (%393) {
    %tensor_array28
  } else {
    %394 = take(%lengths7, %current14) /* ty=int32 */;
    %395 = add(%offset14, %394) /* ty=int32 */;
    %396 = add(%current14, 1 /* ty=int32 */) /* ty=int32 */;
    %397 = @ta_split_helper_float32(%tensor_array28, %value14, %395, %396, %limit14, %lengths7) /* ty=List[tensor_float32_t[]] */;
    %398 = take(%lengths7, %current14) /* ty=int32 */;
    %399 = add(%398, %offset14) /* ty=int32 */;
    %400 = @tensor_take_float32(%value14, %offset14, %399) /* ty=tensor_float32_t[] */;
    @tensor_array_write_float32(%397, %current14, %400) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor5_uint16(%tensor25: Tensor[(?, ?, ?, ?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %401 = shape_of(%tensor25, dtype="int32") /* ty=Tensor[(5), int32] */;
  %402 = take(%401, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_uint16(0 /* ty=int32 */, %402, %tensor25) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_scatter_helper_float16(%ta3: List[tensor_float16_t[]], %current4: int32, %limit4: int32, %indices_3: Tensor[(?), int32], %values_3: List[tensor_float16_t[]]) -> List[tensor_float16_t[]] {
  %403 = equal(%current4, %limit4) /* ty=bool */;
  if (%403) {
    %ta3
  } else {
    %404 = take(%indices_3, %current4) /* ty=int32 */;
    %405 = @tensor_array_read_float16(%values_3, %current4) /* ty=tensor_float16_t[] */;
    %406 = @tensor_array_write_float16(%ta3, %404, %405) /* ty=List[tensor_float16_t[]] */;
    %407 = add(%current4, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float16(%406, %407, %limit4, %indices_3, %values_3) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_int8(%tensor26: Tensor[(?, ?, ?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %408 = shape_of(%tensor26, dtype="int32") /* ty=Tensor[(6), int32] */;
  %409 = take(%408, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int8(0 /* ty=int32 */, %409, %tensor26) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor3_helper_uint8(%i26: int32, %up26: int32, %t66: Tensor[(?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %410 = equal(%i26, %up26) /* ty=bool */;
  if (%410) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %411 = take(%t66, %i26, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    %412 = tensor2_uint8(%411) /* ty=tensor_uint8_t[] */;
    %413 = add(%i26, 1 /* ty=int32 */) /* ty=int32 */;
    %414 = @tensor_array_unstack_tensor3_helper_uint8(%413, %up26, %t66) /* ty=List[tensor_uint8_t[]] */;
    Cons(%412, %414) /* ty=List[tensor_uint8_t[]] */
  }
}

def @map[A, B](%f8: fn (A) -> B, %xs10: List[A]) -> List[B] {
  match (%xs10) {
    Cons(%x23: A, %rest5: List[A]) => %415 = %f8(%x23) /* ty=B */;
    %416 = @map(%f8, %rest5) /* ty=List[B] */;
    Cons(%415, %416) /* ty=List[B] */,
    Nil => Nil /* ty=List[B] */,
  }
}

def @tensor_array_split_float32(%tensor_array29: List[tensor_float32_t[]], %value4: tensor_float32_t[], %lengths8: Tensor[(?), int32]) -> List[tensor_float32_t[]] {
  %417 = shape_of(%lengths8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %418 = take(%417, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_float32(%tensor_array29, %value4, 0 /* ty=int32 */, 0 /* ty=int32 */, %418, %lengths8) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor4_float32(%tensor27: Tensor[(?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %419 = shape_of(%tensor27, dtype="int32") /* ty=Tensor[(4), int32] */;
  %420 = take(%419, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float32(0 /* ty=int32 */, %420, %tensor27) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_float64(%x24: int32) -> List[tensor_float64_t[]] {
  %421 = equal(%x24, 0 /* ty=int32 */) /* ty=bool */;
  if (%421) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %422 = tensor_nil_float64 /* ty=tensor_float64_t[] */;
    %423 = subtract(%x24, 1 /* ty=int32 */) /* ty=int32 */;
    %424 = @tensor_array_float64(%423) /* ty=List[tensor_float64_t[]] */;
    Cons(%422, %424) /* ty=List[tensor_float64_t[]] */
  }
}

def @nth[A](%xs11: List[A], %n1: int32) -> A {
  %425 = equal(%n1, 0 /* ty=int32 */) /* ty=bool */;
  if (%425) {
    @hd(%xs11) /* ty=A */
  } else {
    %426 = @tl(%xs11) /* ty=List[A] */;
    %427 = subtract(%n1, 1 /* ty=int32 */) /* ty=int32 */;
    @nth(%426, %427) /* ty=A */
  }
}

def @tensor_array_unstack_tensor2_helper_uint8(%i27: int32, %up27: int32, %t67: Tensor[(?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %428 = equal(%i27, %up27) /* ty=bool */;
  if (%428) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %429 = take(%t67, %i27, axis=0) /* ty=Tensor[(?), uint8] */;
    %430 = tensor1_uint8(%429) /* ty=tensor_uint8_t[] */;
    %431 = add(%i27, 1 /* ty=int32 */) /* ty=int32 */;
    %432 = @tensor_array_unstack_tensor2_helper_uint8(%431, %up27, %t67) /* ty=List[tensor_uint8_t[]] */;
    Cons(%430, %432) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_float32(%i28: int32, %up28: int32, %t68: Tensor[(?, ?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %433 = equal(%i28, %up28) /* ty=bool */;
  if (%433) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %434 = take(%t68, %i28, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    %435 = tensor5_float32(%434) /* ty=tensor_float32_t[] */;
    %436 = add(%i28, 1 /* ty=int32 */) /* ty=int32 */;
    %437 = @tensor_array_unstack_tensor6_helper_float32(%436, %up28, %t68) /* ty=List[tensor_float32_t[]] */;
    Cons(%435, %437) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_float16(%i29: int32, %up29: int32, %t69: Tensor[(?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %438 = equal(%i29, %up29) /* ty=bool */;
  if (%438) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %439 = take(%t69, %i29, axis=0) /* ty=Tensor[(?, ?), float16] */;
    %440 = tensor2_float16(%439) /* ty=tensor_float16_t[] */;
    %441 = add(%i29, 1 /* ty=int32 */) /* ty=int32 */;
    %442 = @tensor_array_unstack_tensor3_helper_float16(%441, %up29, %t69) /* ty=List[tensor_float16_t[]] */;
    Cons(%440, %442) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_uint16(%tensor28: Tensor[(?, ?), uint16]) -> List[tensor_uint16_t[]] {
  %443 = shape_of(%tensor28, dtype="int32") /* ty=Tensor[(2), int32] */;
  %444 = take(%443, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_uint16(0 /* ty=int32 */, %444, %tensor28) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_scatter_helper_int32(%ta4: List[tensor_int32_t[]], %current5: int32, %limit5: int32, %indices_4: Tensor[(?), int32], %values_4: List[tensor_int32_t[]]) -> List[tensor_int32_t[]] {
  %445 = equal(%current5, %limit5) /* ty=bool */;
  if (%445) {
    %ta4
  } else {
    %446 = take(%indices_4, %current5) /* ty=int32 */;
    %447 = @tensor_array_read_int32(%values_4, %current5) /* ty=tensor_int32_t[] */;
    %448 = @tensor_array_write_int32(%ta4, %446, %447) /* ty=List[tensor_int32_t[]] */;
    %449 = add(%current5, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int32(%448, %449, %limit5, %indices_4, %values_4) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_write_int32(%tensor_array30: List[tensor_int32_t[]], %x25: int32, %v4: tensor_int32_t[]) -> List[tensor_int32_t[]] {
  @update(%tensor_array30, %x25, %v4) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor2_float16(%tensor29: Tensor[(?, ?), float16]) -> List[tensor_float16_t[]] {
  %450 = shape_of(%tensor29, dtype="int32") /* ty=Tensor[(2), int32] */;
  %451 = take(%450, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float16(0 /* ty=int32 */, %451, %tensor29) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_read_float32(%tensor_array31: List[tensor_float32_t[]], %x26: int32) -> tensor_float32_t[] {
  @nth(%tensor_array31, %x26) /* ty=tensor_float32_t[] */
}

def @tensor_concatenate_int16(%x27: tensor_int16_t[], %y5: tensor_int16_t[]) -> tensor_int16_t[] {
  match? (%x27) {
    tensor1_int16(%t117: Tensor[(?), int16]) => match? (%y5) {
      tensor1_int16(%t123: Tensor[(?), int16]) => %452 = (%t117, %t123);
      %453 = concatenate(%452) /* ty=Tensor[(?), int16] */;
      tensor1_int16(%453) /* ty=tensor_int16_t[] */,
    },
    tensor2_int16(%t217: Tensor[(?, ?), int16]) => match? (%y5) {
      tensor2_int16(%t223: Tensor[(?, ?), int16]) => %454 = (%t217, %t223);
      %455 = concatenate(%454) /* ty=Tensor[(?, ?), int16] */;
      tensor2_int16(%455) /* ty=tensor_int16_t[] */,
    },
    tensor3_int16(%t315: Tensor[(?, ?, ?), int16]) => match? (%y5) {
      tensor3_int16(%t323: Tensor[(?, ?, ?), int16]) => %456 = (%t315, %t323);
      %457 = concatenate(%456) /* ty=Tensor[(?, ?, ?), int16] */;
      tensor3_int16(%457) /* ty=tensor_int16_t[] */,
    },
    tensor4_int16(%t414: Tensor[(?, ?, ?, ?), int16]) => match? (%y5) {
      tensor4_int16(%t423: Tensor[(?, ?, ?, ?), int16]) => %458 = (%t414, %t423);
      %459 = concatenate(%458) /* ty=Tensor[(?, ?, ?, ?), int16] */;
      tensor4_int16(%459) /* ty=tensor_int16_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor1_helper_int32(%i30: int32, %up30: int32, %t70: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %460 = equal(%i30, %up30) /* ty=bool */;
  if (%460) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %461 = take(%t70, %i30) /* ty=int32 */;
    %462 = tensor0_int32(%461) /* ty=tensor_int32_t[] */;
    %463 = add(%i30, 1 /* ty=int32 */) /* ty=int32 */;
    %464 = @tensor_array_unstack_tensor1_helper_int32(%463, %up30, %t70) /* ty=List[tensor_int32_t[]] */;
    Cons(%462, %464) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_float32(%i31: int32, %up31: int32, %t71: Tensor[(?, ?), float32]) -> List[tensor_float32_t[]] {
  %465 = equal(%i31, %up31) /* ty=bool */;
  if (%465) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %466 = take(%t71, %i31, axis=0) /* ty=Tensor[(?), float32] */;
    %467 = tensor1_float32(%466) /* ty=tensor_float32_t[] */;
    %468 = add(%i31, 1 /* ty=int32 */) /* ty=int32 */;
    %469 = @tensor_array_unstack_tensor2_helper_float32(%468, %up31, %t71) /* ty=List[tensor_float32_t[]] */;
    Cons(%467, %469) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_helper_int8(%i32: int32, %up32: int32, %t72: Tensor[(?, ?), int8]) -> List[tensor_int8_t[]] {
  %470 = equal(%i32, %up32) /* ty=bool */;
  if (%470) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %471 = take(%t72, %i32, axis=0) /* ty=Tensor[(?), int8] */;
    %472 = tensor1_int8(%471) /* ty=tensor_int8_t[] */;
    %473 = add(%i32, 1 /* ty=int32 */) /* ty=int32 */;
    %474 = @tensor_array_unstack_tensor2_helper_int8(%473, %up32, %t72) /* ty=List[tensor_int8_t[]] */;
    Cons(%472, %474) /* ty=List[tensor_int8_t[]] */
  }
}

def @flip[A, B, C](%f9: fn (A, B) -> C) -> fn (B, A) -> C {
  fn (%b: B, %a: A) -> C {
    %f9(%a, %b) /* ty=C */
  }
}

def @concat[A](%xs12: List[A], %ys1: List[A]) -> List[A] {
  @foldr(Cons, %ys1, %xs12) /* ty=List[A] */
}

def @tensor_array_write_float32(%tensor_array32: List[tensor_float32_t[]], %x28: int32, %v5: tensor_float32_t[]) -> List[tensor_float32_t[]] {
  @update(%tensor_array32, %x28, %v5) /* ty=List[tensor_float32_t[]] */
}

def @foldr1[A](%f10: fn (A, A) -> A, %xs13: List[A]) -> A {
  match? (%xs13) {
    Cons(%x29: A, Nil) => %x29,
    Cons(%x30: A, %rest6: List[A]) => %475 = @foldr1(%f10, %rest6) /* ty=A */;
    %f10(%x30, %475) /* ty=A */,
  }
}

def @update[A](%xs14: List[A], %n2: int32, %v6: A) -> List[A] {
  %476 = equal(%n2, 0 /* ty=int32 */) /* ty=bool */;
  if (%476) {
    %477 = @tl(%xs14) /* ty=List[A] */;
    Cons(%v6, %477) /* ty=List[A] */
  } else {
    %478 = @hd(%xs14) /* ty=A */;
    %479 = @tl(%xs14) /* ty=List[A] */;
    %480 = subtract(%n2, 1 /* ty=int32 */) /* ty=int32 */;
    %481 = @update(%479, %480, %v6) /* ty=List[A] */;
    Cons(%478, %481) /* ty=List[A] */
  }
}

def @map_accumr[A, B, C](%f11: fn (A, B) -> (A, C), %init1: A, %xs15: List[B]) -> (A, List[C]) {
  let %updater1: fn (B, (A, List[C])) -> (A, List[C]) = fn (%x31: B, %acc3: (A, List[C])) -> (A, List[C]) {
    %482 = %acc3.0;
    let %f_out1: (A, C) = %f11(%482, %x31) /* ty=(A, C) */;
    %483 = %f_out1.0;
    %484 = %f_out1.1;
    %485 = %acc3.1;
    %486 = Cons(%484, %485) /* ty=List[C] */;
    (%483, %486)
  };
  %487 = Nil /* ty=List[C] */;
  %488 = (%init1, %487);
  @foldr(%updater1, %488, %xs15) /* ty=(A, List[C]) */
}

def @tensor_array_scatter_helper_int8(%ta5: List[tensor_int8_t[]], %current6: int32, %limit6: int32, %indices_5: Tensor[(?), int32], %values_5: List[tensor_int8_t[]]) -> List[tensor_int8_t[]] {
  %489 = equal(%current6, %limit6) /* ty=bool */;
  if (%489) {
    %ta5
  } else {
    %490 = take(%indices_5, %current6) /* ty=int32 */;
    %491 = @tensor_array_read_int8(%values_5, %current6) /* ty=tensor_int8_t[] */;
    %492 = @tensor_array_write_int8(%ta5, %490, %491) /* ty=List[tensor_int8_t[]] */;
    %493 = add(%current6, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int8(%492, %493, %limit6, %indices_5, %values_5) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_take_int64(%tensor30: tensor_int64_t[], %lower5: int32, %upper5: int32) -> tensor_int64_t[] {
  match? (%tensor30) {
    tensor1_int64(%t118: Tensor[(?), int64]) => %494 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][31], dtype="int32") /* ty=Tensor[(?), int32] */;
    %495 = take(%t118, %494) /* ty=Tensor[(?), int64] */;
    tensor1_int64(%495) /* ty=tensor_int64_t[] */,
    tensor2_int64(%t218: Tensor[(?, ?), int64]) => %496 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][32], dtype="int32") /* ty=Tensor[(?), int32] */;
    %497 = take(%t218, %496, axis=0) /* ty=Tensor[(?, ?), int64] */;
    tensor2_int64(%497) /* ty=tensor_int64_t[] */,
    tensor3_int64(%t316: Tensor[(?, ?, ?), int64]) => %498 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][33], dtype="int32") /* ty=Tensor[(?), int32] */;
    %499 = take(%t316, %498, axis=0) /* ty=Tensor[(?, ?, ?), int64] */;
    tensor3_int64(%499) /* ty=tensor_int64_t[] */,
    tensor4_int64(%t415: Tensor[(?, ?, ?, ?), int64]) => %500 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][34], dtype="int32") /* ty=Tensor[(?), int32] */;
    %501 = take(%t415, %500, axis=0) /* ty=Tensor[(?, ?, ?, ?), int64] */;
    tensor4_int64(%501) /* ty=tensor_int64_t[] */,
    tensor5_int64(%t510: Tensor[(?, ?, ?, ?, ?), int64]) => %502 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][35], dtype="int32") /* ty=Tensor[(?), int32] */;
    %503 = take(%t510, %502, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int64] */;
    tensor5_int64(%503) /* ty=tensor_int64_t[] */,
    tensor6_int64(%t610: Tensor[(?, ?, ?, ?, ?, ?), int64]) => %504 = arange(%lower5, %upper5, 1 /* ty=int32 */, start=meta[relay.Var][10], stop=meta[relay.Var][11], step=meta[relay.Constant][36], dtype="int32") /* ty=Tensor[(?), int32] */;
    %505 = take(%t610, %504, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int64] */;
    tensor6_int64(%505) /* ty=tensor_int64_t[] */,
  }
}

def @tensor_array_unstack_tensor2_float64(%tensor31: Tensor[(?, ?), float64]) -> List[tensor_float64_t[]] {
  %506 = shape_of(%tensor31, dtype="int32") /* ty=Tensor[(2), int32] */;
  %507 = take(%506, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float64(0 /* ty=int32 */, %507, %tensor31) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_stack_float16(%tensor_array33: List[tensor_float16_t[]]) -> tensor_float16_t[] {
  %508 = @map(@tensor_expand_dims_float16, %tensor_array33) /* ty=List[tensor_float16_t[]] */;
  %509 = @hd(%508) /* ty=tensor_float16_t[] */;
  %510 = @tl(%508) /* ty=List[tensor_float16_t[]] */;
  @foldl(@tensor_concatenate_float16, %509, %510) /* ty=tensor_float16_t[] */
}

def @tensor_array_int16(%x32: int32) -> List[tensor_int16_t[]] {
  %511 = equal(%x32, 0 /* ty=int32 */) /* ty=bool */;
  if (%511) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %512 = tensor_nil_int16 /* ty=tensor_int16_t[] */;
    %513 = subtract(%x32, 1 /* ty=int32 */) /* ty=int32 */;
    %514 = @tensor_array_int16(%513) /* ty=List[tensor_int16_t[]] */;
    Cons(%512, %514) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor2_int64(%tensor32: Tensor[(?, ?), int64]) -> List[tensor_int64_t[]] {
  %515 = shape_of(%tensor32, dtype="int32") /* ty=Tensor[(2), int32] */;
  %516 = take(%515, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int64(0 /* ty=int32 */, %516, %tensor32) /* ty=List[tensor_int64_t[]] */
}

def @tensor_take_float32(%tensor33: tensor_float32_t[], %lower6: int32, %upper6: int32) -> tensor_float32_t[] {
  match? (%tensor33) {
    tensor1_float32(%t119: Tensor[(?), float32]) => %517 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][37], dtype="int32") /* ty=Tensor[(?), int32] */;
    %518 = take(%t119, %517) /* ty=Tensor[(?), float32] */;
    tensor1_float32(%518) /* ty=tensor_float32_t[] */,
    tensor2_float32(%t219: Tensor[(?, ?), float32]) => %519 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][38], dtype="int32") /* ty=Tensor[(?), int32] */;
    %520 = take(%t219, %519, axis=0) /* ty=Tensor[(?, ?), float32] */;
    tensor2_float32(%520) /* ty=tensor_float32_t[] */,
    tensor3_float32(%t317: Tensor[(?, ?, ?), float32]) => %521 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][39], dtype="int32") /* ty=Tensor[(?), int32] */;
    %522 = take(%t317, %521, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    tensor3_float32(%522) /* ty=tensor_float32_t[] */,
    tensor4_float32(%t416: Tensor[(?, ?, ?, ?), float32]) => %523 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][40], dtype="int32") /* ty=Tensor[(?), int32] */;
    %524 = take(%t416, %523, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    tensor4_float32(%524) /* ty=tensor_float32_t[] */,
    tensor5_float32(%t511: Tensor[(?, ?, ?, ?, ?), float32]) => %525 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][41], dtype="int32") /* ty=Tensor[(?), int32] */;
    %526 = take(%t511, %525, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    tensor5_float32(%526) /* ty=tensor_float32_t[] */,
    tensor6_float32(%t611: Tensor[(?, ?, ?, ?, ?, ?), float32]) => %527 = arange(%lower6, %upper6, 1 /* ty=int32 */, start=meta[relay.Var][12], stop=meta[relay.Var][13], step=meta[relay.Constant][42], dtype="int32") /* ty=Tensor[(?), int32] */;
    %528 = take(%t611, %527, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float32] */;
    tensor6_float32(%528) /* ty=tensor_float32_t[] */,
  }
}

def @tensor_array_unstack_tensor5_float16(%tensor34: Tensor[(?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %529 = shape_of(%tensor34, dtype="int32") /* ty=Tensor[(5), int32] */;
  %530 = take(%529, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float16(0 /* ty=int32 */, %530, %tensor34) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor3_helper_float32(%i33: int32, %up33: int32, %t73: Tensor[(?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %531 = equal(%i33, %up33) /* ty=bool */;
  if (%531) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %532 = take(%t73, %i33, axis=0) /* ty=Tensor[(?, ?), float32] */;
    %533 = tensor2_float32(%532) /* ty=tensor_float32_t[] */;
    %534 = add(%i33, 1 /* ty=int32 */) /* ty=int32 */;
    %535 = @tensor_array_unstack_tensor3_helper_float32(%534, %up33, %t73) /* ty=List[tensor_float32_t[]] */;
    Cons(%533, %535) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_unstack_tensor4_float64(%tensor35: Tensor[(?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %536 = shape_of(%tensor35, dtype="int32") /* ty=Tensor[(4), int32] */;
  %537 = take(%536, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_float64(0 /* ty=int32 */, %537, %tensor35) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int32(%i34: int32, %up34: int32, %t74: Tensor[(?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %538 = equal(%i34, %up34) /* ty=bool */;
  if (%538) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %539 = take(%t74, %i34, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    %540 = tensor3_int32(%539) /* ty=tensor_int32_t[] */;
    %541 = add(%i34, 1 /* ty=int32 */) /* ty=int32 */;
    %542 = @tensor_array_unstack_tensor4_helper_int32(%541, %up34, %t74) /* ty=List[tensor_int32_t[]] */;
    Cons(%540, %542) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor5_float32(%tensor36: Tensor[(?, ?, ?, ?, ?), float32]) -> List[tensor_float32_t[]] {
  %543 = shape_of(%tensor36, dtype="int32") /* ty=Tensor[(5), int32] */;
  %544 = take(%543, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_float32(0 /* ty=int32 */, %544, %tensor36) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_unstack_tensor1_helper_float32(%i35: int32, %up35: int32, %t75: Tensor[(?), float32]) -> List[tensor_float32_t[]] {
  %545 = equal(%i35, %up35) /* ty=bool */;
  if (%545) {
    Nil /* ty=List[tensor_float32_t[]] */
  } else {
    %546 = take(%t75, %i35) /* ty=float32 */;
    %547 = tensor0_float32(%546) /* ty=tensor_float32_t[] */;
    %548 = add(%i35, 1 /* ty=int32 */) /* ty=int32 */;
    %549 = @tensor_array_unstack_tensor1_helper_float32(%548, %up35, %t75) /* ty=List[tensor_float32_t[]] */;
    Cons(%547, %549) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_array_read_float64(%tensor_array34: List[tensor_float64_t[]], %x33: int32) -> tensor_float64_t[] {
  @nth(%tensor_array34, %x33) /* ty=tensor_float64_t[] */
}

def @tensor_array_scatter_helper_int16(%ta6: List[tensor_int16_t[]], %current7: int32, %limit7: int32, %indices_6: Tensor[(?), int32], %values_6: List[tensor_int16_t[]]) -> List[tensor_int16_t[]] {
  %550 = equal(%current7, %limit7) /* ty=bool */;
  if (%550) {
    %ta6
  } else {
    %551 = take(%indices_6, %current7) /* ty=int32 */;
    %552 = @tensor_array_read_int16(%values_6, %current7) /* ty=tensor_int16_t[] */;
    %553 = @tensor_array_write_int16(%ta6, %551, %552) /* ty=List[tensor_int16_t[]] */;
    %554 = add(%current7, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_int16(%553, %554, %limit7, %indices_6, %values_6) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor4_int64(%tensor37: Tensor[(?, ?, ?, ?), int64]) -> List[tensor_int64_t[]] {
  %555 = shape_of(%tensor37, dtype="int32") /* ty=Tensor[(4), int32] */;
  %556 = take(%555, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int64(0 /* ty=int32 */, %556, %tensor37) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_unstack_tensor6_float16(%tensor38: Tensor[(?, ?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %557 = shape_of(%tensor38, dtype="int32") /* ty=Tensor[(6), int32] */;
  %558 = take(%557, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float16(0 /* ty=int32 */, %558, %tensor38) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor1_int8(%tensor39: Tensor[(?), int8]) -> List[tensor_int8_t[]] {
  %559 = shape_of(%tensor39, dtype="int32") /* ty=Tensor[(1), int32] */;
  %560 = take(%559, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int8(0 /* ty=int32 */, %560, %tensor39) /* ty=List[tensor_int8_t[]] */
}

def @unfoldl[A, B](%f12: fn (A) -> Option[(A, B)], %seed1: A) -> List[B] {
  %561 = @unfoldr(%f12, %seed1) /* ty=List[B] */;
  @rev(%561) /* ty=List[B] */
}

def @tensor_array_scatter_helper_float32(%ta7: List[tensor_float32_t[]], %current8: int32, %limit8: int32, %indices_7: Tensor[(?), int32], %values_7: List[tensor_float32_t[]]) -> List[tensor_float32_t[]] {
  %562 = equal(%current8, %limit8) /* ty=bool */;
  if (%562) {
    %ta7
  } else {
    %563 = take(%indices_7, %current8) /* ty=int32 */;
    %564 = @tensor_array_read_float32(%values_7, %current8) /* ty=tensor_float32_t[] */;
    %565 = @tensor_array_write_float32(%ta7, %563, %564) /* ty=List[tensor_float32_t[]] */;
    %566 = add(%current8, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_float32(%565, %566, %limit8, %indices_7, %values_7) /* ty=List[tensor_float32_t[]] */
  }
}

def @tensor_expand_dims_int16(%x34: tensor_int16_t[]) -> tensor_int16_t[] {
  match? (%x34) {
    tensor0_int16(%t03: int16) => %567 = expand_dims(%t03, axis=0) /* ty=Tensor[(?), int16] */;
    tensor1_int16(%567) /* ty=tensor_int16_t[] */,
    tensor1_int16(%t120: Tensor[(?), int16]) => %568 = expand_dims(%t120, axis=0) /* ty=Tensor[(?, ?), int16] */;
    tensor2_int16(%568) /* ty=tensor_int16_t[] */,
    tensor2_int16(%t220: Tensor[(?, ?), int16]) => %569 = expand_dims(%t220, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    tensor3_int16(%569) /* ty=tensor_int16_t[] */,
    tensor3_int16(%t318: Tensor[(?, ?, ?), int16]) => %570 = expand_dims(%t318, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    tensor4_int16(%570) /* ty=tensor_int16_t[] */,
    tensor4_int16(%t417: Tensor[(?, ?, ?, ?), int16]) => %571 = expand_dims(%t417, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    tensor5_int16(%571) /* ty=tensor_int16_t[] */,
    tensor5_int16(%t512: Tensor[(?, ?, ?, ?, ?), int16]) => %572 = expand_dims(%t512, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int16] */;
    tensor6_int16(%572) /* ty=tensor_int16_t[] */,
  }
}

def @tensor_array_unstack_tensor2_helper_int16(%i36: int32, %up36: int32, %t76: Tensor[(?, ?), int16]) -> List[tensor_int16_t[]] {
  %573 = equal(%i36, %up36) /* ty=bool */;
  if (%573) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %574 = take(%t76, %i36, axis=0) /* ty=Tensor[(?), int16] */;
    %575 = tensor1_int16(%574) /* ty=tensor_int16_t[] */;
    %576 = add(%i36, 1 /* ty=int32 */) /* ty=int32 */;
    %577 = @tensor_array_unstack_tensor2_helper_int16(%576, %up36, %t76) /* ty=List[tensor_int16_t[]] */;
    Cons(%575, %577) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_read_int16(%tensor_array35: List[tensor_int16_t[]], %x35: int32) -> tensor_int16_t[] {
  @nth(%tensor_array35, %x35) /* ty=tensor_int16_t[] */
}

def @tensor_concatenate_float32(%x36: tensor_float32_t[], %y6: tensor_float32_t[]) -> tensor_float32_t[] {
  match? (%x36) {
    tensor1_float32(%t1110: Tensor[(?), float32]) => match? (%y6) {
      tensor1_float32(%t124: Tensor[(?), float32]) => %578 = (%t1110, %t124);
      %579 = concatenate(%578) /* ty=Tensor[(?), float32] */;
      tensor1_float32(%579) /* ty=tensor_float32_t[] */,
    },
    tensor2_float32(%t2110: Tensor[(?, ?), float32]) => match? (%y6) {
      tensor2_float32(%t224: Tensor[(?, ?), float32]) => %580 = (%t2110, %t224);
      %581 = concatenate(%580) /* ty=Tensor[(?, ?), float32] */;
      tensor2_float32(%581) /* ty=tensor_float32_t[] */,
    },
    tensor3_float32(%t319: Tensor[(?, ?, ?), float32]) => match? (%y6) {
      tensor3_float32(%t324: Tensor[(?, ?, ?), float32]) => %582 = (%t319, %t324);
      %583 = concatenate(%582) /* ty=Tensor[(?, ?, ?), float32] */;
      tensor3_float32(%583) /* ty=tensor_float32_t[] */,
    },
    tensor4_float32(%t418: Tensor[(?, ?, ?, ?), float32]) => match? (%y6) {
      tensor4_float32(%t424: Tensor[(?, ?, ?, ?), float32]) => %584 = (%t418, %t424);
      %585 = concatenate(%584) /* ty=Tensor[(?, ?, ?, ?), float32] */;
      tensor4_float32(%585) /* ty=tensor_float32_t[] */,
    },
  }
}

def @tensor_array_int32(%x37: int32) -> List[tensor_int32_t[]] {
  %586 = equal(%x37, 0 /* ty=int32 */) /* ty=bool */;
  if (%586) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %587 = tensor_nil_int32 /* ty=tensor_int32_t[] */;
    %588 = subtract(%x37, 1 /* ty=int32 */) /* ty=int32 */;
    %589 = @tensor_array_int32(%588) /* ty=List[tensor_int32_t[]] */;
    Cons(%587, %589) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor5_uint8(%tensor40: Tensor[(?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %590 = shape_of(%tensor40, dtype="int32") /* ty=Tensor[(5), int32] */;
  %591 = take(%590, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_uint8(0 /* ty=int32 */, %591, %tensor40) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor1_int32(%tensor41: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %592 = shape_of(%tensor41, dtype="int32") /* ty=Tensor[(1), int32] */;
  %593 = take(%592, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int32(0 /* ty=int32 */, %593, %tensor41) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_read_int32(%tensor_array36: List[tensor_int32_t[]], %x38: int32) -> tensor_int32_t[] {
  @nth(%tensor_array36, %x38) /* ty=tensor_int32_t[] */
}

def @tensor_array_unstack_tensor1_int16(%tensor42: Tensor[(?), int16]) -> List[tensor_int16_t[]] {
  %594 = shape_of(%tensor42, dtype="int32") /* ty=Tensor[(1), int32] */;
  %595 = take(%594, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int16(0 /* ty=int32 */, %595, %tensor42) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor2_helper_int32(%i37: int32, %up37: int32, %t77: Tensor[(?, ?), int32]) -> List[tensor_int32_t[]] {
  %596 = equal(%i37, %up37) /* ty=bool */;
  if (%596) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %597 = take(%t77, %i37, axis=0) /* ty=Tensor[(?), int32] */;
    %598 = tensor1_int32(%597) /* ty=tensor_int32_t[] */;
    %599 = add(%i37, 1 /* ty=int32 */) /* ty=int32 */;
    %600 = @tensor_array_unstack_tensor2_helper_int32(%599, %up37, %t77) /* ty=List[tensor_int32_t[]] */;
    Cons(%598, %600) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor2_int32(%tensor43: Tensor[(?, ?), int32]) -> List[tensor_int32_t[]] {
  %601 = shape_of(%tensor43, dtype="int32") /* ty=Tensor[(2), int32] */;
  %602 = take(%601, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int32(0 /* ty=int32 */, %602, %tensor43) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor3_helper_int32(%i38: int32, %up38: int32, %t78: Tensor[(?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %603 = equal(%i38, %up38) /* ty=bool */;
  if (%603) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %604 = take(%t78, %i38, axis=0) /* ty=Tensor[(?, ?), int32] */;
    %605 = tensor2_int32(%604) /* ty=tensor_int32_t[] */;
    %606 = add(%i38, 1 /* ty=int32 */) /* ty=int32 */;
    %607 = @tensor_array_unstack_tensor3_helper_int32(%606, %up38, %t78) /* ty=List[tensor_int32_t[]] */;
    Cons(%605, %607) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_concatenate_float16(%x39: tensor_float16_t[], %y7: tensor_float16_t[]) -> tensor_float16_t[] {
  match? (%x39) {
    tensor1_float16(%t1111: Tensor[(?), float16]) => match? (%y7) {
      tensor1_float16(%t125: Tensor[(?), float16]) => %608 = (%t1111, %t125);
      %609 = concatenate(%608) /* ty=Tensor[(?), float16] */;
      tensor1_float16(%609) /* ty=tensor_float16_t[] */,
    },
    tensor2_float16(%t2111: Tensor[(?, ?), float16]) => match? (%y7) {
      tensor2_float16(%t225: Tensor[(?, ?), float16]) => %610 = (%t2111, %t225);
      %611 = concatenate(%610) /* ty=Tensor[(?, ?), float16] */;
      tensor2_float16(%611) /* ty=tensor_float16_t[] */,
    },
    tensor3_float16(%t3110: Tensor[(?, ?, ?), float16]) => match? (%y7) {
      tensor3_float16(%t325: Tensor[(?, ?, ?), float16]) => %612 = (%t3110, %t325);
      %613 = concatenate(%612) /* ty=Tensor[(?, ?, ?), float16] */;
      tensor3_float16(%613) /* ty=tensor_float16_t[] */,
    },
    tensor4_float16(%t419: Tensor[(?, ?, ?, ?), float16]) => match? (%y7) {
      tensor4_float16(%t425: Tensor[(?, ?, ?, ?), float16]) => %614 = (%t419, %t425);
      %615 = concatenate(%614) /* ty=Tensor[(?, ?, ?, ?), float16] */;
      tensor4_float16(%615) /* ty=tensor_float16_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor1_helper_float16(%i39: int32, %up39: int32, %t79: Tensor[(?), float16]) -> List[tensor_float16_t[]] {
  %616 = equal(%i39, %up39) /* ty=bool */;
  if (%616) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %617 = take(%t79, %i39) /* ty=float16 */;
    %618 = tensor0_float16(%617) /* ty=tensor_float16_t[] */;
    %619 = add(%i39, 1 /* ty=int32 */) /* ty=int32 */;
    %620 = @tensor_array_unstack_tensor1_helper_float16(%619, %up39, %t79) /* ty=List[tensor_float16_t[]] */;
    Cons(%618, %620) /* ty=List[tensor_float16_t[]] */
  }
}

def @ta_split_helper_int32(%tensor_array37: List[tensor_int32_t[]], %value15: tensor_int32_t[], %offset15: int32, %current15: int32, %limit15: int32, %lengths9: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %621 = equal(%current15, %limit15) /* ty=bool */;
  if (%621) {
    %tensor_array37
  } else {
    %622 = take(%lengths9, %current15) /* ty=int32 */;
    %623 = add(%offset15, %622) /* ty=int32 */;
    %624 = add(%current15, 1 /* ty=int32 */) /* ty=int32 */;
    %625 = @ta_split_helper_int32(%tensor_array37, %value15, %623, %624, %limit15, %lengths9) /* ty=List[tensor_int32_t[]] */;
    %626 = take(%lengths9, %current15) /* ty=int32 */;
    %627 = add(%626, %offset15) /* ty=int32 */;
    %628 = @tensor_take_int32(%value15, %offset15, %627) /* ty=tensor_int32_t[] */;
    @tensor_array_write_int32(%625, %current15, %628) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_int8(%i40: int32, %up40: int32, %t80: Tensor[(?), int8]) -> List[tensor_int8_t[]] {
  %629 = equal(%i40, %up40) /* ty=bool */;
  if (%629) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %630 = take(%t80, %i40) /* ty=int8 */;
    %631 = tensor0_int8(%630) /* ty=tensor_int8_t[] */;
    %632 = add(%i40, 1 /* ty=int32 */) /* ty=int32 */;
    %633 = @tensor_array_unstack_tensor1_helper_int8(%632, %up40, %t80) /* ty=List[tensor_int8_t[]] */;
    Cons(%631, %633) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int32(%tensor44: Tensor[(?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %634 = shape_of(%tensor44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = take(%634, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int32(0 /* ty=int32 */, %635, %tensor44) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor4_int32(%tensor45: Tensor[(?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %636 = shape_of(%tensor45, dtype="int32") /* ty=Tensor[(4), int32] */;
  %637 = take(%636, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_int32(0 /* ty=int32 */, %637, %tensor45) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_unstack_tensor5_helper_int32(%i41: int32, %up41: int32, %t81: Tensor[(?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %638 = equal(%i41, %up41) /* ty=bool */;
  if (%638) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %639 = take(%t81, %i41, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    %640 = tensor4_int32(%639) /* ty=tensor_int32_t[] */;
    %641 = add(%i41, 1 /* ty=int32 */) /* ty=int32 */;
    %642 = @tensor_array_unstack_tensor5_helper_int32(%641, %up41, %t81) /* ty=List[tensor_int32_t[]] */;
    Cons(%640, %642) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor6_int32(%tensor46: Tensor[(?, ?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %643 = shape_of(%tensor46, dtype="int32") /* ty=Tensor[(6), int32] */;
  %644 = take(%643, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int32(0 /* ty=int32 */, %644, %tensor46) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_split_int8(%tensor_array38: List[tensor_int8_t[]], %value5: tensor_int8_t[], %lengths10: Tensor[(?), int32]) -> List[tensor_int8_t[]] {
  %645 = shape_of(%lengths10, dtype="int32") /* ty=Tensor[(1), int32] */;
  %646 = take(%645, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int8(%tensor_array38, %value5, 0 /* ty=int32 */, 0 /* ty=int32 */, %646, %lengths10) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_concat_float16(%tensor_array39: List[tensor_float16_t[]]) -> tensor_float16_t[] {
  match? (%tensor_array39) {
    Nil => tensor_nil_float16 /* ty=tensor_float16_t[] */,
    Cons(%hd7: tensor_float16_t[], %tl7: List[tensor_float16_t[]]) => match? (%tl7) {
      Nil => %hd7,
      _ => %647 = @tensor_array_concat_float16(%tl7) /* ty=tensor_float16_t[] */;
      @tensor_concatenate_float16(%hd7, %647) /* ty=tensor_float16_t[] */,
    },
  }
}

def @tensor_expand_dims_float32(%x40: tensor_float32_t[]) -> tensor_float32_t[] {
  match? (%x40) {
    tensor0_float32(%t04: float32) => %648 = expand_dims(%t04, axis=0) /* ty=Tensor[(?), float32] */;
    tensor1_float32(%648) /* ty=tensor_float32_t[] */,
    tensor1_float32(%t126: Tensor[(?), float32]) => %649 = expand_dims(%t126, axis=0) /* ty=Tensor[(?, ?), float32] */;
    tensor2_float32(%649) /* ty=tensor_float32_t[] */,
    tensor2_float32(%t226: Tensor[(?, ?), float32]) => %650 = expand_dims(%t226, axis=0) /* ty=Tensor[(?, ?, ?), float32] */;
    tensor3_float32(%650) /* ty=tensor_float32_t[] */,
    tensor3_float32(%t320: Tensor[(?, ?, ?), float32]) => %651 = expand_dims(%t320, axis=0) /* ty=Tensor[(?, ?, ?, ?), float32] */;
    tensor4_float32(%651) /* ty=tensor_float32_t[] */,
    tensor4_float32(%t420: Tensor[(?, ?, ?, ?), float32]) => %652 = expand_dims(%t420, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float32] */;
    tensor5_float32(%652) /* ty=tensor_float32_t[] */,
    tensor5_float32(%t513: Tensor[(?, ?, ?, ?, ?), float32]) => %653 = expand_dims(%t513, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), float32] */;
    tensor6_float32(%653) /* ty=tensor_float32_t[] */,
  }
}

def @tensor_array_split_int32(%tensor_array40: List[tensor_int32_t[]], %value6: tensor_int32_t[], %lengths11: Tensor[(?), int32]) -> List[tensor_int32_t[]] {
  %654 = shape_of(%lengths11, dtype="int32") /* ty=Tensor[(1), int32] */;
  %655 = take(%654, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int32(%tensor_array40, %value6, 0 /* ty=int32 */, 0 /* ty=int32 */, %655, %lengths11) /* ty=List[tensor_int32_t[]] */
}

def @tensor_take_uint8(%tensor47: tensor_uint8_t[], %lower7: int32, %upper7: int32) -> tensor_uint8_t[] {
  match? (%tensor47) {
    tensor1_uint8(%t127: Tensor[(?), uint8]) => %656 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][43], dtype="int32") /* ty=Tensor[(?), int32] */;
    %657 = take(%t127, %656) /* ty=Tensor[(?), uint8] */;
    tensor1_uint8(%657) /* ty=tensor_uint8_t[] */,
    tensor2_uint8(%t227: Tensor[(?, ?), uint8]) => %658 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][44], dtype="int32") /* ty=Tensor[(?), int32] */;
    %659 = take(%t227, %658, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    tensor2_uint8(%659) /* ty=tensor_uint8_t[] */,
    tensor3_uint8(%t326: Tensor[(?, ?, ?), uint8]) => %660 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][45], dtype="int32") /* ty=Tensor[(?), int32] */;
    %661 = take(%t326, %660, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    tensor3_uint8(%661) /* ty=tensor_uint8_t[] */,
    tensor4_uint8(%t426: Tensor[(?, ?, ?, ?), uint8]) => %662 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][46], dtype="int32") /* ty=Tensor[(?), int32] */;
    %663 = take(%t426, %662, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    tensor4_uint8(%663) /* ty=tensor_uint8_t[] */,
    tensor5_uint8(%t514: Tensor[(?, ?, ?, ?, ?), uint8]) => %664 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][47], dtype="int32") /* ty=Tensor[(?), int32] */;
    %665 = take(%t514, %664, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    tensor5_uint8(%665) /* ty=tensor_uint8_t[] */,
    tensor6_uint8(%t612: Tensor[(?, ?, ?, ?, ?, ?), uint8]) => %666 = arange(%lower7, %upper7, 1 /* ty=int32 */, start=meta[relay.Var][14], stop=meta[relay.Var][15], step=meta[relay.Constant][48], dtype="int32") /* ty=Tensor[(?), int32] */;
    %667 = take(%t612, %666, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint8] */;
    tensor6_uint8(%667) /* ty=tensor_uint8_t[] */,
  }
}

def @tensor_array_unstack_tensor1_int64(%tensor48: Tensor[(?), int64]) -> List[tensor_int64_t[]] {
  %668 = shape_of(%tensor48, dtype="int32") /* ty=Tensor[(1), int32] */;
  %669 = take(%668, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_int64(0 /* ty=int32 */, %669, %tensor48) /* ty=List[tensor_int64_t[]] */
}

def @tensor_expand_dims_uint8(%x41: tensor_uint8_t[]) -> tensor_uint8_t[] {
  match? (%x41) {
    tensor0_uint8(%t05: uint8) => %670 = expand_dims(%t05, axis=0) /* ty=Tensor[(?), uint8] */;
    tensor1_uint8(%670) /* ty=tensor_uint8_t[] */,
    tensor1_uint8(%t128: Tensor[(?), uint8]) => %671 = expand_dims(%t128, axis=0) /* ty=Tensor[(?, ?), uint8] */;
    tensor2_uint8(%671) /* ty=tensor_uint8_t[] */,
    tensor2_uint8(%t228: Tensor[(?, ?), uint8]) => %672 = expand_dims(%t228, axis=0) /* ty=Tensor[(?, ?, ?), uint8] */;
    tensor3_uint8(%672) /* ty=tensor_uint8_t[] */,
    tensor3_uint8(%t327: Tensor[(?, ?, ?), uint8]) => %673 = expand_dims(%t327, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    tensor4_uint8(%673) /* ty=tensor_uint8_t[] */,
    tensor4_uint8(%t427: Tensor[(?, ?, ?, ?), uint8]) => %674 = expand_dims(%t427, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint8] */;
    tensor5_uint8(%674) /* ty=tensor_uint8_t[] */,
    tensor5_uint8(%t515: Tensor[(?, ?, ?, ?, ?), uint8]) => %675 = expand_dims(%t515, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint8] */;
    tensor6_uint8(%675) /* ty=tensor_uint8_t[] */,
  }
}

def @tensor_concatenate_uint8(%x42: tensor_uint8_t[], %y8: tensor_uint8_t[]) -> tensor_uint8_t[] {
  match? (%x42) {
    tensor1_uint8(%t1112: Tensor[(?), uint8]) => match? (%y8) {
      tensor1_uint8(%t129: Tensor[(?), uint8]) => %676 = (%t1112, %t129);
      %677 = concatenate(%676) /* ty=Tensor[(?), uint8] */;
      tensor1_uint8(%677) /* ty=tensor_uint8_t[] */,
    },
    tensor2_uint8(%t2112: Tensor[(?, ?), uint8]) => match? (%y8) {
      tensor2_uint8(%t229: Tensor[(?, ?), uint8]) => %678 = (%t2112, %t229);
      %679 = concatenate(%678) /* ty=Tensor[(?, ?), uint8] */;
      tensor2_uint8(%679) /* ty=tensor_uint8_t[] */,
    },
    tensor3_uint8(%t3111: Tensor[(?, ?, ?), uint8]) => match? (%y8) {
      tensor3_uint8(%t328: Tensor[(?, ?, ?), uint8]) => %680 = (%t3111, %t328);
      %681 = concatenate(%680) /* ty=Tensor[(?, ?, ?), uint8] */;
      tensor3_uint8(%681) /* ty=tensor_uint8_t[] */,
    },
    tensor4_uint8(%t4110: Tensor[(?, ?, ?, ?), uint8]) => match? (%y8) {
      tensor4_uint8(%t428: Tensor[(?, ?, ?, ?), uint8]) => %682 = (%t4110, %t428);
      %683 = concatenate(%682) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
      tensor4_uint8(%683) /* ty=tensor_uint8_t[] */,
    },
  }
}

def @tensor_array_write_uint8(%tensor_array41: List[tensor_uint8_t[]], %x43: int32, %v7: tensor_uint8_t[]) -> List[tensor_uint8_t[]] {
  @update(%tensor_array41, %x43, %v7) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor2_uint8(%tensor49: Tensor[(?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %684 = shape_of(%tensor49, dtype="int32") /* ty=Tensor[(2), int32] */;
  %685 = take(%684, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_uint8(0 /* ty=int32 */, %685, %tensor49) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_int64(%x44: int32) -> List[tensor_int64_t[]] {
  %686 = equal(%x44, 0 /* ty=int32 */) /* ty=bool */;
  if (%686) {
    Nil /* ty=List[tensor_int64_t[]] */
  } else {
    %687 = tensor_nil_int64 /* ty=tensor_int64_t[] */;
    %688 = subtract(%x44, 1 /* ty=int32 */) /* ty=int32 */;
    %689 = @tensor_array_int64(%688) /* ty=List[tensor_int64_t[]] */;
    Cons(%687, %689) /* ty=List[tensor_int64_t[]] */
  }
}

def @tensor_array_unstack_tensor4_uint8(%tensor50: Tensor[(?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %690 = shape_of(%tensor50, dtype="int32") /* ty=Tensor[(4), int32] */;
  %691 = take(%690, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor4_helper_uint8(0 /* ty=int32 */, %691, %tensor50) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor5_helper_uint8(%i42: int32, %up42: int32, %t82: Tensor[(?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %692 = equal(%i42, %up42) /* ty=bool */;
  if (%692) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %693 = take(%t82, %i42, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint8] */;
    %694 = tensor4_uint8(%693) /* ty=tensor_uint8_t[] */;
    %695 = add(%i42, 1 /* ty=int32 */) /* ty=int32 */;
    %696 = @tensor_array_unstack_tensor5_helper_uint8(%695, %up42, %t82) /* ty=List[tensor_uint8_t[]] */;
    Cons(%694, %696) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor2_int16(%tensor51: Tensor[(?, ?), int16]) -> List[tensor_int16_t[]] {
  %697 = shape_of(%tensor51, dtype="int32") /* ty=Tensor[(2), int32] */;
  %698 = take(%697, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int16(0 /* ty=int32 */, %698, %tensor51) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor6_uint8(%tensor52: Tensor[(?, ?, ?, ?, ?, ?), uint8]) -> List[tensor_uint8_t[]] {
  %699 = shape_of(%tensor52, dtype="int32") /* ty=Tensor[(6), int32] */;
  %700 = take(%699, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_uint8(0 /* ty=int32 */, %700, %tensor52) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_scatter_helper_uint8(%ta8: List[tensor_uint8_t[]], %current9: int32, %limit9: int32, %indices_8: Tensor[(?), int32], %values_8: List[tensor_uint8_t[]]) -> List[tensor_uint8_t[]] {
  %701 = equal(%current9, %limit9) /* ty=bool */;
  if (%701) {
    %ta8
  } else {
    %702 = take(%indices_8, %current9) /* ty=int32 */;
    %703 = @tensor_array_read_uint8(%values_8, %current9) /* ty=tensor_uint8_t[] */;
    %704 = @tensor_array_write_uint8(%ta8, %702, %703) /* ty=List[tensor_uint8_t[]] */;
    %705 = add(%current9, 1 /* ty=int32 */) /* ty=int32 */;
    @tensor_array_scatter_helper_uint8(%704, %705, %limit9, %indices_8, %values_8) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_float64(%i43: int32, %up43: int32, %t83: Tensor[(?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %706 = equal(%i43, %up43) /* ty=bool */;
  if (%706) {
    Nil /* ty=List[tensor_float64_t[]] */
  } else {
    %707 = take(%t83, %i43, axis=0) /* ty=Tensor[(?, ?), float64] */;
    %708 = tensor2_float64(%707) /* ty=tensor_float64_t[] */;
    %709 = add(%i43, 1 /* ty=int32 */) /* ty=int32 */;
    %710 = @tensor_array_unstack_tensor3_helper_float64(%709, %up43, %t83) /* ty=List[tensor_float64_t[]] */;
    Cons(%708, %710) /* ty=List[tensor_float64_t[]] */
  }
}

def @tensor_array_scatter_uint8(%tensor_array42: List[tensor_uint8_t[]], %indices3: Tensor[(?), int32], %values4: List[tensor_uint8_t[]]) -> List[tensor_uint8_t[]] {
  %711 = shape_of(%indices3, dtype="int32") /* ty=Tensor[(1), int32] */;
  %712 = take(%711, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_uint8(%tensor_array42, 0 /* ty=int32 */, %712, %indices3, %values4) /* ty=List[tensor_uint8_t[]] */
}

def @ta_split_helper_uint8(%tensor_array43: List[tensor_uint8_t[]], %value16: tensor_uint8_t[], %offset16: int32, %current16: int32, %limit16: int32, %lengths12: Tensor[(?), int32]) -> List[tensor_uint8_t[]] {
  %713 = equal(%current16, %limit16) /* ty=bool */;
  if (%713) {
    %tensor_array43
  } else {
    %714 = take(%lengths12, %current16) /* ty=int32 */;
    %715 = add(%offset16, %714) /* ty=int32 */;
    %716 = add(%current16, 1 /* ty=int32 */) /* ty=int32 */;
    %717 = @ta_split_helper_uint8(%tensor_array43, %value16, %715, %716, %limit16, %lengths12) /* ty=List[tensor_uint8_t[]] */;
    %718 = take(%lengths12, %current16) /* ty=int32 */;
    %719 = add(%718, %offset16) /* ty=int32 */;
    %720 = @tensor_take_uint8(%value16, %offset16, %719) /* ty=tensor_uint8_t[] */;
    @tensor_array_write_uint8(%717, %current16, %720) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_split_uint8(%tensor_array44: List[tensor_uint8_t[]], %value7: tensor_uint8_t[], %lengths13: Tensor[(?), int32]) -> List[tensor_uint8_t[]] {
  %721 = shape_of(%lengths13, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = take(%721, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_uint8(%tensor_array44, %value7, 0 /* ty=int32 */, 0 /* ty=int32 */, %722, %lengths13) /* ty=List[tensor_uint8_t[]] */
}

def @tensor_array_unstack_tensor2_float32(%tensor53: Tensor[(?, ?), float32]) -> List[tensor_float32_t[]] {
  %723 = shape_of(%tensor53, dtype="int32") /* ty=Tensor[(2), int32] */;
  %724 = take(%723, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_float32(0 /* ty=int32 */, %724, %tensor53) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_stack_uint8(%tensor_array45: List[tensor_uint8_t[]]) -> tensor_uint8_t[] {
  %725 = @map(@tensor_expand_dims_uint8, %tensor_array45) /* ty=List[tensor_uint8_t[]] */;
  %726 = @hd(%725) /* ty=tensor_uint8_t[] */;
  %727 = @tl(%725) /* ty=List[tensor_uint8_t[]] */;
  @foldl(@tensor_concatenate_uint8, %726, %727) /* ty=tensor_uint8_t[] */
}

def @tensor_array_unstack_tensor6_helper_float16(%i44: int32, %up44: int32, %t84: Tensor[(?, ?, ?, ?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %728 = equal(%i44, %up44) /* ty=bool */;
  if (%728) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %729 = take(%t84, %i44, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), float16] */;
    %730 = tensor5_float16(%729) /* ty=tensor_float16_t[] */;
    %731 = add(%i44, 1 /* ty=int32 */) /* ty=int32 */;
    %732 = @tensor_array_unstack_tensor6_helper_float16(%731, %up44, %t84) /* ty=List[tensor_float16_t[]] */;
    Cons(%730, %732) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_int16(%i45: int32, %up45: int32, %t85: Tensor[(?), int16]) -> List[tensor_int16_t[]] {
  %733 = equal(%i45, %up45) /* ty=bool */;
  if (%733) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %734 = take(%t85, %i45) /* ty=int16 */;
    %735 = tensor0_int16(%734) /* ty=tensor_int16_t[] */;
    %736 = add(%i45, 1 /* ty=int32 */) /* ty=int32 */;
    %737 = @tensor_array_unstack_tensor1_helper_int16(%736, %up45, %t85) /* ty=List[tensor_int16_t[]] */;
    Cons(%735, %737) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_read_float16(%tensor_array46: List[tensor_float16_t[]], %x45: int32) -> tensor_float16_t[] {
  @nth(%tensor_array46, %x45) /* ty=tensor_float16_t[] */
}

def @tensor_take_int8(%tensor54: tensor_int8_t[], %lower8: int32, %upper8: int32) -> tensor_int8_t[] {
  match? (%tensor54) {
    tensor1_int8(%t130: Tensor[(?), int8]) => %738 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][49], dtype="int32") /* ty=Tensor[(?), int32] */;
    %739 = take(%t130, %738) /* ty=Tensor[(?), int8] */;
    tensor1_int8(%739) /* ty=tensor_int8_t[] */,
    tensor2_int8(%t230: Tensor[(?, ?), int8]) => %740 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][50], dtype="int32") /* ty=Tensor[(?), int32] */;
    %741 = take(%t230, %740, axis=0) /* ty=Tensor[(?, ?), int8] */;
    tensor2_int8(%741) /* ty=tensor_int8_t[] */,
    tensor3_int8(%t329: Tensor[(?, ?, ?), int8]) => %742 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][51], dtype="int32") /* ty=Tensor[(?), int32] */;
    %743 = take(%t329, %742, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    tensor3_int8(%743) /* ty=tensor_int8_t[] */,
    tensor4_int8(%t429: Tensor[(?, ?, ?, ?), int8]) => %744 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][52], dtype="int32") /* ty=Tensor[(?), int32] */;
    %745 = take(%t429, %744, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    tensor4_int8(%745) /* ty=tensor_int8_t[] */,
    tensor5_int8(%t516: Tensor[(?, ?, ?, ?, ?), int8]) => %746 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][53], dtype="int32") /* ty=Tensor[(?), int32] */;
    %747 = take(%t516, %746, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    tensor5_int8(%747) /* ty=tensor_int8_t[] */,
    tensor6_int8(%t613: Tensor[(?, ?, ?, ?, ?, ?), int8]) => %748 = arange(%lower8, %upper8, 1 /* ty=int32 */, start=meta[relay.Var][16], stop=meta[relay.Var][17], step=meta[relay.Constant][54], dtype="int32") /* ty=Tensor[(?), int32] */;
    %749 = take(%t613, %748, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int8] */;
    tensor6_int8(%749) /* ty=tensor_int8_t[] */,
  }
}

def @tensor_array_scatter_uint16(%tensor_array47: List[tensor_uint16_t[]], %indices4: Tensor[(?), int32], %values5: List[tensor_uint16_t[]]) -> List[tensor_uint16_t[]] {
  %750 = shape_of(%indices4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %751 = take(%750, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_uint16(%tensor_array47, 0 /* ty=int32 */, %751, %indices4, %values5) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_expand_dims_int8(%x46: tensor_int8_t[]) -> tensor_int8_t[] {
  match? (%x46) {
    tensor0_int8(%t06: int8) => %752 = expand_dims(%t06, axis=0) /* ty=Tensor[(?), int8] */;
    tensor1_int8(%752) /* ty=tensor_int8_t[] */,
    tensor1_int8(%t131: Tensor[(?), int8]) => %753 = expand_dims(%t131, axis=0) /* ty=Tensor[(?, ?), int8] */;
    tensor2_int8(%753) /* ty=tensor_int8_t[] */,
    tensor2_int8(%t231: Tensor[(?, ?), int8]) => %754 = expand_dims(%t231, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    tensor3_int8(%754) /* ty=tensor_int8_t[] */,
    tensor3_int8(%t330: Tensor[(?, ?, ?), int8]) => %755 = expand_dims(%t330, axis=0) /* ty=Tensor[(?, ?, ?, ?), int8] */;
    tensor4_int8(%755) /* ty=tensor_int8_t[] */,
    tensor4_int8(%t430: Tensor[(?, ?, ?, ?), int8]) => %756 = expand_dims(%t430, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int8] */;
    tensor5_int8(%756) /* ty=tensor_int8_t[] */,
    tensor5_int8(%t517: Tensor[(?, ?, ?, ?, ?), int8]) => %757 = expand_dims(%t517, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int8] */;
    tensor6_int8(%757) /* ty=tensor_int8_t[] */,
  }
}

def @tensor_array_concat_uint16(%tensor_array48: List[tensor_uint16_t[]]) -> tensor_uint16_t[] {
  match? (%tensor_array48) {
    Nil => tensor_nil_uint16 /* ty=tensor_uint16_t[] */,
    Cons(%hd8: tensor_uint16_t[], %tl8: List[tensor_uint16_t[]]) => match? (%tl8) {
      Nil => %hd8,
      _ => %758 = @tensor_array_concat_uint16(%tl8) /* ty=tensor_uint16_t[] */;
      @tensor_concatenate_uint16(%hd8, %758) /* ty=tensor_uint16_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor6_float64(%tensor55: Tensor[(?, ?, ?, ?, ?, ?), float64]) -> List[tensor_float64_t[]] {
  %759 = shape_of(%tensor55, dtype="int32") /* ty=Tensor[(6), int32] */;
  %760 = take(%759, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_float64(0 /* ty=int32 */, %760, %tensor55) /* ty=List[tensor_float64_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int8(%i46: int32, %up46: int32, %t86: Tensor[(?, ?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %761 = equal(%i46, %up46) /* ty=bool */;
  if (%761) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %762 = take(%t86, %i46, axis=0) /* ty=Tensor[(?, ?, ?), int8] */;
    %763 = tensor3_int8(%762) /* ty=tensor_int8_t[] */;
    %764 = add(%i46, 1 /* ty=int32 */) /* ty=int32 */;
    %765 = @tensor_array_unstack_tensor4_helper_int8(%764, %up46, %t86) /* ty=List[tensor_int8_t[]] */;
    Cons(%763, %765) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_int16(%i47: int32, %up47: int32, %t87: Tensor[(?, ?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %766 = equal(%i47, %up47) /* ty=bool */;
  if (%766) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %767 = take(%t87, %i47, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int16] */;
    %768 = tensor5_int16(%767) /* ty=tensor_int16_t[] */;
    %769 = add(%i47, 1 /* ty=int32 */) /* ty=int32 */;
    %770 = @tensor_array_unstack_tensor6_helper_int16(%769, %up47, %t87) /* ty=List[tensor_int16_t[]] */;
    Cons(%768, %770) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_write_uint16(%tensor_array49: List[tensor_uint16_t[]], %x47: int32, %v8: tensor_uint16_t[]) -> List[tensor_uint16_t[]] {
  @update(%tensor_array49, %x47, %v8) /* ty=List[tensor_uint16_t[]] */
}

def @tensor_array_scatter_int16(%tensor_array50: List[tensor_int16_t[]], %indices5: Tensor[(?), int32], %values6: List[tensor_int16_t[]]) -> List[tensor_int16_t[]] {
  %771 = shape_of(%indices5, dtype="int32") /* ty=Tensor[(1), int32] */;
  %772 = take(%771, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int16(%tensor_array50, 0 /* ty=int32 */, %772, %indices5, %values6) /* ty=List[tensor_int16_t[]] */
}

def @tensor_concatenate_int8(%x48: tensor_int8_t[], %y9: tensor_int8_t[]) -> tensor_int8_t[] {
  match? (%x48) {
    tensor1_int8(%t1113: Tensor[(?), int8]) => match? (%y9) {
      tensor1_int8(%t1210: Tensor[(?), int8]) => %773 = (%t1113, %t1210);
      %774 = concatenate(%773) /* ty=Tensor[(?), int8] */;
      tensor1_int8(%774) /* ty=tensor_int8_t[] */,
    },
    tensor2_int8(%t2113: Tensor[(?, ?), int8]) => match? (%y9) {
      tensor2_int8(%t2210: Tensor[(?, ?), int8]) => %775 = (%t2113, %t2210);
      %776 = concatenate(%775) /* ty=Tensor[(?, ?), int8] */;
      tensor2_int8(%776) /* ty=tensor_int8_t[] */,
    },
    tensor3_int8(%t3112: Tensor[(?, ?, ?), int8]) => match? (%y9) {
      tensor3_int8(%t3210: Tensor[(?, ?, ?), int8]) => %777 = (%t3112, %t3210);
      %778 = concatenate(%777) /* ty=Tensor[(?, ?, ?), int8] */;
      tensor3_int8(%778) /* ty=tensor_int8_t[] */,
    },
    tensor4_int8(%t4111: Tensor[(?, ?, ?, ?), int8]) => match? (%y9) {
      tensor4_int8(%t4210: Tensor[(?, ?, ?, ?), int8]) => %779 = (%t4111, %t4210);
      %780 = concatenate(%779) /* ty=Tensor[(?, ?, ?, ?), int8] */;
      tensor4_int8(%780) /* ty=tensor_int8_t[] */,
    },
  }
}

def @tensor_concatenate_uint16(%x49: tensor_uint16_t[], %y10: tensor_uint16_t[]) -> tensor_uint16_t[] {
  match? (%x49) {
    tensor1_uint16(%t1114: Tensor[(?), uint16]) => match? (%y10) {
      tensor1_uint16(%t1211: Tensor[(?), uint16]) => %781 = (%t1114, %t1211);
      %782 = concatenate(%781) /* ty=Tensor[(?), uint16] */;
      tensor1_uint16(%782) /* ty=tensor_uint16_t[] */,
    },
    tensor2_uint16(%t2114: Tensor[(?, ?), uint16]) => match? (%y10) {
      tensor2_uint16(%t2211: Tensor[(?, ?), uint16]) => %783 = (%t2114, %t2211);
      %784 = concatenate(%783) /* ty=Tensor[(?, ?), uint16] */;
      tensor2_uint16(%784) /* ty=tensor_uint16_t[] */,
    },
    tensor3_uint16(%t3113: Tensor[(?, ?, ?), uint16]) => match? (%y10) {
      tensor3_uint16(%t3211: Tensor[(?, ?, ?), uint16]) => %785 = (%t3113, %t3211);
      %786 = concatenate(%785) /* ty=Tensor[(?, ?, ?), uint16] */;
      tensor3_uint16(%786) /* ty=tensor_uint16_t[] */,
    },
    tensor4_uint16(%t4112: Tensor[(?, ?, ?, ?), uint16]) => match? (%y10) {
      tensor4_uint16(%t4211: Tensor[(?, ?, ?, ?), uint16]) => %787 = (%t4112, %t4211);
      %788 = concatenate(%787) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
      tensor4_uint16(%788) /* ty=tensor_uint16_t[] */,
    },
  }
}

def @tensor_array_unstack_tensor1_float32(%tensor56: Tensor[(?), float32]) -> List[tensor_float32_t[]] {
  %789 = shape_of(%tensor56, dtype="int32") /* ty=Tensor[(1), int32] */;
  %790 = take(%789, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor1_helper_float32(0 /* ty=int32 */, %790, %tensor56) /* ty=List[tensor_float32_t[]] */
}

def @tensor_expand_dims_int32(%x50: tensor_int32_t[]) -> tensor_int32_t[] {
  match? (%x50) {
    tensor0_int32(%t07: int32) => %791 = expand_dims(%t07, axis=0) /* ty=Tensor[(?), int32] */;
    tensor1_int32(%791) /* ty=tensor_int32_t[] */,
    tensor1_int32(%t132: Tensor[(?), int32]) => %792 = expand_dims(%t132, axis=0) /* ty=Tensor[(?, ?), int32] */;
    tensor2_int32(%792) /* ty=tensor_int32_t[] */,
    tensor2_int32(%t232: Tensor[(?, ?), int32]) => %793 = expand_dims(%t232, axis=0) /* ty=Tensor[(?, ?, ?), int32] */;
    tensor3_int32(%793) /* ty=tensor_int32_t[] */,
    tensor3_int32(%t331: Tensor[(?, ?, ?), int32]) => %794 = expand_dims(%t331, axis=0) /* ty=Tensor[(?, ?, ?, ?), int32] */;
    tensor4_int32(%794) /* ty=tensor_int32_t[] */,
    tensor4_int32(%t431: Tensor[(?, ?, ?, ?), int32]) => %795 = expand_dims(%t431, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    tensor5_int32(%795) /* ty=tensor_int32_t[] */,
    tensor5_int32(%t518: Tensor[(?, ?, ?, ?, ?), int32]) => %796 = expand_dims(%t518, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), int32] */;
    tensor6_int32(%796) /* ty=tensor_int32_t[] */,
  }
}

def @tensor_array_scatter_int32(%tensor_array51: List[tensor_int32_t[]], %indices6: Tensor[(?), int32], %values7: List[tensor_int32_t[]]) -> List[tensor_int32_t[]] {
  %797 = shape_of(%indices6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %798 = take(%797, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int32(%tensor_array51, 0 /* ty=int32 */, %798, %indices6, %values7) /* ty=List[tensor_int32_t[]] */
}

def @tensor_array_int8(%x51: int32) -> List[tensor_int8_t[]] {
  %799 = equal(%x51, 0 /* ty=int32 */) /* ty=bool */;
  if (%799) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %800 = tensor_nil_int8 /* ty=tensor_int8_t[] */;
    %801 = subtract(%x51, 1 /* ty=int32 */) /* ty=int32 */;
    %802 = @tensor_array_int8(%801) /* ty=List[tensor_int8_t[]] */;
    Cons(%800, %802) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_write_int8(%tensor_array52: List[tensor_int8_t[]], %x52: int32, %v9: tensor_int8_t[]) -> List[tensor_int8_t[]] {
  @update(%tensor_array52, %x52, %v9) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor2_int8(%tensor57: Tensor[(?, ?), int8]) -> List[tensor_int8_t[]] {
  %803 = shape_of(%tensor57, dtype="int32") /* ty=Tensor[(2), int32] */;
  %804 = take(%803, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor2_helper_int8(0 /* ty=int32 */, %804, %tensor57) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_unstack_tensor5_helper_int16(%i48: int32, %up48: int32, %t88: Tensor[(?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %805 = equal(%i48, %up48) /* ty=bool */;
  if (%805) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %806 = take(%t88, %i48, axis=0) /* ty=Tensor[(?, ?, ?, ?), int16] */;
    %807 = tensor4_int16(%806) /* ty=tensor_int16_t[] */;
    %808 = add(%i48, 1 /* ty=int32 */) /* ty=int32 */;
    %809 = @tensor_array_unstack_tensor5_helper_int16(%808, %up48, %t88) /* ty=List[tensor_int16_t[]] */;
    Cons(%807, %809) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_helper_int32(%i49: int32, %up49: int32, %t89: Tensor[(?, ?, ?, ?, ?, ?), int32]) -> List[tensor_int32_t[]] {
  %810 = equal(%i49, %up49) /* ty=bool */;
  if (%810) {
    Nil /* ty=List[tensor_int32_t[]] */
  } else {
    %811 = take(%t89, %i49, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), int32] */;
    %812 = tensor5_int32(%811) /* ty=tensor_int32_t[] */;
    %813 = add(%i49, 1 /* ty=int32 */) /* ty=int32 */;
    %814 = @tensor_array_unstack_tensor6_helper_int32(%813, %up49, %t89) /* ty=List[tensor_int32_t[]] */;
    Cons(%812, %814) /* ty=List[tensor_int32_t[]] */
  }
}

def @tensor_array_unstack_tensor3_helper_int8(%i50: int32, %up50: int32, %t90: Tensor[(?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %815 = equal(%i50, %up50) /* ty=bool */;
  if (%815) {
    Nil /* ty=List[tensor_int8_t[]] */
  } else {
    %816 = take(%t90, %i50, axis=0) /* ty=Tensor[(?, ?), int8] */;
    %817 = tensor2_int8(%816) /* ty=tensor_int8_t[] */;
    %818 = add(%i50, 1 /* ty=int32 */) /* ty=int32 */;
    %819 = @tensor_array_unstack_tensor3_helper_int8(%818, %up50, %t90) /* ty=List[tensor_int8_t[]] */;
    Cons(%817, %819) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_unstack_tensor3_float16(%tensor58: Tensor[(?, ?, ?), float16]) -> List[tensor_float16_t[]] {
  %820 = shape_of(%tensor58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = take(%820, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_float16(0 /* ty=int32 */, %821, %tensor58) /* ty=List[tensor_float16_t[]] */
}

def @tensor_array_unstack_tensor3_helper_int16(%i51: int32, %up51: int32, %t91: Tensor[(?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %822 = equal(%i51, %up51) /* ty=bool */;
  if (%822) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %823 = take(%t91, %i51, axis=0) /* ty=Tensor[(?, ?), int16] */;
    %824 = tensor2_int16(%823) /* ty=tensor_int16_t[] */;
    %825 = add(%i51, 1 /* ty=int32 */) /* ty=int32 */;
    %826 = @tensor_array_unstack_tensor3_helper_int16(%825, %up51, %t91) /* ty=List[tensor_int16_t[]] */;
    Cons(%824, %826) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor3_int8(%tensor59: Tensor[(?, ?, ?), int8]) -> List[tensor_int8_t[]] {
  %827 = shape_of(%tensor59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = take(%827, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int8(0 /* ty=int32 */, %828, %tensor59) /* ty=List[tensor_int8_t[]] */
}

def @tensor_array_read_int8(%tensor_array53: List[tensor_int8_t[]], %x53: int32) -> tensor_int8_t[] {
  @nth(%tensor_array53, %x53) /* ty=tensor_int8_t[] */
}

def @tensor_array_scatter_int8(%tensor_array54: List[tensor_int8_t[]], %indices7: Tensor[(?), int32], %values8: List[tensor_int8_t[]]) -> List[tensor_int8_t[]] {
  %829 = shape_of(%indices7, dtype="int32") /* ty=Tensor[(1), int32] */;
  %830 = take(%829, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_int8(%tensor_array54, 0 /* ty=int32 */, %830, %indices7, %values8) /* ty=List[tensor_int8_t[]] */
}

def @ta_split_helper_int8(%tensor_array55: List[tensor_int8_t[]], %value17: tensor_int8_t[], %offset17: int32, %current17: int32, %limit17: int32, %lengths14: Tensor[(?), int32]) -> List[tensor_int8_t[]] {
  %831 = equal(%current17, %limit17) /* ty=bool */;
  if (%831) {
    %tensor_array55
  } else {
    %832 = take(%lengths14, %current17) /* ty=int32 */;
    %833 = add(%offset17, %832) /* ty=int32 */;
    %834 = add(%current17, 1 /* ty=int32 */) /* ty=int32 */;
    %835 = @ta_split_helper_int8(%tensor_array55, %value17, %833, %834, %limit17, %lengths14) /* ty=List[tensor_int8_t[]] */;
    %836 = take(%lengths14, %current17) /* ty=int32 */;
    %837 = add(%836, %offset17) /* ty=int32 */;
    %838 = @tensor_take_int8(%value17, %offset17, %837) /* ty=tensor_int8_t[] */;
    @tensor_array_write_int8(%835, %current17, %838) /* ty=List[tensor_int8_t[]] */
  }
}

def @tensor_array_split_int64(%tensor_array56: List[tensor_int64_t[]], %value8: tensor_int64_t[], %lengths15: Tensor[(?), int32]) -> List[tensor_int64_t[]] {
  %839 = shape_of(%lengths15, dtype="int32") /* ty=Tensor[(1), int32] */;
  %840 = take(%839, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int64(%tensor_array56, %value8, 0 /* ty=int32 */, 0 /* ty=int32 */, %840, %lengths15) /* ty=List[tensor_int64_t[]] */
}

def @tensor_array_stack_int8(%tensor_array57: List[tensor_int8_t[]]) -> tensor_int8_t[] {
  %841 = @map(@tensor_expand_dims_int8, %tensor_array57) /* ty=List[tensor_int8_t[]] */;
  %842 = @hd(%841) /* ty=tensor_int8_t[] */;
  %843 = @tl(%841) /* ty=List[tensor_int8_t[]] */;
  @foldl(@tensor_concatenate_int8, %842, %843) /* ty=tensor_int8_t[] */
}

def @tensor_array_scatter_float32(%tensor_array58: List[tensor_float32_t[]], %indices8: Tensor[(?), int32], %values9: List[tensor_float32_t[]]) -> List[tensor_float32_t[]] {
  %844 = shape_of(%indices8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %845 = take(%844, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_scatter_helper_float32(%tensor_array58, 0 /* ty=int32 */, %845, %indices8, %values9) /* ty=List[tensor_float32_t[]] */
}

def @tensor_array_write_int16(%tensor_array59: List[tensor_int16_t[]], %x54: int32, %v10: tensor_int16_t[]) -> List[tensor_int16_t[]] {
  @update(%tensor_array59, %x54, %v10) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor3_int16(%tensor60: Tensor[(?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %846 = shape_of(%tensor60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = take(%846, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor3_helper_int16(0 /* ty=int32 */, %847, %tensor60) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_unstack_tensor4_helper_int16(%i52: int32, %up52: int32, %t92: Tensor[(?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %848 = equal(%i52, %up52) /* ty=bool */;
  if (%848) {
    Nil /* ty=List[tensor_int16_t[]] */
  } else {
    %849 = take(%t92, %i52, axis=0) /* ty=Tensor[(?, ?, ?), int16] */;
    %850 = tensor3_int16(%849) /* ty=tensor_int16_t[] */;
    %851 = add(%i52, 1 /* ty=int32 */) /* ty=int32 */;
    %852 = @tensor_array_unstack_tensor4_helper_int16(%851, %up52, %t92) /* ty=List[tensor_int16_t[]] */;
    Cons(%850, %852) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_unstack_tensor1_helper_uint8(%i53: int32, %up53: int32, %t93: Tensor[(?), uint8]) -> List[tensor_uint8_t[]] {
  %853 = equal(%i53, %up53) /* ty=bool */;
  if (%853) {
    Nil /* ty=List[tensor_uint8_t[]] */
  } else {
    %854 = take(%t93, %i53) /* ty=uint8 */;
    %855 = tensor0_uint8(%854) /* ty=tensor_uint8_t[] */;
    %856 = add(%i53, 1 /* ty=int32 */) /* ty=int32 */;
    %857 = @tensor_array_unstack_tensor1_helper_uint8(%856, %up53, %t93) /* ty=List[tensor_uint8_t[]] */;
    Cons(%855, %857) /* ty=List[tensor_uint8_t[]] */
  }
}

def @tensor_array_unstack_tensor5_int16(%tensor61: Tensor[(?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %858 = shape_of(%tensor61, dtype="int32") /* ty=Tensor[(5), int32] */;
  %859 = take(%858, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor5_helper_int16(0 /* ty=int32 */, %859, %tensor61) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_float16(%x55: int32) -> List[tensor_float16_t[]] {
  %860 = equal(%x55, 0 /* ty=int32 */) /* ty=bool */;
  if (%860) {
    Nil /* ty=List[tensor_float16_t[]] */
  } else {
    %861 = tensor_nil_float16 /* ty=tensor_float16_t[] */;
    %862 = subtract(%x55, 1 /* ty=int32 */) /* ty=int32 */;
    %863 = @tensor_array_float16(%862) /* ty=List[tensor_float16_t[]] */;
    Cons(%861, %863) /* ty=List[tensor_float16_t[]] */
  }
}

def @tensor_array_unstack_tensor6_int16(%tensor62: Tensor[(?, ?, ?, ?, ?, ?), int16]) -> List[tensor_int16_t[]] {
  %864 = shape_of(%tensor62, dtype="int32") /* ty=Tensor[(6), int32] */;
  %865 = take(%864, 0 /* ty=int32 */) /* ty=int32 */;
  @tensor_array_unstack_tensor6_helper_int16(0 /* ty=int32 */, %865, %tensor62) /* ty=List[tensor_int16_t[]] */
}

def @ta_split_helper_int16(%tensor_array60: List[tensor_int16_t[]], %value18: tensor_int16_t[], %offset18: int32, %current18: int32, %limit18: int32, %lengths16: Tensor[(?), int32]) -> List[tensor_int16_t[]] {
  %866 = equal(%current18, %limit18) /* ty=bool */;
  if (%866) {
    %tensor_array60
  } else {
    %867 = take(%lengths16, %current18) /* ty=int32 */;
    %868 = add(%offset18, %867) /* ty=int32 */;
    %869 = add(%current18, 1 /* ty=int32 */) /* ty=int32 */;
    %870 = @ta_split_helper_int16(%tensor_array60, %value18, %868, %869, %limit18, %lengths16) /* ty=List[tensor_int16_t[]] */;
    %871 = take(%lengths16, %current18) /* ty=int32 */;
    %872 = add(%871, %offset18) /* ty=int32 */;
    %873 = @tensor_take_int16(%value18, %offset18, %872) /* ty=tensor_int16_t[] */;
    @tensor_array_write_int16(%870, %current18, %873) /* ty=List[tensor_int16_t[]] */
  }
}

def @tensor_array_split_int16(%tensor_array61: List[tensor_int16_t[]], %value9: tensor_int16_t[], %lengths17: Tensor[(?), int32]) -> List[tensor_int16_t[]] {
  %874 = shape_of(%lengths17, dtype="int32") /* ty=Tensor[(1), int32] */;
  %875 = take(%874, 0 /* ty=int32 */) /* ty=int32 */;
  @ta_split_helper_int16(%tensor_array61, %value9, 0 /* ty=int32 */, 0 /* ty=int32 */, %875, %lengths17) /* ty=List[tensor_int16_t[]] */
}

def @tensor_array_stack_int16(%tensor_array62: List[tensor_int16_t[]]) -> tensor_int16_t[] {
  %876 = @map(@tensor_expand_dims_int16, %tensor_array62) /* ty=List[tensor_int16_t[]] */;
  %877 = @hd(%876) /* ty=tensor_int16_t[] */;
  %878 = @tl(%876) /* ty=List[tensor_int16_t[]] */;
  @foldl(@tensor_concatenate_int16, %877, %878) /* ty=tensor_int16_t[] */
}

def @tensor_expand_dims_uint16(%x56: tensor_uint16_t[]) -> tensor_uint16_t[] {
  match? (%x56) {
    tensor0_uint16(%t08: uint16) => %879 = expand_dims(%t08, axis=0) /* ty=Tensor[(?), uint16] */;
    tensor1_uint16(%879) /* ty=tensor_uint16_t[] */,
    tensor1_uint16(%t133: Tensor[(?), uint16]) => %880 = expand_dims(%t133, axis=0) /* ty=Tensor[(?, ?), uint16] */;
    tensor2_uint16(%880) /* ty=tensor_uint16_t[] */,
    tensor2_uint16(%t233: Tensor[(?, ?), uint16]) => %881 = expand_dims(%t233, axis=0) /* ty=Tensor[(?, ?, ?), uint16] */;
    tensor3_uint16(%881) /* ty=tensor_uint16_t[] */,
    tensor3_uint16(%t332: Tensor[(?, ?, ?), uint16]) => %882 = expand_dims(%t332, axis=0) /* ty=Tensor[(?, ?, ?, ?), uint16] */;
    tensor4_uint16(%882) /* ty=tensor_uint16_t[] */,
    tensor4_uint16(%t432: Tensor[(?, ?, ?, ?), uint16]) => %883 = expand_dims(%t432, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?), uint16] */;
    tensor5_uint16(%883) /* ty=tensor_uint16_t[] */,
    tensor5_uint16(%t519: Tensor[(?, ?, ?, ?, ?), uint16]) => %884 = expand_dims(%t519, axis=0) /* ty=Tensor[(?, ?, ?, ?, ?, ?), uint16] */;
    tensor6_uint16(%884) /* ty=tensor_uint16_t[] */,
  }
}

def @tensor_array_uint16(%x57: int32) -> List[tensor_uint16_t[]] {
  %885 = equal(%x57, 0 /* ty=int32 */) /* ty=bool */;
  if (%885) {
    Nil /* ty=List[tensor_uint16_t[]] */
  } else {
    %886 = tensor_nil_uint16 /* ty=tensor_uint16_t[] */;
    %887 = subtract(%x57, 1 /* ty=int32 */) /* ty=int32 */;
    %888 = @tensor_array_uint16(%887) /* ty=List[tensor_uint16_t[]] */;
    Cons(%886, %888) /* ty=List[tensor_uint16_t[]] */
  }
}

// meta data omitted. you can use show_meta_data=True to include meta data
